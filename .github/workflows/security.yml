name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-review:
    runs-on: self-hosted
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  secret-scan:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch || 'main' }}
          head: ${{ github.sha }}
          extra_args: --debug --only-verified
        continue-on-error: true

  codeql-analysis:
    runs-on: self-hosted
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'python']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup Python for CodeQL
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.7'

      - name: Install Python dependencies for CodeQL
        if: matrix.language == 'python'
        working-directory: backend
        run: |
          pip install uv
          uv sync --extra dev

      - name: Setup Node.js for CodeQL
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies for CodeQL
        if: matrix.language == 'javascript'
        run: npm ci

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  container-scan:
    runs-on: self-hosted
    strategy:
      matrix:
        image:
          - backend
          - frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for scanning
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.image == 'backend' && './backend' || './frontend' }}
          file: ${{ matrix.image == 'backend' && './backend/compose/production/django/Dockerfile' || './frontend/Dockerfile' }}
          load: true
          tags: naga-sis/${{ matrix.image }}:scan
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: naga-sis/${{ matrix.image }}:scan
          format: 'sarif'
          output: 'trivy-${{ matrix.image }}.sarif'

      - name: Upload Trivy scan results to Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.image }}.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results as artifact (fallback)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results-${{ matrix.image }}
          path: 'trivy-${{ matrix.image }}.sarif'

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: naga-sis/${{ matrix.image }}:scan
          args: --severity-threshold=high
        continue-on-error: true

  python-security:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.7'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        working-directory: backend
        run: |
          uv sync --extra dev
          uv add --group dev bandit safety

      - name: Run Bandit security linter
        working-directory: backend
        run: |
          uv run bandit -r apps/ config/ -f json -o bandit-report.json || echo "Bandit scan completed with issues"
        continue-on-error: true

      - name: Run Safety check
        working-directory: backend
        run: |
          uv run safety check --json --output safety-report.json || echo "Safety scan completed with issues"
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports
          path: |
            backend/bandit-report.json
            backend/safety-report.json

  node-security:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate --json > npm-audit.json
        continue-on-error: true

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json
        continue-on-error: true

      - name: Upload Node.js security reports
        uses: actions/upload-artifact@v4
        with:
          name: node-security-reports
          path: |
            npm-audit.json
            snyk-report.json

  license-check:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g license-checker

      - name: Check licenses
        run: |
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Python-2.0' --json > license-report.json || echo "License check completed with issues"
        continue-on-error: true

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.json

  security-summary:
    runs-on: self-hosted
    needs: [dependency-review, secret-scan, codeql-analysis, container-scan, python-security, node-security, license-check]
    if: always()
    steps:
      - name: Security scan summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Review | ${{ needs.dependency-review.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Scan | ${{ needs.container-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Python Security | ${{ needs.python-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Node.js Security | ${{ needs.node-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY

      - name: Notify security team on critical findings
        if: contains(needs.*.result, 'failure')
        run: |
          echo "Critical security findings detected!"
          # Add notification logic for security team