# Generated by Django 5.1.4 on 2025-01-01

from django.db import migrations, models
import django.db.models.deletion
from django.conf import settings
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('academic', '0024_auto_20241227_1234'),  # Update this to match the latest migration
        ('grading', '0015_auto_20241227_1234'),  # Update this to match the latest migration
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Create Grade Collaboration Session model
        migrations.CreateModel(
            name='GradeCollaborationSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Session ID')),
                ('title', models.CharField(max_length=255, verbose_name='Session Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('status', models.CharField(
                    choices=[
                        ('active', 'Active'),
                        ('paused', 'Paused'),
                        ('completed', 'Completed'),
                        ('cancelled', 'Cancelled'),
                    ],
                    default='active',
                    max_length=20,
                    verbose_name='Status'
                )),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Started At')),
                ('ended_at', models.DateTimeField(blank=True, null=True, verbose_name='Ended At')),
                ('settings', models.JSONField(
                    default=dict,
                    help_text='Session configuration and settings',
                    verbose_name='Session Settings'
                )),
                ('metadata', models.JSONField(
                    default=dict,
                    help_text='Additional session metadata',
                    verbose_name='Metadata'
                )),
                ('owner', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='owned_collaboration_sessions',
                    to=settings.AUTH_USER_MODEL,
                    verbose_name='Session Owner'
                )),
            ],
            options={
                'verbose_name': 'Grade Collaboration Session',
                'verbose_name_plural': 'Grade Collaboration Sessions',
                'ordering': ['-created_at'],
            },
        ),

        # Create User Presence Tracking model
        migrations.CreateModel(
            name='UserPresence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(
                    choices=[
                        ('online', 'Online'),
                        ('away', 'Away'),
                        ('busy', 'Busy'),
                        ('offline', 'Offline'),
                    ],
                    default='offline',
                    max_length=20,
                    verbose_name='Presence Status'
                )),
                ('last_seen_at', models.DateTimeField(auto_now=True, verbose_name='Last Seen At')),
                ('current_page', models.CharField(
                    blank=True,
                    max_length=255,
                    verbose_name='Current Page'
                )),
                ('cursor_position', models.JSONField(
                    blank=True,
                    default=dict,
                    help_text='Current cursor/selection position',
                    verbose_name='Cursor Position'
                )),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('session', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='user_presences',
                    to='academic.gradecollaborationsession',
                    verbose_name='Collaboration Session'
                )),
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='presence_records',
                    to=settings.AUTH_USER_MODEL,
                    verbose_name='User'
                )),
            ],
            options={
                'verbose_name': 'User Presence',
                'verbose_name_plural': 'User Presences',
                'unique_together': {('session', 'user')},
            },
        ),

        # Create Change History model for operational transforms
        migrations.CreateModel(
            name='CollaborationChangeHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Change ID')),
                ('change_type', models.CharField(
                    choices=[
                        ('insert', 'Insert'),
                        ('update', 'Update'),
                        ('delete', 'Delete'),
                        ('move', 'Move'),
                        ('format', 'Format'),
                    ],
                    max_length=20,
                    verbose_name='Change Type'
                )),
                ('target_type', models.CharField(
                    choices=[
                        ('grade', 'Grade'),
                        ('comment', 'Comment'),
                        ('rubric', 'Rubric'),
                        ('assignment', 'Assignment'),
                    ],
                    max_length=20,
                    verbose_name='Target Type'
                )),
                ('target_id', models.CharField(max_length=255, verbose_name='Target ID')),
                ('field_name', models.CharField(blank=True, max_length=100, verbose_name='Field Name')),
                ('old_value', models.JSONField(blank=True, null=True, verbose_name='Old Value')),
                ('new_value', models.JSONField(blank=True, null=True, verbose_name='New Value')),
                ('operation_data', models.JSONField(
                    default=dict,
                    help_text='Operational transform data',
                    verbose_name='Operation Data'
                )),
                ('conflict_resolved', models.BooleanField(default=False, verbose_name='Conflict Resolved')),
                ('conflict_resolution', models.JSONField(
                    blank=True,
                    null=True,
                    help_text='Details of conflict resolution',
                    verbose_name='Conflict Resolution'
                )),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('vector_clock', models.JSONField(
                    default=dict,
                    help_text='Vector clock for causal ordering',
                    verbose_name='Vector Clock'
                )),
                ('session', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='change_history',
                    to='academic.gradecollaborationsession',
                    verbose_name='Collaboration Session'
                )),
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='collaboration_changes',
                    to=settings.AUTH_USER_MODEL,
                    verbose_name='User'
                )),
            ],
            options={
                'verbose_name': 'Collaboration Change History',
                'verbose_name_plural': 'Collaboration Change Histories',
                'ordering': ['-timestamp'],
                'indexes': [
                    models.Index(fields=['session', 'timestamp']),
                    models.Index(fields=['target_type', 'target_id']),
                    models.Index(fields=['change_type', 'timestamp']),
                ],
            },
        ),

        # Create Operational Transform Log model
        migrations.CreateModel(
            name='OperationalTransformLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Operation ID')),
                ('operation_type', models.CharField(
                    choices=[
                        ('retain', 'Retain'),
                        ('insert', 'Insert'),
                        ('delete', 'Delete'),
                        ('transform', 'Transform'),
                        ('compose', 'Compose'),
                        ('invert', 'Invert'),
                    ],
                    max_length=20,
                    verbose_name='Operation Type'
                )),
                ('operation_data', models.JSONField(verbose_name='Operation Data')),
                ('original_operation', models.JSONField(blank=True, null=True, verbose_name='Original Operation')),
                ('transformed_operation', models.JSONField(blank=True, null=True, verbose_name='Transformed Operation')),
                ('document_state_before', models.JSONField(blank=True, null=True, verbose_name='Document State Before')),
                ('document_state_after', models.JSONField(blank=True, null=True, verbose_name='Document State After')),
                ('success', models.BooleanField(default=True, verbose_name='Operation Success')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('execution_time_ms', models.PositiveIntegerField(blank=True, null=True, verbose_name='Execution Time (ms)')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('session', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='transform_logs',
                    to='academic.gradecollaborationsession',
                    verbose_name='Collaboration Session'
                )),
                ('user', models.ForeignKey(
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='transform_operations',
                    to=settings.AUTH_USER_MODEL,
                    verbose_name='User'
                )),
            ],
            options={
                'verbose_name': 'Operational Transform Log',
                'verbose_name_plural': 'Operational Transform Logs',
                'ordering': ['-timestamp'],
                'indexes': [
                    models.Index(fields=['session', 'timestamp']),
                    models.Index(fields=['operation_type', 'success']),
                ],
            },
        ),

        # Add performance indexes for real-time collaboration
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_academic_collab_session_active ON academic_gradecollaborationsession(status, updated_at) WHERE status = 'active';",
            reverse_sql="DROP INDEX IF EXISTS idx_academic_collab_session_active;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_academic_presence_online ON academic_userpresence(status, last_seen_at) WHERE status != 'offline';",
            reverse_sql="DROP INDEX IF EXISTS idx_academic_presence_online;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_academic_change_recent ON academic_collaborationchangehistory(session_id, timestamp) WHERE timestamp > NOW() - INTERVAL '1 hour';",
            reverse_sql="DROP INDEX IF EXISTS idx_academic_change_recent;",
        ),
    ]