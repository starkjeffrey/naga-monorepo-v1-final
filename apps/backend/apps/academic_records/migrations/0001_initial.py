# Generated by Django 5.2.5 on 2025-08-28 12:49

import django.db.models.manager
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DocumentQuota',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('total_units', models.PositiveIntegerField(default=10, help_text='Total document units allocated for this term', verbose_name='Total Units')),
                ('used_units', models.PositiveIntegerField(default=0, help_text='Document units already used', verbose_name='Used Units')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this quota is currently usable', verbose_name='Is Active')),
                ('expires_date', models.DateField(help_text='Date when this quota expires', verbose_name='Expires Date')),
            ],
            options={
                'verbose_name': 'Document Quota',
                'verbose_name_plural': 'Document Quotas',
                'db_table': 'academic_records_document_quota',
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DocumentQuotaUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('units_consumed', models.PositiveIntegerField(help_text='Number of units consumed for this document', verbose_name='Units Consumed')),
                ('usage_date', models.DateTimeField(auto_now_add=True, help_text='When the units were consumed', verbose_name='Usage Date')),
            ],
            options={
                'verbose_name': 'Document Quota Usage',
                'verbose_name_plural': 'Document Quota Usage Records',
                'db_table': 'academic_records_document_quota_usage',
                'ordering': ['-usage_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DocumentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('request_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this document request', unique=True, verbose_name='Request ID')),
                ('request_status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('REJECTED', 'Rejected'), ('ON_HOLD', 'On Hold')], default='PENDING', help_text='Current status of the request', max_length=20, verbose_name='Request Status')),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('NORMAL', 'Normal'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='NORMAL', help_text='Priority level for processing this request', max_length=10, verbose_name='Priority')),
                ('delivery_method', models.CharField(choices=[('EMAIL', 'Email'), ('PICKUP', 'In-Person Pickup'), ('MAIL', 'Postal Mail'), ('THIRD_PARTY', 'Third Party Institution')], default='EMAIL', help_text='How the document should be delivered', max_length=20, verbose_name='Delivery Method')),
                ('recipient_name', models.CharField(blank=True, help_text='Name of person or institution receiving the document', max_length=200, verbose_name='Recipient Name')),
                ('recipient_address', models.TextField(blank=True, help_text='Mailing address for document delivery', verbose_name='Recipient Address')),
                ('recipient_email', models.EmailField(blank=True, help_text='Email address for electronic delivery', max_length=254, verbose_name='Recipient Email')),
                ('request_notes', models.TextField(blank=True, help_text='Additional notes about the document request', verbose_name='Request Notes')),
                ('custom_data', models.JSONField(blank=True, default=dict, help_text='Document-type specific data (e.g., date ranges, special requirements)', verbose_name='Custom Data')),
                ('has_fee', models.BooleanField(default=False, help_text='Whether this request requires payment', verbose_name='Has Fee')),
                ('fee_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fee amount for this specific request', max_digits=10, null=True, verbose_name='Fee Amount')),
                ('is_free_allowance', models.BooleanField(default=False, help_text="Whether this request uses the student's free allowance", verbose_name='Is Free Allowance')),
                ('payment_required', models.BooleanField(default=False, help_text='Whether payment is required before processing', verbose_name='Payment Required')),
                ('payment_status', models.CharField(choices=[('NOT_REQUIRED', 'Not Required'), ('PENDING', 'Payment Pending'), ('PAID', 'Paid'), ('WAIVED', 'Waived')], default='NOT_REQUIRED', help_text='Status of payment for this request', max_length=20, verbose_name='Payment Status')),
                ('finance_invoice_id', models.PositiveIntegerField(blank=True, help_text='ID of associated invoice in finance system', null=True, verbose_name='Finance Invoice ID')),
                ('requested_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time the request was submitted', verbose_name='Requested Date')),
                ('due_date', models.DateTimeField(blank=True, help_text='Expected completion date based on processing time', null=True, verbose_name='Due Date')),
                ('approved_date', models.DateTimeField(blank=True, help_text='Date and time the request was approved', null=True, verbose_name='Approved Date')),
                ('completed_date', models.DateTimeField(blank=True, help_text='Date and time the document was delivered', null=True, verbose_name='Completed Date')),
            ],
            options={
                'verbose_name': 'Document Request',
                'verbose_name_plural': 'Document Requests',
                'ordering': ['-requested_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DocumentRequestComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('comment_text', models.TextField(help_text='Comment or status update text', verbose_name='Comment')),
                ('is_internal', models.BooleanField(default=False, help_text='Whether this comment is for staff only', verbose_name='Internal Comment')),
            ],
            options={
                'verbose_name': 'Document Request Comment',
                'verbose_name_plural': 'Document Request Comments',
                'ordering': ['created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DocumentTypeConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique code for this document type (e.g., OFFICIAL_TRANSCRIPT)', max_length=50, unique=True, verbose_name='Document Type Code')),
                ('name', models.CharField(help_text='Human-readable name for this document type', max_length=200, verbose_name='Document Name')),
                ('category', models.CharField(choices=[('academic_transcript', 'Academic Transcript'), ('grade_report', 'Grade Report'), ('attendance_report', 'Attendance Report'), ('enrollment_verification', 'Enrollment Verification'), ('official_letter', 'Official Letter'), ('degree_verification', 'Degree Verification'), ('conduct_report', 'Conduct Report')], help_text='Category this document type belongs to', max_length=30, verbose_name='Document Category')),
                ('description', models.TextField(blank=True, help_text='Detailed description of what this document contains', verbose_name='Description')),
                ('requires_approval', models.BooleanField(default=True, help_text='Whether requests for this document type require approval', verbose_name='Requires Approval')),
                ('auto_generate', models.BooleanField(default=False, help_text='Whether this document can be automatically generated', verbose_name='Auto Generate')),
                ('processing_time_hours', models.PositiveIntegerField(default=24, help_text='Expected processing time in hours', verbose_name='Processing Time (Hours)')),
                ('requires_grade_data', models.BooleanField(default=False, help_text='Whether this document requires access to grade information', verbose_name='Requires Grade Data')),
                ('requires_attendance_data', models.BooleanField(default=False, help_text='Whether this document requires attendance information', verbose_name='Requires Attendance Data')),
                ('requires_manual_input', models.BooleanField(default=False, help_text='Whether this document requires manual staff input/review', verbose_name='Requires Manual Input')),
                ('allows_email_delivery', models.BooleanField(default=True, help_text='Whether this document can be delivered via email', verbose_name='Allows Email Delivery')),
                ('allows_pickup', models.BooleanField(default=True, help_text='Whether this document can be picked up in person', verbose_name='Allows Pickup')),
                ('allows_mail_delivery', models.BooleanField(default=False, help_text='Whether this document can be mailed', verbose_name='Allows Mail Delivery')),
                ('allows_third_party_delivery', models.BooleanField(default=False, help_text='Whether this document can be sent to third parties', verbose_name='Allows Third Party Delivery')),
                ('required_permission', models.CharField(blank=True, help_text='Django permission required to request this document type', max_length=100, verbose_name='Required Permission')),
                ('has_fee', models.BooleanField(default=False, help_text='Whether this document type has an associated fee', verbose_name='Has Fee')),
                ('fee_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fee amount for this document type (if applicable)', max_digits=10, null=True, verbose_name='Fee Amount')),
                ('fee_currency', models.CharField(default='USD', help_text='Currency for the document fee', max_length=3, verbose_name='Fee Currency')),
                ('free_allowance_per_term', models.PositiveIntegerField(default=0, help_text='Number of free documents of this type per academic term', verbose_name='Free Allowance Per Term')),
                ('free_allowance_per_year', models.PositiveIntegerField(default=0, help_text='Number of free documents of this type per academic year', verbose_name='Free Allowance Per Year')),
                ('free_allowance_lifetime', models.PositiveIntegerField(default=0, help_text='Total number of free documents of this type allowed', verbose_name='Free Allowance Lifetime')),
                ('unit_cost', models.PositiveIntegerField(default=1, help_text='Number of quota units required for this document type', verbose_name='Unit Cost')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this document type is currently available for requests', verbose_name='Is Active')),
                ('display_order', models.PositiveIntegerField(default=100, help_text='Order in which this document type appears in lists', verbose_name='Display Order')),
            ],
            options={
                'verbose_name': 'Document Type Configuration',
                'verbose_name_plural': 'Document Type Configurations',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DocumentUsageTracker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('total_requested', models.PositiveIntegerField(default=0, help_text='Total number of documents of this type ever requested', verbose_name='Total Requested')),
                ('total_completed', models.PositiveIntegerField(default=0, help_text='Total number of documents of this type successfully completed', verbose_name='Total Completed')),
                ('total_free_used', models.PositiveIntegerField(default=0, help_text='Total number of free allowances used for this document type', verbose_name='Total Free Used')),
                ('total_paid', models.PositiveIntegerField(default=0, help_text='Total number of paid documents of this type', verbose_name='Total Paid')),
                ('current_term_count', models.PositiveIntegerField(default=0, help_text='Number of documents requested in current term', verbose_name='Current Term Count')),
                ('current_year_count', models.PositiveIntegerField(default=0, help_text='Number of documents requested in current academic year', verbose_name='Current Year Count')),
                ('last_request_date', models.DateTimeField(blank=True, help_text='Date of most recent request for this document type', null=True, verbose_name='Last Request Date')),
                ('last_completed_date', models.DateTimeField(blank=True, help_text='Date of most recent completed document of this type', null=True, verbose_name='Last Completed Date')),
            ],
            options={
                'verbose_name': 'Document Usage Tracker',
                'verbose_name_plural': 'Document Usage Trackers',
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GeneratedDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('document_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this document', unique=True, verbose_name='Document ID')),
                ('file_path', models.CharField(blank=True, help_text='Path to the generated document file', max_length=500, verbose_name='File Path')),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='Size of the document file in bytes', null=True, verbose_name='File Size')),
                ('content_hash', models.CharField(blank=True, help_text='SHA-256 hash of document content for verification', max_length=64, verbose_name='Content Hash')),
                ('verification_code', models.CharField(blank=True, help_text='Unique code for document verification', max_length=32, unique=True, verbose_name='Verification Code')),
                ('qr_code_data', models.TextField(blank=True, help_text='QR code data for verification', verbose_name='QR Code Data')),
                ('generated_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time the document was generated', verbose_name='Generated Date')),
                ('document_data', models.JSONField(blank=True, default=dict, help_text='Document-specific metadata (e.g., as_of_date, included_terms)', verbose_name='Document Data')),
                ('access_count', models.PositiveIntegerField(default=0, help_text='Number of times this document has been accessed', verbose_name='Access Count')),
                ('last_accessed', models.DateTimeField(blank=True, help_text='Date and time the document was last accessed', null=True, verbose_name='Last Accessed')),
            ],
            options={
                'verbose_name': 'Generated Document',
                'verbose_name_plural': 'Generated Documents',
                'ordering': ['-generated_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
    ]
