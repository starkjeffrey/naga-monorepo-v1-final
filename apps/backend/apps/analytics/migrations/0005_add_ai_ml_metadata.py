# Generated by Django 5.1.4 on 2025-01-01

from django.db import migrations, models
import django.db.models.deletion
from django.conf import settings
import uuid
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('analytics', '0004_auto_20241227_1234'),  # Update this to match the latest migration
        ('people', '0033_enhance_photo_metadata'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Create ML Model Metadata model
        migrations.CreateModel(
            name='MLModelMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Model ID')),
                ('name', models.CharField(max_length=255, verbose_name='Model Name')),
                ('description', models.TextField(blank=True, verbose_name='Model Description')),
                ('model_type', models.CharField(
                    choices=[
                        ('classification', 'Classification'),
                        ('regression', 'Regression'),
                        ('clustering', 'Clustering'),
                        ('neural_network', 'Neural Network'),
                        ('ensemble', 'Ensemble'),
                        ('transformer', 'Transformer'),
                    ],
                    max_length=20,
                    verbose_name='Model Type'
                )),
                ('framework', models.CharField(
                    choices=[
                        ('scikit_learn', 'Scikit-Learn'),
                        ('tensorflow', 'TensorFlow'),
                        ('pytorch', 'PyTorch'),
                        ('xgboost', 'XGBoost'),
                        ('lightgbm', 'LightGBM'),
                        ('huggingface', 'Hugging Face'),
                        ('custom', 'Custom'),
                    ],
                    max_length=20,
                    verbose_name='ML Framework'
                )),
                ('version', models.CharField(max_length=50, verbose_name='Model Version')),
                ('status', models.CharField(
                    choices=[
                        ('training', 'Training'),
                        ('testing', 'Testing'),
                        ('staging', 'Staging'),
                        ('production', 'Production'),
                        ('deprecated', 'Deprecated'),
                        ('failed', 'Failed'),
                    ],
                    default='training',
                    max_length=20,
                    verbose_name='Model Status'
                )),
                ('training_data_size', models.PositiveIntegerField(
                    null=True,
                    blank=True,
                    verbose_name='Training Data Size'
                )),
                ('features_count', models.PositiveIntegerField(
                    null=True,
                    blank=True,
                    verbose_name='Number of Features'
                )),
                ('accuracy_score', models.DecimalField(
                    max_digits=5,
                    decimal_places=4,
                    null=True,
                    blank=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(1.0),
                    ],
                    verbose_name='Accuracy Score'
                )),
                ('f1_score', models.DecimalField(
                    max_digits=5,
                    decimal_places=4,
                    null=True,
                    blank=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(1.0),
                    ],
                    verbose_name='F1 Score'
                )),
                ('hyperparameters', models.JSONField(
                    default=dict,
                    verbose_name='Hyperparameters',
                    help_text='Model hyperparameters configuration'
                )),
                ('performance_metrics', models.JSONField(
                    default=dict,
                    verbose_name='Performance Metrics',
                    help_text='Detailed performance metrics and validation results'
                )),
                ('feature_importance', models.JSONField(
                    null=True,
                    blank=True,
                    verbose_name='Feature Importance',
                    help_text='Feature importance scores and rankings'
                )),
                ('model_artifacts_path', models.CharField(
                    max_length=500,
                    null=True,
                    blank=True,
                    verbose_name='Model Artifacts Path',
                    help_text='File system path to model artifacts'
                )),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('deployed_at', models.DateTimeField(null=True, blank=True, verbose_name='Deployed At')),
                ('deprecated_at', models.DateTimeField(null=True, blank=True, verbose_name='Deprecated At')),
                ('created_by', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='created_ml_models',
                    to=settings.AUTH_USER_MODEL,
                    verbose_name='Created By'
                )),
            ],
            options={
                'verbose_name': 'ML Model Metadata',
                'verbose_name_plural': 'ML Model Metadata',
                'ordering': ['-created_at'],
                'indexes': [
                    models.Index(fields=['status', 'created_at']),
                    models.Index(fields=['model_type', 'framework']),
                    models.Index(fields=['version', 'status']),
                ],
            },
        ),

        # Create Prediction Results model
        migrations.CreateModel(
            name='PredictionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Prediction ID')),
                ('target_type', models.CharField(
                    choices=[
                        ('student', 'Student'),
                        ('course', 'Course'),
                        ('enrollment', 'Enrollment'),
                        ('payment', 'Payment'),
                        ('grade', 'Grade'),
                    ],
                    max_length=20,
                    verbose_name='Target Type'
                )),
                ('target_id', models.CharField(max_length=255, verbose_name='Target ID')),
                ('prediction_type', models.CharField(
                    choices=[
                        ('risk_assessment', 'Risk Assessment'),
                        ('success_probability', 'Success Probability'),
                        ('grade_prediction', 'Grade Prediction'),
                        ('dropout_risk', 'Dropout Risk'),
                        ('financial_risk', 'Financial Risk'),
                        ('course_recommendation', 'Course Recommendation'),
                    ],
                    max_length=30,
                    verbose_name='Prediction Type'
                )),
                ('prediction_value', models.JSONField(
                    verbose_name='Prediction Value',
                    help_text='The actual prediction result (scores, probabilities, classifications)'
                )),
                ('confidence_score', models.DecimalField(
                    max_digits=5,
                    decimal_places=4,
                    null=True,
                    blank=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(1.0),
                    ],
                    verbose_name='Confidence Score'
                )),
                ('input_features', models.JSONField(
                    verbose_name='Input Features',
                    help_text='Input features used for the prediction'
                )),
                ('feature_contributions', models.JSONField(
                    null=True,
                    blank=True,
                    verbose_name='Feature Contributions',
                    help_text='SHAP values or feature contribution scores'
                )),
                ('prediction_explanation', models.JSONField(
                    null=True,
                    blank=True,
                    verbose_name='Prediction Explanation',
                    help_text='Human-readable explanation of the prediction'
                )),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active Prediction')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('expires_at', models.DateTimeField(null=True, blank=True, verbose_name='Expires At')),
                ('model', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='predictions',
                    to='analytics.mlmodelmetadata',
                    verbose_name='ML Model'
                )),
                ('student', models.ForeignKey(
                    null=True,
                    blank=True,
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='ml_predictions',
                    to='people.studentprofile',
                    verbose_name='Student'
                )),
            ],
            options={
                'verbose_name': 'Prediction Result',
                'verbose_name_plural': 'Prediction Results',
                'ordering': ['-created_at'],
                'indexes': [
                    models.Index(fields=['target_type', 'target_id']),
                    models.Index(fields=['prediction_type', 'is_active']),
                    models.Index(fields=['student', 'prediction_type', 'is_active']),
                    models.Index(fields=['created_at', 'expires_at']),
                ],
            },
        ),

        # Create Document Intelligence Metadata model
        migrations.CreateModel(
            name='DocumentIntelligenceMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Document ID')),
                ('file_name', models.CharField(max_length=255, verbose_name='File Name')),
                ('file_path', models.CharField(max_length=500, verbose_name='File Path')),
                ('file_size', models.PositiveIntegerField(verbose_name='File Size (bytes)')),
                ('mime_type', models.CharField(max_length=100, verbose_name='MIME Type')),
                ('document_type', models.CharField(
                    choices=[
                        ('transcript', 'Academic Transcript'),
                        ('diploma', 'Diploma'),
                        ('certificate', 'Certificate'),
                        ('id_document', 'ID Document'),
                        ('financial_record', 'Financial Record'),
                        ('application', 'Application Form'),
                        ('other', 'Other Document'),
                    ],
                    max_length=20,
                    verbose_name='Document Type'
                )),
                ('processing_status', models.CharField(
                    choices=[
                        ('pending', 'Pending Processing'),
                        ('processing', 'Currently Processing'),
                        ('completed', 'Processing Complete'),
                        ('failed', 'Processing Failed'),
                        ('manual_review', 'Manual Review Required'),
                    ],
                    default='pending',
                    max_length=20,
                    verbose_name='Processing Status'
                )),
                ('extracted_text', models.TextField(blank=True, verbose_name='Extracted Text')),
                ('structured_data', models.JSONField(
                    null=True,
                    blank=True,
                    verbose_name='Structured Data',
                    help_text='Structured data extracted from document'
                )),
                ('entities_extracted', models.JSONField(
                    null=True,
                    blank=True,
                    verbose_name='Entities Extracted',
                    help_text='Named entities and relationships found in document'
                )),
                ('confidence_scores', models.JSONField(
                    null=True,
                    blank=True,
                    verbose_name='Confidence Scores',
                    help_text='Confidence scores for extracted data'
                )),
                ('quality_score', models.DecimalField(
                    max_digits=5,
                    decimal_places=2,
                    null=True,
                    blank=True,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(100.0),
                    ],
                    verbose_name='Document Quality Score'
                )),
                ('processing_errors', models.JSONField(
                    null=True,
                    blank=True,
                    verbose_name='Processing Errors',
                    help_text='Errors encountered during processing'
                )),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('processed_at', models.DateTimeField(null=True, blank=True, verbose_name='Processed At')),
                ('student', models.ForeignKey(
                    null=True,
                    blank=True,
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='document_intelligence',
                    to='people.studentprofile',
                    verbose_name='Related Student'
                )),
                ('uploaded_by', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='uploaded_documents',
                    to=settings.AUTH_USER_MODEL,
                    verbose_name='Uploaded By'
                )),
            ],
            options={
                'verbose_name': 'Document Intelligence Metadata',
                'verbose_name_plural': 'Document Intelligence Metadata',
                'ordering': ['-created_at'],
                'indexes': [
                    models.Index(fields=['document_type', 'processing_status']),
                    models.Index(fields=['student', 'document_type']),
                    models.Index(fields=['processing_status', 'created_at']),
                ],
            },
        ),

        # Create Blockchain Verification model
        migrations.CreateModel(
            name='BlockchainVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verification_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Verification ID')),
                ('record_type', models.CharField(
                    choices=[
                        ('transcript', 'Academic Transcript'),
                        ('diploma', 'Diploma'),
                        ('certificate', 'Certificate'),
                        ('grade_record', 'Grade Record'),
                        ('enrollment_record', 'Enrollment Record'),
                    ],
                    max_length=20,
                    verbose_name='Record Type'
                )),
                ('record_id', models.CharField(max_length=255, verbose_name='Record ID')),
                ('data_hash', models.CharField(
                    max_length=64,
                    verbose_name='Data Hash',
                    help_text='SHA-256 hash of the verified data'
                )),
                ('blockchain_hash', models.CharField(
                    max_length=66,
                    null=True,
                    blank=True,
                    verbose_name='Blockchain Transaction Hash'
                )),
                ('blockchain_network', models.CharField(
                    choices=[
                        ('ethereum', 'Ethereum'),
                        ('polygon', 'Polygon'),
                        ('bsc', 'Binance Smart Chain'),
                        ('private', 'Private Network'),
                    ],
                    max_length=20,
                    null=True,
                    blank=True,
                    verbose_name='Blockchain Network'
                )),
                ('block_number', models.PositiveIntegerField(
                    null=True,
                    blank=True,
                    verbose_name='Block Number'
                )),
                ('verification_status', models.CharField(
                    choices=[
                        ('pending', 'Pending Verification'),
                        ('submitted', 'Submitted to Blockchain'),
                        ('confirmed', 'Confirmed on Blockchain'),
                        ('failed', 'Verification Failed'),
                    ],
                    default='pending',
                    max_length=20,
                    verbose_name='Verification Status'
                )),
                ('metadata', models.JSONField(
                    default=dict,
                    verbose_name='Verification Metadata',
                    help_text='Additional verification metadata'
                )),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('verified_at', models.DateTimeField(null=True, blank=True, verbose_name='Verified At')),
                ('student', models.ForeignKey(
                    null=True,
                    blank=True,
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='blockchain_verifications',
                    to='people.studentprofile',
                    verbose_name='Student'
                )),
                ('verified_by', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT,
                    related_name='blockchain_verifications',
                    to=settings.AUTH_USER_MODEL,
                    verbose_name='Verified By'
                )),
            ],
            options={
                'verbose_name': 'Blockchain Verification',
                'verbose_name_plural': 'Blockchain Verifications',
                'ordering': ['-created_at'],
                'unique_together': {('record_type', 'record_id', 'data_hash')},
                'indexes': [
                    models.Index(fields=['record_type', 'record_id']),
                    models.Index(fields=['verification_status', 'created_at']),
                    models.Index(fields=['blockchain_hash']),
                ],
            },
        ),

        # Add performance indexes for AI/ML queries
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_analytics_ml_model_production ON analytics_mlmodelmetadata(status, model_type) WHERE status = 'production';",
            reverse_sql="DROP INDEX IF EXISTS idx_analytics_ml_model_production;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_analytics_prediction_active ON analytics_predictionresult(target_type, target_id, is_active) WHERE is_active = true;",
            reverse_sql="DROP INDEX IF EXISTS idx_analytics_prediction_active;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_analytics_document_pending ON analytics_documentintelligencemetadata(processing_status, created_at) WHERE processing_status != 'completed';",
            reverse_sql="DROP INDEX IF EXISTS idx_analytics_document_pending;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_analytics_blockchain_confirmed ON analytics_blockchainverification(verification_status, verified_at) WHERE verification_status = 'confirmed';",
            reverse_sql="DROP INDEX IF EXISTS idx_analytics_blockchain_confirmed;",
        ),
    ]