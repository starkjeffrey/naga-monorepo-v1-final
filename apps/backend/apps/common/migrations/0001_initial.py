# Generated by Django 5.2.5 on 2025-08-28 12:49

import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('eng_name', models.CharField(help_text='Holiday name in English', max_length=200, verbose_name='English Name')),
                ('khmer_name', models.CharField(blank=True, help_text='Holiday name in Khmer', max_length=200, verbose_name='Khmer Name')),
                ('start_date', models.DateField(help_text='Date when the holiday begins', verbose_name='Start Date')),
                ('end_date', models.DateField(help_text='Date when the holiday ends', verbose_name='End Date')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this holiday is currently observed', verbose_name='Is Active')),
                ('notes', models.TextField(blank=True, help_text='Additional information about this holiday', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Holiday',
                'verbose_name_plural': 'Holidays',
                'ordering': ['start_date'],
                'unique_together': {('eng_name', 'start_date')},
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('building', models.CharField(choices=[('MAIN', 'Main Building'), ('WEST', 'West Building'), ('BACK', 'Back Building')], help_text='Building where this room is located', max_length=10, verbose_name='Building')),
                ('name', models.CharField(help_text='Name or identifier for the room', max_length=100, verbose_name='Room Name')),
                ('code', models.CharField(editable=False, help_text='Auto-generated internal identifier for the room', max_length=20, unique=True, verbose_name='Room Code')),
                ('capacity', models.PositiveIntegerField(help_text='Maximum number of people this room can accommodate', verbose_name='Capacity')),
                ('room_type', models.CharField(choices=[('CLASS', 'Classroom'), ('COMP', 'Computer Lab'), ('LANG', 'Language Lab'), ('CONFERENCE', 'Conference Room'), ('MEETING', 'Meeting Room'), ('OFFICE', 'Office'), ('OTHER', 'Other')], default='CLASS', help_text='Type of room for scheduling purposes', max_length=20, verbose_name='Room Type')),
                ('has_projector', models.BooleanField(default=False, help_text='Whether this room has an overhead projector', verbose_name='Has Projector')),
                ('has_whiteboard', models.BooleanField(default=True, help_text='Whether this room has a whiteboard', verbose_name='Has Whiteboard')),
                ('has_computers', models.BooleanField(default=False, help_text='Whether this room has computers available', verbose_name='Has Computers')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this room is currently available for use', verbose_name='Is Active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this room', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Room',
                'verbose_name_plural': 'Rooms',
                'ordering': ['building', 'name'],
                'unique_together': {('building', 'code')},
            },
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('activity_type', models.CharField(choices=[('LOGIN', 'User Login'), ('LOGOUT', 'User Logout'), ('CREATE', 'Create Record'), ('UPDATE', 'Update Record'), ('DELETE', 'Delete Record'), ('VIEW', 'View Record'), ('EXPORT', 'Export Data'), ('IMPORT', 'Import Data'), ('PAYMENT', 'Payment Processed'), ('ENROLLMENT', 'Student Enrollment'), ('GRADE_ENTRY', 'Grade Entry'), ('SYSTEM', 'System Event'), ('ERROR', 'System Error')], max_length=20, verbose_name='Activity Type')),
                ('description', models.TextField(help_text='Human-readable description of the activity', verbose_name='Description')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text="User's IP address when action was performed", null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, help_text="User's browser/client information", verbose_name='User Agent')),
                ('session_key', models.CharField(blank=True, help_text="User's session identifier", max_length=40, verbose_name='Session Key')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Object ID')),
                ('changes', models.JSONField(blank=True, default=dict, help_text='Details of what changed (for updates)', verbose_name='Changes')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional activity context', verbose_name='Metadata')),
                ('success', models.BooleanField(default=True, help_text='Whether the activity completed successfully', verbose_name='Success')),
                ('error_message', models.TextField(blank=True, help_text='Error details if activity failed', verbose_name='Error Message')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Content Type')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activity_logs', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Activity Log',
                'verbose_name_plural': 'Activity Logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='common_acti_user_id_b871d5_idx'), models.Index(fields=['activity_type', '-created_at'], name='common_acti_activit_69f87f_idx'), models.Index(fields=['content_type', 'object_id'], name='common_acti_content_dba591_idx'), models.Index(fields=['-created_at'], name='common_acti_created_ea2eaa_idx')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('title', models.CharField(help_text='Brief notification title', max_length=255, verbose_name='Title')),
                ('message', models.TextField(help_text='Detailed notification message', verbose_name='Message')),
                ('notification_type', models.CharField(choices=[('INFO', 'Information'), ('SUCCESS', 'Success'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('FINANCE', 'Finance'), ('ACADEMIC', 'Academic'), ('ENROLLMENT', 'Enrollment'), ('GRADING', 'Grading'), ('SYSTEM', 'System')], default='INFO', max_length=20, verbose_name='Type')),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('NORMAL', 'Normal'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='NORMAL', max_length=10, verbose_name='Priority')),
                ('is_read', models.BooleanField(default=False, help_text='Whether the user has read this notification', verbose_name='Is Read')),
                ('read_at', models.DateTimeField(blank=True, help_text='When the notification was read', null=True, verbose_name='Read At')),
                ('action_url', models.URLField(blank=True, help_text='Optional URL for notification action', max_length=500, verbose_name='Action URL')),
                ('action_text', models.CharField(blank=True, help_text='Text for action button', max_length=100, verbose_name='Action Text')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this notification expires', null=True, verbose_name='Expires At')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional notification data', verbose_name='Metadata')),
                ('object_id', models.PositiveIntegerField(blank=True, null=True, verbose_name='Object ID')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Content Type')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='common_noti_user_id_053883_idx'), models.Index(fields=['user', 'is_read'], name='common_noti_user_id_aae5b0_idx'), models.Index(fields=['notification_type', '-created_at'], name='common_noti_notific_0dd534_idx'), models.Index(fields=['priority', '-created_at'], name='common_noti_priorit_d15cc9_idx')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text='Descriptive name for this template', max_length=200, verbose_name='Template Name')),
                ('template_type', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification')], help_text='Type of notification', max_length=10, verbose_name='Template Type')),
                ('trigger_event', models.CharField(choices=[('enrollment', 'Enrollment'), ('payment_due', 'Payment Due'), ('payment_received', 'Payment Received'), ('grade_posted', 'Grade Posted'), ('attendance_alert', 'Attendance Alert'), ('system_maintenance', 'System Maintenance')], help_text='When this notification should be sent', max_length=20, verbose_name='Trigger Event')),
                ('subject', models.CharField(blank=True, help_text='Subject line for email notifications', max_length=200, verbose_name='Subject')),
                ('body', models.TextField(help_text='Notification content with template variables', verbose_name='Body')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is currently in use', verbose_name='Is Active')),
                ('send_to_student', models.BooleanField(default=True, help_text='Whether to send to students', verbose_name='Send to Student')),
                ('send_to_parent', models.BooleanField(default=False, help_text='Whether to send to parents/guardians', verbose_name='Send to Parent')),
                ('send_to_staff', models.BooleanField(default=False, help_text='Whether to send to staff members', verbose_name='Send to Staff')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Notification Template',
                'verbose_name_plural': 'Notification Templates',
                'ordering': ['template_type', 'trigger_event'],
                'indexes': [models.Index(fields=['template_type', 'is_active'], name='common_noti_templat_d60af9_idx'), models.Index(fields=['trigger_event'], name='common_noti_trigger_e7f652_idx')],
                'unique_together': {('template_type', 'trigger_event')},
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('student_number', models.CharField(db_index=True, help_text='Student number for easy searching', max_length=20, verbose_name='Student Number')),
                ('student_name', models.CharField(help_text='Student name at time of action (for historical reference)', max_length=200, verbose_name='Student Name')),
                ('activity_type', models.CharField(choices=[('CLASS_ENROLLMENT', 'Class Enrollment'), ('CLASS_WITHDRAWAL', 'Class Withdrawal'), ('CLASS_COMPLETION', 'Class Completion'), ('LANGUAGE_PROMOTION', 'Language Level Promotion'), ('LANGUAGE_LEVEL_SKIP', 'Language Level Skip'), ('LANGUAGE_PROGRAM_TRANSFER', 'Language Program Transfer'), ('GRADE_ASSIGNMENT', 'Grade Assignment'), ('GRADE_CHANGE', 'Grade Change'), ('GRADUATION', 'Graduation Recorded'), ('PROGRAM_ENROLLMENT', 'Program Enrollment'), ('PROGRAM_WITHDRAWAL', 'Program Withdrawal'), ('STUDENT_STATUS_CHANGE', 'Student Status Change'), ('MONK_STATUS_CHANGE', 'Monk Status Change'), ('MANAGEMENT_OVERRIDE', 'Management Override Applied'), ('REPEAT_PREVENTION_OVERRIDE', 'Repeat Prevention Override'), ('PREREQUISITE_OVERRIDE', 'Prerequisite Override'), ('CAPACITY_OVERRIDE', 'Capacity Override'), ('ATTENDANCE_RECORD', 'Attendance Record'), ('DOCUMENT_REQUEST', 'Document Request'), ('SCHOLARSHIP_ASSIGNED', 'Scholarship Assigned'), ('SCHOLARSHIP_REVOKED', 'Scholarship Revoked'), ('PROFILE_CREATE', 'Student Profile Created'), ('PROFILE_UPDATE', 'Student Profile Updated'), ('PROFILE_MERGE', 'Student Profiles Merged')], db_index=True, help_text='Type of activity performed', max_length=40, verbose_name='Activity Type')),
                ('description', models.TextField(help_text='Detailed description of the activity', verbose_name='Description')),
                ('term_name', models.CharField(blank=True, db_index=True, help_text='Term when activity occurred (if applicable)', max_length=100, verbose_name='Term Name')),
                ('class_code', models.CharField(blank=True, db_index=True, help_text='Course/class code (if applicable)', max_length=20, verbose_name='Class Code')),
                ('class_section', models.CharField(blank=True, help_text='Class section (if applicable)', max_length=10, verbose_name='Class Section')),
                ('program_name', models.CharField(blank=True, help_text='Academic or language program (if applicable)', max_length=100, verbose_name='Program Name')),
                ('activity_details', models.JSONField(blank=True, default=dict, help_text='Additional structured details about the activity', verbose_name='Activity Details')),
                ('is_system_generated', models.BooleanField(default=False, help_text='Whether this log entry was automatically generated', verbose_name='System Generated')),
                ('visibility', models.CharField(choices=[('STAFF_ONLY', 'Staff Only'), ('STUDENT_VISIBLE', 'Student Can View'), ('PUBLIC', 'Public Record')], default='STAFF_ONLY', help_text='Who can view this audit log entry', max_length=20, verbose_name='Visibility')),
                ('performed_by', models.ForeignKey(help_text='Staff member who performed or initiated the action', on_delete=django.db.models.deletion.PROTECT, related_name='student_activities_performed', to=settings.AUTH_USER_MODEL, verbose_name='Performed By')),
            ],
            options={
                'verbose_name': 'Student Audit Log',
                'verbose_name_plural': 'Student Audit Logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['student_number', '-created_at'], name='common_stud_student_5d6b7c_idx'), models.Index(fields=['activity_type', '-created_at'], name='common_stud_activit_2778db_idx'), models.Index(fields=['term_name', '-created_at'], name='common_stud_term_na_757486_idx'), models.Index(fields=['class_code', '-created_at'], name='common_stud_class_c_6bb3bd_idx'), models.Index(fields=['student_number', 'term_name', '-created_at'], name='common_stud_student_517ede_idx'), models.Index(fields=['student_number', 'class_code', '-created_at'], name='common_stud_student_b898ff_idx'), models.Index(fields=['student_number', 'activity_type', '-created_at'], name='common_stud_student_46d954_idx'), models.Index(fields=['created_at'], name='common_stud_created_d5d9ee_idx'), models.Index(fields=['-created_at'], name='common_stud_created_1e7a98_idx')],
            },
        ),
        migrations.CreateModel(
            name='SystemAuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('action_type', models.CharField(choices=[('ENROLLMENT_OVERRIDE', 'Enrollment Override'), ('REPEAT_PREVENTION_OVERRIDE', 'Repeat Prevention Override'), ('PREREQUISITE_OVERRIDE', 'Prerequisite Override'), ('CAPACITY_OVERRIDE', 'Capacity Override'), ('ACADEMIC_POLICY_OVERRIDE', 'Academic Policy Override'), ('REGISTRATION_POLICY_OVERRIDE', 'Registration Policy Override'), ('LANGUAGE_LEVEL_SKIP', 'Language Level Skip'), ('LANGUAGE_PROMOTION_OVERRIDE', 'Language Promotion Override')], help_text='Type of override action performed', max_length=50, verbose_name='Action Type')),
                ('object_id', models.PositiveIntegerField(help_text='ID of the specific object that was affected', verbose_name='Object ID')),
                ('target_app', models.CharField(blank=True, help_text='DEPRECATED: Use content_type instead', max_length=50, null=True, verbose_name='Target App')),
                ('target_model', models.CharField(blank=True, help_text='DEPRECATED: Use content_type instead', max_length=50, null=True, verbose_name='Target Model')),
                ('target_object_id', models.CharField(blank=True, help_text='DEPRECATED: Use object_id instead', max_length=100, null=True, verbose_name='Target Object ID')),
                ('override_reason', models.TextField(help_text='Detailed reason for the override action', verbose_name='Override Reason')),
                ('original_restriction', models.TextField(help_text='Description of the rule/restriction that was overridden', verbose_name='Original Restriction')),
                ('override_details', models.JSONField(blank=True, default=dict, help_text='Additional details about the override in JSON format', verbose_name='Override Details')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the user who performed the override', null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, help_text='Browser/client information for the override action', verbose_name='User Agent')),
                ('content_type', models.ForeignKey(help_text='Type of the target object', on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype', verbose_name='Content Type')),
                ('performed_by', models.ForeignKey(help_text='User who performed the override action', on_delete=django.db.models.deletion.PROTECT, related_name='performed_overrides', to=settings.AUTH_USER_MODEL, verbose_name='Performed By')),
            ],
            options={
                'verbose_name': 'System Audit Log',
                'verbose_name_plural': 'System Audit Logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['action_type', 'created_at'], name='common_syst_action__c6d502_idx'), models.Index(fields=['performed_by', 'created_at'], name='common_syst_perform_09d551_idx'), models.Index(fields=['content_type', 'object_id'], name='common_syst_content_7b22cf_idx'), models.Index(fields=['created_at'], name='common_syst_created_f4790a_idx')],
            },
        ),
    ]
