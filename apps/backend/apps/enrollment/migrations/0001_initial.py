# Generated by Django 5.2.5 on 2025-08-28 12:49

import django.core.validators
import django.db.models.manager
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicJourney',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('program_type', models.CharField(choices=[('LANGUAGE', 'Language Program'), ('BA', "Bachelor's Degree"), ('MA', "Master's Degree"), ('PHD', 'Doctoral Degree'), ('CERT', 'Certificate Program')], db_index=True, help_text='Type of program for this period', max_length=20, verbose_name='Program Type')),
                ('start_date', models.DateField(blank=True, db_index=True, help_text='Date when this program period started', null=True, verbose_name='Start Date')),
                ('stop_date', models.DateField(blank=True, help_text='Date when this program period ended', null=True, verbose_name='Stop Date')),
                ('term_code', models.CharField(help_text='Term code when the change took place', max_length=20, verbose_name='Term Code')),
                ('duration_in_terms', models.PositiveIntegerField(default=0, help_text='Number of terms in this program period', verbose_name='Duration in Terms')),
                ('transition_status', models.CharField(choices=[('ACTIVE', 'Currently Active'), ('GRADUATED', 'Graduated'), ('CHANGED_PROGRAM', 'Changed Program/Major'), ('DROPPED_OUT', 'Dropped Out'), ('SUSPENDED', 'Suspended'), ('TRANSFERRED', 'Transferred Out'), ('COMPLETED_LEVEL', 'Completed Language Level'), ('UNKNOWN', 'Unknown Status')], db_index=True, default='ACTIVE', help_text='Status indicating how this program period ended', max_length=20, verbose_name='Transition Status')),
                ('data_source', models.CharField(choices=[('LEGACY', 'Imported from Legacy System'), ('MANUAL', 'Manually Entered'), ('SYSTEM', 'System Generated'), ('MIXED', 'Multiple Sources')], default='SYSTEM', help_text='Primary source of journey data', max_length=20, verbose_name='Data Source')),
                ('confidence_score', models.DecimalField(decimal_places=2, default=Decimal('1.00'), help_text='Overall confidence in journey data (0.0-1.0)', max_digits=3, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))], verbose_name='Confidence Score')),
                ('data_issues', models.JSONField(blank=True, default=list, help_text='List of identified data quality issues', verbose_name='Data Issues')),
                ('requires_review', models.BooleanField(db_index=True, default=False, help_text='Whether this journey needs manual review', verbose_name='Requires Review')),
                ('last_manual_review', models.DateTimeField(blank=True, help_text='When this journey was last manually reviewed', null=True, verbose_name='Last Manual Review')),
                ('notes', models.TextField(blank=True, help_text='Administrative notes about this journey', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Academic Journey',
                'verbose_name_plural': 'Academic Journeys',
                'ordering': ['student', 'start_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
    ]
