# Generated by Django 5.2.5 on 2025-08-28 12:49

import datetime
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('curriculum', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DiscountRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('rule_name', models.CharField(max_length=100, unique=True, verbose_name='Rule Name')),
                ('rule_type', models.CharField(choices=[('EARLY_BIRD', 'Early Bird Discount'), ('CASH_PLAN', 'Cash Payment Plan'), ('WEEKEND', 'Weekend Class Discount'), ('MONK', 'Monk Special Pricing'), ('ADMIN_FEE', 'Administrative Fee'), ('CUSTOM', 'Custom Rule')], max_length=20, verbose_name='Rule Type')),
                ('pattern_text', models.CharField(help_text='Text pattern that triggers this rule (from Notes field)', max_length=200, verbose_name='Pattern Text')),
                ('discount_percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage discount (if applicable)', max_digits=5, null=True, verbose_name='Discount Percentage')),
                ('fixed_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed fee/discount amount', max_digits=10, null=True, verbose_name='Fixed Amount')),
                ('applies_to_cycle', models.CharField(blank=True, choices=[('HS', 'High School (EHSS)'), ('CERT', 'Certificate Program'), ('PREP', 'Preparatory (IEAP/Foundation)'), ('BA', "Bachelor's Degree"), ('MA', "Master's Degree"), ('PHD', 'Doctoral Degree')], help_text='Academic cycle this rule applies to (empty = all cycles)', max_length=10, verbose_name='Applies to Cycle')),
                ('applies_to_terms', models.JSONField(blank=True, default=list, help_text='List of terms this rule applies to (empty = all terms)', verbose_name='Applies to Terms')),
                ('applies_to_programs', models.JSONField(blank=True, default=list, help_text='List of program codes this rule applies to (empty = all programs)', verbose_name='Applies to Programs')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('effective_date', models.DateField(default=datetime.date.today, verbose_name='Effective Date')),
                ('times_applied', models.PositiveIntegerField(default=0, verbose_name='Times Applied')),
                ('last_applied_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Applied Date')),
            ],
            options={
                'verbose_name': 'Discount Rule',
                'verbose_name_plural': 'Discount Rules',
                'db_table': 'finance_discount_rule',
            },
        ),
        migrations.CreateModel(
            name='DocumentExcessFee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('units_charged', models.PositiveIntegerField(help_text='Number of excess units charged', verbose_name='Units Charged')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per excess unit', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Unit Price')),
            ],
            options={
                'verbose_name': 'Document Excess Fee',
                'verbose_name_plural': 'Document Excess Fees',
                'db_table': 'finance_document_excess_fee',
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='FeeGLMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('fee_type', models.CharField(choices=[('REGISTRATION', 'Registration Fee'), ('APPLICATION', 'Application Fee'), ('LATE_PAYMENT', 'Late Payment Fee'), ('MATERIAL', 'Material Fee'), ('TECHNOLOGY', 'Technology Fee'), ('LIBRARY', 'Library Fee'), ('STUDENT_SERVICES', 'Student Services Fee'), ('GRADUATION', 'Graduation Fee'), ('DOCUMENT', 'Document Fee'), ('ID_CARD', 'ID Card Fee'), ('PARKING', 'Parking Fee'), ('OTHER', 'Other Fee')], help_text='Type of fee this mapping applies to', max_length=20, verbose_name='Fee Type')),
                ('fee_code', models.CharField(help_text="Internal fee code (e.g., 'LT_PLACEMENT')", max_length=50, verbose_name='Fee Code')),
                ('effective_date', models.DateField(default=datetime.date.today, help_text='Date this mapping becomes effective', verbose_name='Effective Date')),
                ('end_date', models.DateField(blank=True, help_text='Date this mapping expires (null = indefinite)', null=True, verbose_name='End Date')),
            ],
            options={
                'verbose_name': 'Fee G/L Mapping',
                'verbose_name_plural': 'Fee G/L Mappings',
                'db_table': 'finance_fee_gl_mapping',
                'ordering': ['fee_code', '-effective_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='FeePricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text='Name of the fee', max_length=100, verbose_name='Fee Name')),
                ('fee_type', models.CharField(choices=[('REGISTRATION', 'Registration Fee'), ('APPLICATION', 'Application Fee'), ('LATE_PAYMENT', 'Late Payment Fee'), ('MATERIAL', 'Material Fee'), ('TECHNOLOGY', 'Technology Fee'), ('LIBRARY', 'Library Fee'), ('STUDENT_SERVICES', 'Student Services Fee'), ('GRADUATION', 'Graduation Fee'), ('DOCUMENT', 'Document Fee'), ('ID_CARD', 'ID Card Fee'), ('PARKING', 'Parking Fee'), ('OTHER', 'Other Fee')], help_text='Category of this fee', max_length=20, verbose_name='Fee Type')),
                ('local_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fee amount for local students', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Local Amount')),
                ('foreign_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fee amount for foreign students', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Foreign Amount')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar')], default='USD', help_text='Fee currency', max_length=3, verbose_name='Currency')),
                ('effective_date', models.DateField(default=datetime.date.today, help_text='When this fee pricing becomes effective', verbose_name='Effective Date')),
                ('end_date', models.DateField(blank=True, help_text='When this fee pricing expires (null = current)', null=True, verbose_name='End Date')),
                ('description', models.TextField(blank=True, help_text='Detailed description of what this fee covers', verbose_name='Description')),
                ('is_mandatory', models.BooleanField(default=True, help_text='If true: automatically charged to all applicable students. If false: optional/on-request fee.', verbose_name='Is Mandatory')),
                ('is_per_course', models.BooleanField(default=False, help_text='Charged once for EACH course enrollment (e.g., $10 per course for material fee)', verbose_name='Is Per Course')),
                ('is_per_term', models.BooleanField(default=False, help_text='Charged once per term regardless of course count (e.g., $50 registration fee per term)', verbose_name='Is Per Term')),
                ('is_per_document', models.BooleanField(default=False, help_text='Charged for each document requested (e.g., $5 per transcript, $10 per certificate)', verbose_name='Is Per Document')),
            ],
            options={
                'verbose_name': 'Fee Pricing',
                'verbose_name_plural': 'Fee Pricing',
                'db_table': 'finance_fee_pricing',
                'ordering': ['fee_type', 'name', '-effective_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='FinancialTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('transaction_id', models.CharField(help_text='Unique transaction identifier', max_length=50, unique=True, verbose_name='Transaction ID')),
                ('transaction_type', models.CharField(choices=[('INVOICE_CREATED', 'Invoice Created'), ('PAYMENT_RECEIVED', 'Payment Received'), ('PAYMENT_REFUNDED', 'Payment Refunded'), ('ADJUSTMENT', 'Manual Adjustment'), ('WRITEOFF', 'Bad Debt Write-off')], help_text='Type of financial transaction', max_length=20, verbose_name='Transaction Type')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Transaction amount (positive for charges, negative for credits)', max_digits=10, verbose_name='Amount')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('KHR', 'Cambodian Riel')], default='USD', help_text='Transaction currency', max_length=3, verbose_name='Currency')),
                ('transaction_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When transaction occurred', verbose_name='Transaction Date')),
                ('description', models.CharField(help_text='Description of the transaction', max_length=255, verbose_name='Description')),
                ('reference_data', models.JSONField(blank=True, default=dict, help_text='Additional reference data for this transaction', verbose_name='Reference Data')),
            ],
            options={
                'verbose_name': 'Financial Transaction',
                'verbose_name_plural': 'Financial Transactions',
                'db_table': 'finance_financialtransaction',
                'ordering': ['-transaction_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GLAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('account_code', models.CharField(help_text="Unique G/L account code (e.g., '4100-LT')", max_length=20, unique=True, verbose_name='Account Code')),
                ('account_name', models.CharField(help_text='Descriptive name for this account', max_length=100, verbose_name='Account Name')),
                ('account_type', models.CharField(choices=[('ASSET', 'Asset'), ('LIABILITY', 'Liability'), ('EQUITY', 'Equity'), ('REVENUE', 'Revenue'), ('EXPENSE', 'Expense')], help_text='Primary classification of this account', max_length=20, verbose_name='Account Type')),
                ('account_category', models.CharField(choices=[('CURRENT_ASSET', 'Current Asset'), ('FIXED_ASSET', 'Fixed Asset'), ('CURRENT_LIABILITY', 'Current Liability'), ('LONG_TERM_LIABILITY', 'Long-term Liability'), ('OPERATING_REVENUE', 'Operating Revenue'), ('NON_OPERATING_REVENUE', 'Non-operating Revenue'), ('OPERATING_EXPENSE', 'Operating Expense'), ('ADMINISTRATIVE_EXPENSE', 'Administrative Expense')], help_text='Detailed category for reporting purposes', max_length=30, verbose_name='Account Category')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this account is currently in use', verbose_name='Is Active')),
                ('requires_department', models.BooleanField(default=False, help_text='Whether transactions to this account require department codes', verbose_name='Requires Department')),
                ('description', models.TextField(blank=True, help_text="Detailed description of this account's purpose", verbose_name='Description')),
            ],
            options={
                'verbose_name': 'G/L Account',
                'verbose_name_plural': 'G/L Accounts',
                'db_table': 'finance_gl_account',
                'ordering': ['account_code'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GLBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('batch_number', models.CharField(help_text='Unique batch identifier', max_length=50, unique=True, verbose_name='Batch Number')),
                ('batch_date', models.DateField(default=datetime.date.today, help_text='Date this batch was created', verbose_name='Batch Date')),
                ('accounting_period', models.CharField(db_index=True, help_text='Accounting period for this batch (YYYY-MM)', max_length=7, verbose_name='Accounting Period')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('EXPORTED', 'Exported'), ('FAILED', 'Failed'), ('PARTIAL', 'Partially Exported')], default='PENDING', help_text='Current batch status', max_length=20, verbose_name='Status')),
                ('total_entries', models.PositiveIntegerField(default=0, help_text='Number of journal entries in this batch', verbose_name='Total Entries')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total debit amount in this batch', max_digits=14, verbose_name='Total Amount')),
                ('export_file', models.CharField(blank=True, help_text='Path to exported file', max_length=255, verbose_name='Export File')),
                ('exported_date', models.DateTimeField(blank=True, help_text='When this batch was exported', null=True, verbose_name='Exported Date')),
                ('error_message', models.TextField(blank=True, help_text='Error details if export failed', verbose_name='Error Message')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this batch', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'G/L Batch',
                'verbose_name_plural': 'G/L Batches',
                'db_table': 'finance_gl_batch',
                'ordering': ['-batch_date', '-batch_number'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('invoice_number', models.CharField(help_text='Unique invoice identifier', max_length=50, unique=True, verbose_name='Invoice Number')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent'), ('PAID', 'Paid'), ('PARTIALLY_PAID', 'Partially Paid'), ('OVERDUE', 'Overdue'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded')], default='DRAFT', help_text='Current invoice status', max_length=20, verbose_name='Status')),
                ('issue_date', models.DateField(default=datetime.date.today, help_text='Date invoice was issued', verbose_name='Issue Date')),
                ('due_date', models.DateField(help_text='Date payment is due', verbose_name='Due Date')),
                ('sent_date', models.DateTimeField(blank=True, help_text='When invoice was sent to student', null=True, verbose_name='Sent Date')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Subtotal before tax', max_digits=10, verbose_name='Subtotal')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total tax amount', max_digits=10, verbose_name='Tax Amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total invoice amount', max_digits=10, verbose_name='Total Amount')),
                ('paid_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount already paid', max_digits=10, verbose_name='Paid Amount')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('KHR', 'Cambodian Riel')], default='USD', help_text='Invoice currency', max_length=3, verbose_name='Currency')),
                ('version', models.PositiveIntegerField(default=1, help_text='Version number for optimistic locking', verbose_name='Version')),
                ('notes', models.TextField(blank=True, help_text='Additional notes for this invoice', verbose_name='Notes')),
                ('is_historical', models.BooleanField(default=False, help_text='True for invoices reconstructed from legacy data', verbose_name='Is Historical')),
                ('legacy_ipk', models.IntegerField(blank=True, help_text='Original IPK primary key - TRUE unique identifier', null=True, verbose_name='Legacy IPK')),
                ('legacy_receipt_number', models.CharField(blank=True, help_text='Original receipt number from legacy system (display only)', max_length=50, verbose_name='Legacy Receipt Number')),
                ('legacy_receipt_id', models.CharField(blank=True, help_text='Full receipt ID with clerk information from legacy system', max_length=200, null=True, verbose_name='Legacy Receipt ID')),
                ('legacy_notes', models.TextField(blank=True, help_text='Original notes from legacy receipt', verbose_name='Legacy Notes')),
                ('legacy_processing_clerk', models.CharField(blank=True, help_text='Clerk who processed the original receipt', max_length=100, verbose_name='Legacy Processing Clerk')),
                ('original_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Original amount from legacy receipt before discounts', max_digits=10, null=True, verbose_name='Original Amount')),
                ('discount_applied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount applied from legacy receipt', max_digits=10, verbose_name='Discount Applied')),
                ('reconstruction_status', models.CharField(blank=True, help_text='Status of A/R reconstruction process', max_length=20, verbose_name='Reconstruction Status')),
                ('needs_reprocessing', models.BooleanField(default=False, help_text='True if invoice needs reprocessing due to new data', verbose_name='Needs Reprocessing')),
                ('reprocessing_reason', models.TextField(blank=True, help_text='Why this invoice needs reprocessing', verbose_name='Reprocessing Reason')),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
                'db_table': 'finance_invoice',
                'ordering': ['-issue_date', 'invoice_number'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='InvoiceLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('line_item_type', models.CharField(choices=[('COURSE', 'Course Enrollment'), ('FEE', 'Fee'), ('ADJUSTMENT', 'Adjustment'), ('REFUND', 'Refund'), ('ADMIN_FEE', 'Administrative Fee'), ('DOC_EXCESS', 'Document Excess Fee')], help_text='Type of charge', max_length=20, verbose_name='Line Item Type')),
                ('description', models.CharField(help_text='Description of this charge', max_length=255, verbose_name='Description')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Unit Price')),
                ('quantity', models.DecimalField(decimal_places=2, default=Decimal('1.00'), help_text='Quantity being charged', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='Quantity')),
                ('line_total', models.DecimalField(decimal_places=2, help_text='Total for this line (unit_price x quantity)', max_digits=10, verbose_name='Line Total')),
                ('legacy_program_code', models.CharField(blank=True, help_text='Program code from legacy receipt', max_length=50, verbose_name='Legacy Program Code')),
                ('legacy_course_level', models.CharField(blank=True, help_text='Course level from legacy receipt', max_length=50, verbose_name='Legacy Course Level')),
                ('pricing_method_used', models.CharField(blank=True, help_text='Method used to determine pricing', max_length=50, verbose_name='Pricing Method Used')),
                ('pricing_confidence', models.CharField(blank=True, help_text='Confidence level of pricing reconstruction', max_length=20, verbose_name='Pricing Confidence')),
                ('base_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Base amount before discounts', max_digits=10, null=True, verbose_name='Base Amount')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount applied to this line item', max_digits=10, verbose_name='Discount Amount')),
                ('discount_reason', models.TextField(blank=True, help_text='Reason for discount from legacy notes', verbose_name='Discount Reason')),
            ],
            options={
                'verbose_name': 'Invoice Line Item',
                'verbose_name_plural': 'Invoice Line Items',
                'db_table': 'finance_invoice_line_item',
                'ordering': ['invoice', 'id'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='JournalEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('entry_number', models.CharField(help_text="Unique journal entry number (e.g., 'JE-2025-01-001')", max_length=50, unique=True, verbose_name='Entry Number')),
                ('entry_date', models.DateField(help_text='Effective date of this journal entry', verbose_name='Entry Date')),
                ('accounting_period', models.CharField(db_index=True, help_text='Accounting period (YYYY-MM format)', max_length=7, verbose_name='Accounting Period')),
                ('entry_type', models.CharField(choices=[('REVENUE', 'Revenue Receipt'), ('PAYMENT', 'Payment Receipt'), ('REFUND', 'Refund Issued'), ('ADJUSTMENT', 'Adjustment Entry'), ('TRANSFER', 'Transfer Entry'), ('REVERSAL', 'Reversal Entry'), ('CLOSING', 'Closing Entry')], help_text='Type of journal entry', max_length=20, verbose_name='Entry Type')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING_REVIEW', 'Pending Review'), ('APPROVED', 'Approved'), ('POSTED', 'Posted to G/L'), ('REVERSED', 'Reversed'), ('REJECTED', 'Rejected')], default='DRAFT', help_text='Current status of this entry', max_length=20, verbose_name='Status')),
                ('description', models.CharField(help_text='Brief description of this journal entry', max_length=200, verbose_name='Description')),
                ('reference_number', models.CharField(blank=True, help_text='External reference number if applicable', max_length=50, verbose_name='Reference Number')),
                ('total_debits', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Sum of all debit amounts', max_digits=12, verbose_name='Total Debits')),
                ('total_credits', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Sum of all credit amounts', max_digits=12, verbose_name='Total Credits')),
                ('approved_date', models.DateTimeField(blank=True, help_text='When this entry was approved', null=True, verbose_name='Approved Date')),
                ('posted_date', models.DateTimeField(blank=True, help_text='When this entry was posted to G/L', null=True, verbose_name='Posted Date')),
                ('source_system', models.CharField(default='NAGA_SIS', help_text='System that generated this entry', max_length=50, verbose_name='Source System')),
                ('batch_id', models.CharField(blank=True, db_index=True, help_text='Batch identifier for grouped processing', max_length=50, verbose_name='Batch ID')),
                ('notes', models.TextField(blank=True, help_text='Additional notes or comments', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Journal Entry',
                'verbose_name_plural': 'Journal Entries',
                'db_table': 'finance_journal_entry',
                'ordering': ['-entry_date', '-entry_number'],
                'permissions': [('can_approve_journal_entries', 'Can approve journal entries'), ('can_post_journal_entries', 'Can post journal entries to G/L')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='JournalEntryLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('line_number', models.PositiveSmallIntegerField(help_text='Sequential line number within the entry', verbose_name='Line Number')),
                ('debit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Debit amount (increases assets/expenses)', max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Debit Amount')),
                ('credit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Credit amount (increases liabilities/revenue)', max_digits=12, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Credit Amount')),
                ('description', models.CharField(help_text='Description of this line item', max_length=200, verbose_name='Line Description')),
                ('reference_type', models.CharField(blank=True, help_text="Type of reference (e.g., 'INVOICE', 'PAYMENT')", max_length=50, verbose_name='Reference Type')),
                ('reference_id', models.CharField(blank=True, help_text='ID of referenced object', max_length=50, verbose_name='Reference ID')),
                ('department_code', models.CharField(blank=True, help_text='Department code for cost allocation', max_length=20, verbose_name='Department Code')),
                ('project_code', models.CharField(blank=True, help_text='Project code for tracking', max_length=20, verbose_name='Project Code')),
            ],
            options={
                'verbose_name': 'Journal Entry Line',
                'verbose_name_plural': 'Journal Entry Lines',
                'db_table': 'finance_journal_entry_line',
                'ordering': ['journal_entry', 'line_number'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='LegacyReceiptMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('legacy_ipk', models.IntegerField(blank=True, help_text='Original IPK primary key from receipt_headers - TRUE unique identifier', null=True, verbose_name='Legacy IPK')),
                ('legacy_receipt_number', models.CharField(help_text='Original ReceiptNo from receipt_headers (display only)', max_length=20, verbose_name='Legacy Receipt Number')),
                ('legacy_receipt_id', models.CharField(help_text='Full ReceiptID with clerk information', max_length=200, verbose_name='Legacy Receipt ID')),
                ('legacy_student_id', models.CharField(help_text='ID field from receipt_headers (5-digit student number)', max_length=10, verbose_name='Legacy Student ID')),
                ('legacy_term_id', models.CharField(help_text='TermID from receipt_headers', max_length=50, verbose_name='Legacy Term ID')),
                ('legacy_amount', models.DecimalField(decimal_places=2, help_text='Original Amount from receipt_headers', max_digits=10, verbose_name='Legacy Amount')),
                ('legacy_net_amount', models.DecimalField(decimal_places=2, help_text='NetAmount from receipt_headers', max_digits=10, verbose_name='Legacy Net Amount')),
                ('legacy_discount', models.DecimalField(decimal_places=2, help_text='NetDiscount from receipt_headers', max_digits=10, verbose_name='Legacy Discount')),
                ('reconstructed_total', models.DecimalField(decimal_places=2, help_text='Total amount in reconstructed invoice', max_digits=10, verbose_name='Reconstructed Total')),
                ('variance_amount', models.DecimalField(decimal_places=2, help_text='Difference between legacy and reconstructed amounts', max_digits=10, verbose_name='Variance Amount')),
                ('processing_date', models.DateTimeField(auto_now_add=True, verbose_name='Processing Date')),
                ('validation_status', models.CharField(choices=[('VALIDATED', 'Validated'), ('PENDING', 'Pending Review'), ('APPROVED', 'Manually Approved'), ('REJECTED', 'Rejected - Needs Reprocessing')], default='PENDING', max_length=20, verbose_name='Validation Status')),
                ('validation_notes', models.TextField(blank=True, help_text='Manual validation notes', verbose_name='Validation Notes')),
                ('legacy_notes', models.TextField(blank=True, default='', help_text='Original notes from legacy receipt', verbose_name='Legacy Notes')),
                ('parsed_note_type', models.CharField(blank=True, default='', help_text='Type of note as parsed by processing system', max_length=50, verbose_name='Parsed Note Type')),
                ('parsed_amount_adjustment', models.DecimalField(blank=True, decimal_places=2, help_text='Amount adjustment parsed from notes', max_digits=10, null=True, verbose_name='Parsed Amount Adjustment')),
                ('parsed_percentage_adjustment', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage adjustment parsed from notes', max_digits=5, null=True, verbose_name='Parsed Percentage Adjustment')),
                ('parsed_authority', models.CharField(blank=True, help_text='Authority/approver parsed from notes', max_length=100, null=True, verbose_name='Parsed Authority')),
                ('parsed_reason', models.CharField(blank=True, help_text='Reason parsed from notes', max_length=200, null=True, verbose_name='Parsed Reason')),
                ('ar_transaction_mapping', models.CharField(blank=True, default='', help_text='How this maps to A/R transaction types', max_length=100, verbose_name='A/R Transaction Mapping')),
                ('normalized_note', models.TextField(blank=True, default='', help_text='Normalized note string for database storage', verbose_name='Normalized Note')),
                ('notes_processing_confidence', models.DecimalField(decimal_places=2, default=0.0, help_text='Confidence score from notes processing', max_digits=3, verbose_name='Notes Processing Confidence')),
            ],
            options={
                'verbose_name': 'Legacy Receipt Mapping',
                'verbose_name_plural': 'Legacy Receipt Mappings',
                'db_table': 'finance_legacy_receipt_mapping',
            },
        ),
        migrations.CreateModel(
            name='MaterialityThreshold',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('context', models.CharField(choices=[('INDIVIDUAL', 'Individual Payment'), ('STUDENT', 'Student Account Total'), ('BATCH', 'Batch Total'), ('PERIOD', 'Period Aggregate'), ('ERROR_CAT', 'Error Category Total')], max_length=20, unique=True, verbose_name='Context')),
                ('absolute_threshold', models.DecimalField(decimal_places=2, help_text='Absolute dollar amount threshold', max_digits=10, verbose_name='Absolute Threshold')),
                ('percentage_threshold', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage threshold (if applicable)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Percentage Threshold')),
                ('effective_date', models.DateField(default=datetime.date.today, verbose_name='Effective Date')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Materiality Threshold',
                'verbose_name_plural': 'Materiality Thresholds',
                'db_table': 'finance_materiality_threshold',
                'ordering': ['context', '-effective_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('payment_reference', models.CharField(help_text='Unique payment reference number', max_length=50, unique=True, verbose_name='Payment Reference')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount (negative for refunds)', max_digits=10, verbose_name='Amount')),
                ('currency', models.CharField(choices=[('USD', 'US Dollar'), ('KHR', 'Cambodian Riel')], default='USD', help_text='Payment currency', max_length=3, verbose_name='Currency')),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CREDIT_CARD', 'Credit Card'), ('BANK_TRANSFER', 'Bank Transfer'), ('CHECK', 'Check'), ('ONLINE', 'Online Payment'), ('SCHOLARSHIP', 'Scholarship'), ('OTHER', 'Other')], help_text='How payment was made', max_length=20, verbose_name='Payment Method')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded')], default='PENDING', help_text='Current payment status', max_length=20, verbose_name='Status')),
                ('payment_date', models.DateTimeField(help_text='When payment was made', verbose_name='Payment Date')),
                ('processed_date', models.DateTimeField(blank=True, help_text='When payment was processed', null=True, verbose_name='Processed Date')),
                ('payer_name', models.CharField(blank=True, help_text='Name of person making payment', max_length=255, verbose_name='Payer Name')),
                ('external_reference', models.CharField(blank=True, help_text='External system reference (bank ref, transaction ID, etc.)', max_length=100, verbose_name='External Reference')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this payment', verbose_name='Notes')),
                ('is_historical_payment', models.BooleanField(default=False, help_text='True for payments reconstructed from legacy data', verbose_name='Is Historical Payment')),
                ('legacy_ipk', models.IntegerField(blank=True, help_text='Original IPK primary key - TRUE unique identifier', null=True, verbose_name='Legacy IPK')),
                ('legacy_receipt_reference', models.CharField(blank=True, help_text='Original receipt reference from legacy system (display only)', max_length=50, verbose_name='Legacy Receipt Reference')),
                ('legacy_processing_clerk', models.CharField(blank=True, help_text='Clerk who processed the original receipt', max_length=100, verbose_name='Legacy Processing Clerk')),
                ('legacy_business_notes', models.TextField(blank=True, help_text='Original business notes from legacy receipt', verbose_name='Legacy Business Notes')),
                ('legacy_receipt_full_id', models.CharField(blank=True, help_text='Full receipt ID from legacy system', max_length=200, verbose_name='Legacy Receipt Full ID')),
                ('legacy_program_code', models.CharField(blank=True, help_text='Program code from legacy receipt', max_length=50, verbose_name='Legacy Program Code')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'db_table': 'finance_payment',
                'ordering': ['-payment_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PaymentConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text='Display name for this payment method', max_length=100, verbose_name='Method Name')),
                ('method_type', models.CharField(choices=[('cash', 'Cash'), ('bank_transfer', 'Bank Transfer'), ('credit_card', 'Credit Card'), ('mobile_payment', 'Mobile Payment'), ('scholarship', 'Scholarship'), ('installment', 'Installment Plan')], help_text='Type of payment method', max_length=20, verbose_name='Method Type')),
                ('description', models.TextField(blank=True, help_text='Detailed description or instructions', verbose_name='Description')),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this method is currently available', verbose_name='Is Enabled')),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether payments require manual approval', verbose_name='Requires Approval')),
                ('processing_fee_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Processing fee as percentage of payment amount', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Processing Fee Percentage')),
                ('processing_fee_fixed', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Fixed processing fee amount', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Processing Fee Fixed')),
                ('configuration', models.JSONField(blank=True, default=dict, help_text='Method-specific configuration options', verbose_name='Configuration')),
                ('display_order', models.PositiveIntegerField(default=0, help_text='Order for displaying methods', verbose_name='Display Order')),
            ],
            options={
                'verbose_name': 'Payment Configuration',
                'verbose_name_plural': 'Payment Configurations',
                'ordering': ['display_order', 'name'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ReadingClassPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('effective_date', models.DateField(default=datetime.date.today, help_text='When this pricing becomes effective', verbose_name='Effective Date')),
                ('end_date', models.DateField(blank=True, help_text='When this pricing expires (null = current)', null=True, verbose_name='End Date')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this pricing', verbose_name='Notes')),
                ('tier', models.CharField(choices=[('1-2', '1-2 Students (Tutorial)'), ('3-5', '3-5 Students (Small Class)'), ('6-15', '6-15 Students (Medium Class)')], help_text='Class enrollment size tier', max_length=10, verbose_name='Class Size Tier')),
                ('domestic_price', models.DecimalField(decimal_places=2, default=0, help_text='Price per student for domestic students', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Domestic Price')),
                ('foreign_price', models.DecimalField(decimal_places=2, default=0, help_text='Price per student for international students', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Foreign Price')),
            ],
            options={
                'verbose_name': 'Reading Class Pricing',
                'verbose_name_plural': 'Reading Class Pricing',
                'db_table': 'finance_reading_class_pricing',
                'ordering': ['cycle', 'tier', '-effective_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ReconciliationAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('adjustment_type', models.CharField(choices=[('PRICING', 'Pricing Variance'), ('MISSING_ENR', 'Missing Enrollment'), ('MISSING_PAY', 'Missing Payment'), ('DUPLICATE', 'Duplicate Payment'), ('CURRENCY', 'Currency Difference'), ('CLERICAL', 'Clerical Error'), ('DISCOUNT', 'Discount Applied'), ('FEE_ADJ', 'Fee Adjustment'), ('TIMING', 'Timing Difference'), ('SCHOLARSHIP_VAR', 'Scholarship Application Variance'), ('SCHOLARSHIP_OVER', 'Scholarship Over-Applied'), ('SCHOLARSHIP_UNDER', 'Scholarship Under-Applied'), ('MISSING_SCHOLARSHIP', 'Missing Scholarship Record')], max_length=20, verbose_name='Adjustment Type')),
                ('description', models.CharField(max_length=200, verbose_name='Description')),
                ('original_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Original Amount')),
                ('adjusted_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Adjusted Amount')),
                ('variance', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Variance')),
                ('requires_approval', models.BooleanField(default=False, help_text='True if variance exceeds materiality threshold', verbose_name='Requires Approval')),
                ('approved_date', models.DateTimeField(blank=True, null=True, verbose_name='Approved Date')),
            ],
            options={
                'verbose_name': 'Reconciliation Adjustment',
                'verbose_name_plural': 'Reconciliation Adjustments',
                'db_table': 'finance_reconciliation_adjustment',
                'ordering': ['-created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ReconciliationBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('batch_id', models.CharField(max_length=50, unique=True, verbose_name='Batch ID')),
                ('batch_type', models.CharField(choices=[('INITIAL', 'Initial Reconciliation'), ('REFINEMENT', 'Refinement Pass'), ('MANUAL', 'Manual Review'), ('SCHEDULED', 'Scheduled Run')], default='SCHEDULED', max_length=20, verbose_name='Batch Type')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('PARTIAL', 'Partially Completed')], default='PENDING', max_length=20, verbose_name='Status')),
                ('total_payments', models.PositiveIntegerField(default=0, verbose_name='Total Payments')),
                ('processed_payments', models.PositiveIntegerField(default=0, verbose_name='Processed Payments')),
                ('successful_matches', models.PositiveIntegerField(default=0, verbose_name='Successful Matches')),
                ('failed_matches', models.PositiveIntegerField(default=0, verbose_name='Failed Matches')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Started At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('parameters', models.JSONField(default=dict, help_text='Batch processing parameters', verbose_name='Parameters')),
                ('results_summary', models.JSONField(default=dict, verbose_name='Results Summary')),
                ('error_log', models.TextField(blank=True, verbose_name='Error Log')),
            ],
            options={
                'verbose_name': 'Reconciliation Batch',
                'verbose_name_plural': 'Reconciliation Batches',
                'db_table': 'finance_reconciliation_batch',
                'ordering': ['-created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ReconciliationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('rule_name', models.CharField(default='Default Rule', max_length=100, unique=True, verbose_name='Rule Name')),
                ('rule_type', models.CharField(choices=[('AMOUNT_TOL', 'Amount Tolerance'), ('DATE_RANGE', 'Date Range Matching'), ('PATTERN', 'Pattern Matching'), ('HISTORY', 'Student History'), ('COURSE_COMBO', 'Course Combination')], max_length=20, verbose_name='Rule Type')),
                ('description', models.TextField(help_text='Detailed description of what this rule does', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('priority', models.PositiveSmallIntegerField(default=100, help_text='Lower numbers = higher priority', verbose_name='Priority')),
                ('confidence_threshold', models.DecimalField(decimal_places=2, default=80.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Confidence Threshold')),
                ('parameters', models.JSONField(default=dict, help_text='Rule-specific parameters', verbose_name='Parameters')),
                ('times_applied', models.PositiveIntegerField(default=0, verbose_name='Times Applied')),
                ('success_count', models.PositiveIntegerField(default=0, verbose_name='Success Count')),
                ('last_applied', models.DateTimeField(blank=True, null=True, verbose_name='Last Applied')),
            ],
            options={
                'verbose_name': 'Reconciliation Rule',
                'verbose_name_plural': 'Reconciliation Rules',
                'db_table': 'finance_reconciliation_rule',
                'ordering': ['priority', 'rule_name'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ReconciliationStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('status', models.CharField(choices=[('FULLY_RECONCILED', 'Fully Reconciled'), ('AUTO_ALLOCATED', 'Auto-Allocated'), ('SCHOLARSHIP_VERIFIED', 'Scholarship Verified'), ('PENDING_REVIEW', 'Pending Review'), ('EXCEPTION_ERROR', 'Exception/Error'), ('UNMATCHED', 'Unmatched')], default='UNMATCHED', max_length=20, verbose_name='Status')),
                ('confidence_level', models.CharField(choices=[('HIGH', 'High (95%+)'), ('MEDIUM', 'Medium (80-94%)'), ('LOW', 'Low (<80%)'), ('NONE', 'No Confidence')], default='NONE', max_length=10, verbose_name='Confidence Level')),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, help_text='Numeric confidence score (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Confidence Score')),
                ('pricing_method_applied', models.CharField(blank=True, choices=[('DEFAULT', 'Default Pricing'), ('FIXED', 'Course Fixed Pricing'), ('SENIOR', 'Senior Project Pricing'), ('READING', 'Reading Class Pricing'), ('HISTORICAL', 'Historical Pattern Match'), ('SCHOLARSHIP', 'Scholarship Verification'), ('MANUAL', 'Manual Override'), ('HYBRID', 'Hybrid/Multiple Methods')], max_length=20, null=True, verbose_name='Pricing Method Applied')),
                ('variance_amount', models.DecimalField(decimal_places=2, default=0, help_text='Difference between expected and actual', max_digits=10, verbose_name='Variance Amount')),
                ('variance_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Variance Percentage')),
                ('refinement_attempts', models.PositiveIntegerField(default=0, help_text='Number of times refinement has been attempted', verbose_name='Refinement Attempts')),
                ('last_attempt_date', models.DateTimeField(blank=True, null=True, verbose_name='Last Attempt Date')),
                ('confidence_history', models.JSONField(default=list, help_text='Track confidence evolution over refinement attempts', verbose_name='Confidence History')),
                ('refinement_strategies_tried', models.JSONField(default=list, help_text='List of refinement strategies that have been attempted', verbose_name='Strategies Tried')),
                ('reconciled_date', models.DateTimeField(blank=True, null=True, verbose_name='Reconciled Date')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('error_category', models.CharField(blank=True, max_length=50, verbose_name='Error Category')),
                ('error_details', models.JSONField(default=dict, verbose_name='Error Details')),
            ],
            options={
                'verbose_name': 'Reconciliation Status',
                'verbose_name_plural': 'Reconciliation Statuses',
                'db_table': 'finance_reconciliation_status',
                'ordering': ['-created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ReconstructionScholarshipEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('scholarship_type', models.CharField(choices=[('SCHOOL', 'School-Granted Scholarship'), ('STAFF', 'Staff Scholarship'), ('NGO', 'NGO Scholarship'), ('OTHER', 'Other Scholarship')], max_length=20, verbose_name='Scholarship Type')),
                ('scholarship_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Scholarship Amount')),
                ('scholarship_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Scholarship Percentage')),
                ('discovered_from_receipt', models.CharField(help_text='Receipt number where scholarship was discovered', max_length=20, verbose_name='Discovered from Receipt')),
                ('discovery_notes', models.TextField(help_text='How/why this scholarship was identified', verbose_name='Discovery Notes')),
                ('requires_reprocessing', models.BooleanField(default=True, help_text='True if student needs reprocessing with this scholarship', verbose_name='Requires Reprocessing')),
                ('applied_to_reconstruction', models.BooleanField(default=False, help_text='True if already applied in reconstruction', verbose_name='Applied to Reconstruction')),
            ],
            options={
                'verbose_name': 'Reconstruction Scholarship Entry',
                'verbose_name_plural': 'Reconstruction Scholarship Entries',
                'db_table': 'finance_reconstruction_scholarship_entry',
            },
        ),
        migrations.CreateModel(
            name='SeniorProjectCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('project_code', models.CharField(blank=True, help_text='Project identification code (e.g., BUS-489, IR-489, FIN-489, THM-433)', max_length=20, null=True, verbose_name='Project Code')),
                ('major_name', models.CharField(blank=True, help_text='Name of the major this project serves (e.g., Business Administration, International Relations)', max_length=100, null=True, verbose_name='Major Name')),
                ('allows_groups', models.BooleanField(default=True, help_text='Whether this project type allows group work (TESOL is individual only)', verbose_name='Allows Groups')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this course uses senior project pricing', verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Senior Project Course',
                'verbose_name_plural': 'Senior Project Courses',
                'db_table': 'finance_senior_project_course',
                'ordering': ['course__code'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SeniorProjectPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('effective_date', models.DateField(default=datetime.date.today, help_text='When this pricing becomes effective', verbose_name='Effective Date')),
                ('end_date', models.DateField(blank=True, help_text='When this pricing expires (null = current)', null=True, verbose_name='End Date')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this pricing', verbose_name='Notes')),
                ('tier', models.CharField(choices=[('1', '1 Student'), ('2', '2 Students'), ('3-4', '3-4 Students'), ('5', '5 Students')], help_text='Student group size tier', max_length=10, verbose_name='Group Size Tier')),
                ('individual_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price each student pays individually (NOT split among group)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Individual Price')),
                ('foreign_individual_price', models.DecimalField(blank=True, decimal_places=2, help_text='Price each foreign student pays individually (NOT split among group)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Foreign Individual Price')),
                ('advisor_payment', models.DecimalField(decimal_places=2, help_text='Payment to project advisor', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Advisor Payment')),
                ('committee_payment', models.DecimalField(decimal_places=2, help_text='Payment to each committee member', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Committee Payment')),
            ],
            options={
                'verbose_name': 'Senior Project Pricing',
                'verbose_name_plural': 'Senior Project Pricing',
                'db_table': 'finance_senior_project_pricing',
                'ordering': ['tier', '-effective_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='AdministrativeFeeConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('cycle_type', models.CharField(choices=[('NEW', 'New Student'), ('L2B', 'Language to Bachelor'), ('B2M', 'Bachelor to Master')], help_text='Type of cycle change this fee applies to', max_length=3, unique=True, verbose_name='Cycle Type')),
                ('fee_amount', models.DecimalField(decimal_places=2, help_text='Administrative fee amount per term', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Fee Amount')),
                ('included_document_units', models.PositiveIntegerField(default=10, help_text='Number of document units included with this fee', verbose_name='Included Document Units')),
                ('quota_validity_days', models.PositiveIntegerField(default=120, help_text='Number of days the document quota is valid', verbose_name='Quota Validity Days')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this fee configuration is currently active', verbose_name='Is Active')),
                ('effective_date', models.DateField(help_text='Date when this configuration becomes effective', verbose_name='Effective Date')),
                ('end_date', models.DateField(blank=True, help_text='Date when this configuration expires (null = current)', null=True, verbose_name='End Date')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this fee configuration', verbose_name='Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Administrative Fee Configuration',
                'verbose_name_plural': 'Administrative Fee Configurations',
                'db_table': 'finance_administrative_fee_config',
                'ordering': ['cycle_type', '-effective_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ARReconstructionBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('batch_id', models.CharField(help_text='Unique batch identifier', max_length=50, unique=True, verbose_name='Batch ID')),
                ('term_id', models.CharField(blank=True, help_text='Academic term being processed (null for multi-term batches)', max_length=50, null=True, verbose_name='Term ID')),
                ('processing_mode', models.CharField(choices=[('SUPERVISED', 'Supervised Processing'), ('AUTOMATED', 'Automated Processing'), ('REPROCESSING', 'Reprocessing Run')], default='SUPERVISED', max_length=20, verbose_name='Processing Mode')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('PAUSED', 'Paused for Review'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20, verbose_name='Status')),
                ('total_receipts', models.PositiveIntegerField(default=0, help_text='Total receipt_headers records to process', verbose_name='Total Receipts')),
                ('processed_receipts', models.PositiveIntegerField(default=0, verbose_name='Processed Receipts')),
                ('successful_reconstructions', models.PositiveIntegerField(default=0, verbose_name='Successful Reconstructions')),
                ('failed_reconstructions', models.PositiveIntegerField(default=0, verbose_name='Failed Reconstructions')),
                ('pending_review_count', models.PositiveIntegerField(default=0, help_text='Records requiring manual review', verbose_name='Pending Review Count')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Started At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('processing_parameters', models.JSONField(default=dict, help_text='Batch configuration and parameters', verbose_name='Processing Parameters')),
                ('variance_summary', models.JSONField(default=dict, help_text='Summary of variances found', verbose_name='Variance Summary')),
                ('processing_log', models.TextField(blank=True, help_text='Detailed processing log', verbose_name='Processing Log')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'A/R Reconstruction Batch',
                'verbose_name_plural': 'A/R Reconstruction Batches',
                'db_table': 'finance_ar_reconstruction_batch',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CashierSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('session_number', models.CharField(blank=True, default='DEFAULT-001', help_text='Unique session identifier', max_length=50, null=True, unique=True, verbose_name='Session Number')),
                ('opened_at', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='When session was opened', null=True, verbose_name='Opened At')),
                ('closed_at', models.DateTimeField(blank=True, help_text='When session was closed', null=True, verbose_name='Closed At')),
                ('opening_balance', models.DecimalField(blank=True, decimal_places=2, default=Decimal('0.00'), help_text='Cash drawer opening balance', max_digits=10, null=True, verbose_name='Opening Balance')),
                ('closing_balance', models.DecimalField(blank=True, decimal_places=2, help_text='Cash drawer closing balance', max_digits=10, null=True, verbose_name='Closing Balance')),
                ('expected_balance', models.DecimalField(blank=True, decimal_places=2, help_text='Expected balance based on transactions', max_digits=10, null=True, verbose_name='Expected Balance')),
                ('is_active', models.BooleanField(blank=True, default=True, help_text='Whether this session is currently active', null=True, verbose_name='Is Active')),
                ('notes', models.TextField(blank=True, help_text='Session notes and observations', verbose_name='Notes')),
                ('cashier', models.ForeignKey(help_text='User operating the cashier session', on_delete=django.db.models.deletion.PROTECT, related_name='cashier_sessions', to=settings.AUTH_USER_MODEL, verbose_name='Cashier')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Cashier Session',
                'verbose_name_plural': 'Cashier Sessions',
                'db_table': 'finance_cashier_session',
                'ordering': ['-opened_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ClerkIdentification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('clerk_name', models.CharField(help_text='Extracted clerk name/identifier', max_length=100, verbose_name='Clerk Name')),
                ('computer_identifier', models.CharField(blank=True, help_text='Computer/terminal identifier from ReceiptID', max_length=100, verbose_name='Computer Identifier')),
                ('receipt_id_pattern', models.CharField(help_text='Example ReceiptID pattern for this clerk', max_length=200, verbose_name='Receipt ID Pattern')),
                ('extraction_confidence', models.CharField(choices=[('HIGH', 'High Confidence'), ('MEDIUM', 'Medium Confidence'), ('LOW', 'Low Confidence'), ('MANUAL', 'Manual Entry')], default='MEDIUM', max_length=10, verbose_name='Extraction Confidence')),
                ('first_seen_date', models.DateTimeField(help_text='First receipt date for this clerk', verbose_name='First Seen Date')),
                ('last_seen_date', models.DateTimeField(help_text='Most recent receipt date for this clerk', verbose_name='Last Seen Date')),
                ('receipt_count', models.PositiveIntegerField(default=0, help_text='Number of receipts processed by this clerk', verbose_name='Receipt Count')),
                ('verified_by_user', models.BooleanField(default=False, help_text='True if clerk identification verified manually', verbose_name='Verified by User')),
                ('verification_notes', models.TextField(blank=True, help_text='Manual verification notes', verbose_name='Verification Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Clerk Identification',
                'verbose_name_plural': 'Clerk Identifications',
                'db_table': 'finance_clerk_identification',
            },
        ),
        migrations.CreateModel(
            name='CourseFixedPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('effective_date', models.DateField(default=datetime.date.today, help_text='When this pricing becomes effective', verbose_name='Effective Date')),
                ('end_date', models.DateField(blank=True, help_text='When this pricing expires (null = current)', null=True, verbose_name='End Date')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this pricing', verbose_name='Notes')),
                ('domestic_price', models.DecimalField(decimal_places=2, help_text='Price for domestic students', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Domestic Price')),
                ('foreign_price', models.DecimalField(decimal_places=2, help_text='Price for international students', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Foreign Price')),
                ('course', models.ForeignKey(help_text='Course with fixed pricing', on_delete=django.db.models.deletion.CASCADE, related_name='fixed_pricing', to='curriculum.course', verbose_name='Course')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Course Fixed Pricing',
                'verbose_name_plural': 'Course Fixed Pricing',
                'db_table': 'finance_course_fixed_pricing',
                'ordering': ['course', '-effective_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DefaultPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('effective_date', models.DateField(default=datetime.date.today, help_text='When this pricing becomes effective', verbose_name='Effective Date')),
                ('end_date', models.DateField(blank=True, help_text='When this pricing expires (null = current)', null=True, verbose_name='End Date')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this pricing', verbose_name='Notes')),
                ('domestic_price', models.DecimalField(decimal_places=2, help_text='Price for domestic students', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Domestic Price')),
                ('foreign_price', models.DecimalField(decimal_places=2, help_text='Price for international students', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Foreign Price')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('cycle', models.ForeignKey(help_text='Academic cycle (BA/MA/LANG)', on_delete=django.db.models.deletion.PROTECT, related_name='default_pricing', to='curriculum.cycle', verbose_name='Cycle')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Default Pricing',
                'verbose_name_plural': 'Default Pricing',
                'db_table': 'finance_default_pricing',
                'ordering': ['cycle', '-effective_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='DiscountApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('original_amount', models.DecimalField(decimal_places=2, help_text='Amount before discount', max_digits=10, verbose_name='Original Amount')),
                ('discount_amount', models.DecimalField(decimal_places=2, help_text='Amount of discount applied', max_digits=10, verbose_name='Discount Amount')),
                ('final_amount', models.DecimalField(decimal_places=2, help_text='Amount after discount', max_digits=10, verbose_name='Final Amount')),
                ('applied_date', models.DateTimeField(auto_now_add=True, help_text='When the discount was applied', verbose_name='Applied Date')),
                ('payment_date', models.DateField(help_text='Date of payment (for early bird eligibility)', verbose_name='Payment Date')),
                ('authority', models.CharField(default='SYSTEM', help_text='Who authorized the discount (SYSTEM, MANUAL, etc.)', max_length=50, verbose_name='Authority')),
                ('approval_status', models.CharField(choices=[('APPROVED', 'Approved'), ('PENDING_APPROVAL', 'Pending Approval'), ('REJECTED', 'Rejected')], default='APPROVED', max_length=20, verbose_name='Approval Status')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this discount application', verbose_name='Notes')),
                ('legacy_receipt_ipk', models.IntegerField(blank=True, help_text='Link to legacy receipt if applied during reconstruction', null=True, verbose_name='Legacy Receipt IPK')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
            ],
            options={
                'verbose_name': 'Discount Application',
                'verbose_name_plural': 'Discount Applications',
                'db_table': 'finance_discount_application',
            },
        ),
    ]
