# Generated by Django 5.1.4 on 2025-01-01

from django.db import migrations, models
import django.db.models.deletion
from django.conf import settings
import uuid
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('finance', '0029_auto_20241227_1234'),  # Update this to match the latest migration
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Add PCI DSS compliant fields to existing Payment model
        migrations.AddField(
            model_name='payment',
            name='encrypted_card_data',
            field=models.TextField(
                verbose_name="Encrypted Card Data",
                null=True,
                blank=True,
                help_text="PCI DSS compliant encrypted payment card data",
            ),
        ),
        migrations.AddField(
            model_name='payment',
            name='card_token',
            field=models.CharField(
                verbose_name="Card Token",
                max_length=255,
                null=True,
                blank=True,
                help_text="Tokenized card reference for PCI compliance",
                db_index=True,
            ),
        ),
        migrations.AddField(
            model_name='payment',
            name='payment_processor',
            field=models.CharField(
                verbose_name="Payment Processor",
                max_length=50,
                choices=[
                    ('stripe', 'Stripe'),
                    ('paypal', 'PayPal'),
                    ('square', 'Square'),
                    ('manual', 'Manual'),
                    ('bank_transfer', 'Bank Transfer'),
                    ('cash', 'Cash'),
                ],
                null=True,
                blank=True,
                help_text="Payment processor used for transaction",
            ),
        ),
        migrations.AddField(
            model_name='payment',
            name='processor_transaction_id',
            field=models.CharField(
                verbose_name="Processor Transaction ID",
                max_length=255,
                null=True,
                blank=True,
                help_text="External payment processor transaction ID",
                db_index=True,
            ),
        ),
        migrations.AddField(
            model_name='payment',
            name='fraud_score',
            field=models.DecimalField(
                verbose_name="Fraud Risk Score",
                max_digits=5,
                decimal_places=2,
                null=True,
                blank=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(100.0),
                ],
                help_text="AI-generated fraud risk score (0-100)",
            ),
        ),
        migrations.AddField(
            model_name='payment',
            name='risk_flags',
            field=models.JSONField(
                verbose_name="Risk Flags",
                null=True,
                blank=True,
                help_text="Fraud detection flags and indicators",
            ),
        ),

        # Create Encrypted Transaction Log model
        migrations.CreateModel(
            name='EncryptedTransactionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('log_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Log ID')),
                ('transaction_type', models.CharField(
                    choices=[
                        ('payment', 'Payment'),
                        ('refund', 'Refund'),
                        ('transfer', 'Transfer'),
                        ('adjustment', 'Adjustment'),
                        ('fee', 'Fee'),
                    ],
                    max_length=20,
                    verbose_name='Transaction Type'
                )),
                ('encrypted_data', models.TextField(verbose_name='Encrypted Transaction Data')),
                ('data_hash', models.CharField(
                    max_length=64,
                    verbose_name='Data Integrity Hash',
                    help_text='SHA-256 hash for data integrity verification'
                )),
                ('encryption_key_id', models.CharField(
                    max_length=50,
                    verbose_name='Encryption Key ID',
                    help_text='ID of encryption key used'
                )),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('ip_address', models.GenericIPAddressField(null=True, blank=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('session_id', models.CharField(
                    max_length=255,
                    null=True,
                    blank=True,
                    verbose_name='Session ID'
                )),
                ('user', models.ForeignKey(
                    null=True,
                    blank=True,
                    on_delete=django.db.models.deletion.SET_NULL,
                    related_name='transaction_logs',
                    to=settings.AUTH_USER_MODEL,
                    verbose_name='User'
                )),
            ],
            options={
                'verbose_name': 'Encrypted Transaction Log',
                'verbose_name_plural': 'Encrypted Transaction Logs',
                'ordering': ['-created_at'],
                'indexes': [
                    models.Index(fields=['transaction_type', 'created_at']),
                    models.Index(fields=['data_hash']),
                ],
            },
        ),

        # Create Multi-Currency Support model
        migrations.CreateModel(
            name='CurrencyExchangeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('from_currency', models.CharField(
                    choices=[('USD', 'US Dollar'), ('KHR', 'Cambodian Riel')],
                    max_length=3,
                    verbose_name='From Currency'
                )),
                ('to_currency', models.CharField(
                    choices=[('USD', 'US Dollar'), ('KHR', 'Cambodian Riel')],
                    max_length=3,
                    verbose_name='To Currency'
                )),
                ('exchange_rate', models.DecimalField(
                    max_digits=15,
                    decimal_places=6,
                    verbose_name='Exchange Rate',
                    validators=[django.core.validators.MinValueValidator(0.000001)]
                )),
                ('effective_date', models.DateField(verbose_name='Effective Date')),
                ('source', models.CharField(
                    choices=[
                        ('manual', 'Manual Entry'),
                        ('api', 'API Feed'),
                        ('bank', 'Bank Rate'),
                        ('central_bank', 'Central Bank'),
                    ],
                    max_length=20,
                    verbose_name='Rate Source'
                )),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('metadata', models.JSONField(
                    default=dict,
                    help_text='Additional rate metadata',
                    verbose_name='Metadata'
                )),
            ],
            options={
                'verbose_name': 'Currency Exchange Rate',
                'verbose_name_plural': 'Currency Exchange Rates',
                'ordering': ['-effective_date'],
                'unique_together': {('from_currency', 'to_currency', 'effective_date')},
                'indexes': [
                    models.Index(fields=['from_currency', 'to_currency', 'effective_date']),
                    models.Index(fields=['is_active', 'effective_date']),
                ],
            },
        ),

        # Create Fraud Detection Log model
        migrations.CreateModel(
            name='FraudDetectionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('detection_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True, verbose_name='Detection ID')),
                ('risk_level', models.CharField(
                    choices=[
                        ('low', 'Low Risk'),
                        ('medium', 'Medium Risk'),
                        ('high', 'High Risk'),
                        ('critical', 'Critical Risk'),
                    ],
                    max_length=20,
                    verbose_name='Risk Level'
                )),
                ('risk_score', models.DecimalField(
                    max_digits=5,
                    decimal_places=2,
                    validators=[
                        django.core.validators.MinValueValidator(0.0),
                        django.core.validators.MaxValueValidator(100.0),
                    ],
                    verbose_name='Risk Score'
                )),
                ('detection_rules', models.JSONField(
                    verbose_name='Detection Rules',
                    help_text='Rules that triggered fraud detection'
                )),
                ('transaction_details', models.JSONField(
                    verbose_name='Transaction Details',
                    help_text='Anonymized transaction details for analysis'
                )),
                ('action_taken', models.CharField(
                    choices=[
                        ('none', 'No Action'),
                        ('flag', 'Flagged for Review'),
                        ('block', 'Transaction Blocked'),
                        ('require_verification', 'Verification Required'),
                    ],
                    max_length=30,
                    verbose_name='Action Taken'
                )),
                ('reviewed', models.BooleanField(default=False, verbose_name='Reviewed')),
                ('review_decision', models.CharField(
                    choices=[
                        ('approved', 'Approved'),
                        ('rejected', 'Rejected'),
                        ('pending', 'Pending Review'),
                    ],
                    max_length=20,
                    null=True,
                    blank=True,
                    verbose_name='Review Decision'
                )),
                ('review_notes', models.TextField(blank=True, verbose_name='Review Notes')),
                ('detected_at', models.DateTimeField(auto_now_add=True, verbose_name='Detected At')),
                ('reviewed_at', models.DateTimeField(null=True, blank=True, verbose_name='Reviewed At')),
                ('payment', models.ForeignKey(
                    null=True,
                    blank=True,
                    on_delete=django.db.models.deletion.CASCADE,
                    related_name='fraud_logs',
                    to='finance.payment',
                    verbose_name='Payment'
                )),
                ('reviewer', models.ForeignKey(
                    null=True,
                    blank=True,
                    on_delete=django.db.models.deletion.SET_NULL,
                    related_name='fraud_reviews',
                    to=settings.AUTH_USER_MODEL,
                    verbose_name='Reviewer'
                )),
            ],
            options={
                'verbose_name': 'Fraud Detection Log',
                'verbose_name_plural': 'Fraud Detection Logs',
                'ordering': ['-detected_at'],
                'indexes': [
                    models.Index(fields=['risk_level', 'detected_at']),
                    models.Index(fields=['reviewed', 'detected_at']),
                    models.Index(fields=['action_taken', 'detected_at']),
                ],
            },
        ),

        # Add multi-currency support fields to existing models
        migrations.AddField(
            model_name='invoice',
            name='currency',
            field=models.CharField(
                choices=[('USD', 'US Dollar'), ('KHR', 'Cambodian Riel')],
                default='USD',
                max_length=3,
                verbose_name='Currency'
            ),
        ),
        migrations.AddField(
            model_name='invoice',
            name='exchange_rate',
            field=models.DecimalField(
                decimal_places=6,
                max_digits=15,
                null=True,
                blank=True,
                verbose_name='Exchange Rate at Time of Invoice',
                help_text='Exchange rate used when invoice was created'
            ),
        ),
        migrations.AddField(
            model_name='payment',
            name='currency',
            field=models.CharField(
                choices=[('USD', 'US Dollar'), ('KHR', 'Cambodian Riel')],
                default='USD',
                max_length=3,
                verbose_name='Payment Currency'
            ),
        ),
        migrations.AddField(
            model_name='payment',
            name='exchange_rate',
            field=models.DecimalField(
                decimal_places=6,
                max_digits=15,
                null=True,
                blank=True,
                verbose_name='Exchange Rate at Time of Payment',
                help_text='Exchange rate used when payment was processed'
            ),
        ),

        # Add security indexes for financial data
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_finance_payment_fraud_high ON finance_payment(fraud_score) WHERE fraud_score > 70.0;",
            reverse_sql="DROP INDEX IF EXISTS idx_finance_payment_fraud_high;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_finance_fraud_log_critical ON finance_frauddetectionlog(risk_level, detected_at) WHERE risk_level IN ('high', 'critical');",
            reverse_sql="DROP INDEX IF EXISTS idx_finance_fraud_log_critical;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_finance_transaction_log_recent ON finance_encryptedtransactionlog(transaction_type, created_at) WHERE created_at > NOW() - INTERVAL '30 days';",
            reverse_sql="DROP INDEX IF EXISTS idx_finance_transaction_log_recent;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_finance_currency_active ON finance_currencyexchangerate(from_currency, to_currency, effective_date) WHERE is_active = true;",
            reverse_sql="DROP INDEX IF EXISTS idx_finance_currency_active;",
        ),
    ]