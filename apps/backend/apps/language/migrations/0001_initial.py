# Generated by Django 5.2.5 on 2025-08-28 12:49

import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LanguageProgramPromotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('program', models.CharField(help_text='Language program being promoted (EHSS, GESL, etc.)', max_length=20, verbose_name='Language Program')),
                ('status', models.CharField(choices=[('INITIATED', 'Promotion Initiated'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='INITIATED', help_text='Current status of the promotion process', max_length=20, verbose_name='Promotion Status')),
                ('students_promoted_count', models.PositiveIntegerField(default=0, help_text='Number of students successfully promoted', verbose_name='Students Promoted Count')),
                ('classes_cloned_count', models.PositiveIntegerField(default=0, help_text='Number of classes cloned for the new term', verbose_name='Classes Cloned Count')),
                ('initiated_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When the promotion was initiated', verbose_name='Initiated At')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the promotion was completed', null=True, verbose_name='Completed At')),
                ('notes', models.TextField(blank=True, help_text='Notes about this promotion process', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Language Program Promotion',
                'verbose_name_plural': 'Language Program Promotions',
                'ordering': ['-initiated_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='LanguageStudentPromotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('from_level', models.CharField(help_text='Language level the student is being promoted from', max_length=50, verbose_name='From Level')),
                ('to_level', models.CharField(help_text='Language level the student is being promoted to', max_length=50, verbose_name='To Level')),
                ('result', models.CharField(choices=[('PROMOTED', 'Promoted'), ('LEVEL_SKIPPED', 'Level Skipped - Advanced Placement'), ('FAILED_COURSE', 'Failed Course - Not Promoted'), ('WITHDRAWN', 'Withdrawn'), ('NO_SHOW', 'No Show')], default='PROMOTED', help_text='Result of the promotion attempt', max_length=20, verbose_name='Promotion Result')),
                ('final_grade', models.CharField(blank=True, help_text='Final grade from the source course', max_length=10, verbose_name='Final Grade')),
                ('notes', models.TextField(blank=True, help_text="Additional notes about this student's promotion", verbose_name='Notes')),
                ('has_level_skip_override', models.BooleanField(default=False, help_text='Whether this promotion includes level skipping with management override', verbose_name='Has Level Skip Override')),
                ('skip_reason', models.TextField(blank=True, help_text='Reason for level skipping (re-test results, misevaluation, etc.)', verbose_name='Level Skip Reason')),
            ],
            options={
                'verbose_name': 'Language Student Promotion',
                'verbose_name_plural': 'Language Student Promotions',
                'ordering': ['promotion_batch', 'student'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='LanguageLevelSkipRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('current_level', models.CharField(help_text="Student's current language level", max_length=50, verbose_name='Current Level')),
                ('target_level', models.CharField(help_text='Requested target language level', max_length=50, verbose_name='Target Level')),
                ('program', models.CharField(help_text='Language program (EHSS, GESL, etc.)', max_length=20, verbose_name='Language Program')),
                ('levels_skipped', models.PositiveSmallIntegerField(default=1, help_text='Number of levels being skipped', verbose_name='Levels Skipped')),
                ('reason_category', models.CharField(choices=[('RETEST_HIGHER', 'Re-test Shows Higher Level'), ('MISEVALUATION', 'Initial Placement Misevaluation'), ('TRANSFER_CREDIT', 'Transfer Credit from Other Institution'), ('DEMONSTRATED_COMPETENCY', 'Demonstrated Advanced Competency'), ('ACCELERATED_LEARNING', 'Accelerated Learning Progress'), ('OTHER', 'Other Reason')], help_text='Category of reason for level skip', max_length=30, verbose_name='Reason Category')),
                ('detailed_reason', models.TextField(help_text='Detailed explanation for the level skip request', verbose_name='Detailed Reason')),
                ('supporting_evidence', models.TextField(blank=True, help_text='Supporting evidence (test scores, instructor observations, etc.)', verbose_name='Supporting Evidence')),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('DENIED', 'Denied'), ('IMPLEMENTED', 'Implemented')], default='PENDING', help_text='Current status of the skip request', max_length=20, verbose_name='Request Status')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When the request was reviewed', null=True, verbose_name='Reviewed At')),
                ('review_notes', models.TextField(blank=True, help_text='Notes from the reviewer', verbose_name='Review Notes')),
                ('implemented_at', models.DateTimeField(blank=True, help_text='When the skip was implemented', null=True, verbose_name='Implemented At')),
                ('implemented_by', models.ForeignKey(blank=True, help_text='Staff member who implemented the skip', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='implemented_level_skip_requests', to=settings.AUTH_USER_MODEL, verbose_name='Implemented By')),
            ],
            options={
                'verbose_name': 'Language Level Skip Request',
                'verbose_name_plural': 'Language Level Skip Requests',
                'ordering': ['-created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
    ]
