# Generated by Django 5.2.5 on 2025-08-28 12:49

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
from uuid_extensions import uuid7
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
        ('curriculum', '0001_initial'),
        ('people', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassHeader',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('section_id', models.CharField(help_text='Section identifier (A, B, C, etc.)', max_length=5, validators=[django.core.validators.RegexValidator('^[A-Z]$', 'Section ID must be a single letter A-Z')], verbose_name='Section ID')),
                ('time_of_day', models.CharField(choices=[('MORN', 'Morning'), ('AFT', 'Afternoon'), ('EVE', 'Evening'), ('NIGHT', 'Night'), ('ALL', 'All Day')], default='MORN', help_text='General time period for this class', max_length=10, verbose_name='Time of Day')),
                ('class_type', models.CharField(choices=[('STANDARD', 'Standard Class'), ('COMBINED', 'Combined Class'), ('READING', 'Reading Class'), ('INTENSIVE', 'Intensive Class'), ('WORKSHOP', 'Workshop')], db_index=True, default='STANDARD', help_text='Type of class offering', max_length=15, verbose_name='Class Type')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SCHEDULED', 'Scheduled'), ('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('SUSPENDED', 'Suspended')], db_index=True, default='DRAFT', help_text='Current scheduling status', max_length=15, verbose_name='Status')),
                ('is_paired', models.BooleanField(default=False, help_text='Whether this class is paired with another', verbose_name='Is Paired')),
                ('max_enrollment', models.PositiveSmallIntegerField(default=30, help_text='Maximum number of students allowed', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='Maximum Enrollment')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this class offering', verbose_name='Notes')),
                ('legacy_class_id', models.CharField(blank=True, help_text='Legacy system identifier for migration tracking', max_length=50, verbose_name='Legacy Class ID')),
                ('course', models.ForeignKey(help_text='Course being offered', on_delete=django.db.models.deletion.PROTECT, related_name='class_headers', to='curriculum.course', verbose_name='Course')),
                ('paired_with', models.ForeignKey(blank=True, help_text='Class this is paired with (for language programs)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='paired_classes', to='scheduling.classheader', verbose_name='Paired With')),
                ('term', models.ForeignKey(help_text='Academic term when class is offered', on_delete=django.db.models.deletion.PROTECT, related_name='class_headers', to='curriculum.term', verbose_name='Term')),
            ],
            options={
                'verbose_name': 'Class Header',
                'verbose_name_plural': 'Class Headers',
                'ordering': ['term', 'course', 'section_id'],
                'permissions': [('can_manage_class_scheduling', 'Can manage bulk class scheduling operations')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassPartTemplateSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('program_code', models.CharField(db_index=True, help_text='Program code (EHSS, GESL, IEAP, EXPRESS)', max_length=20, verbose_name='Program Code')),
                ('level_number', models.IntegerField(db_index=True, help_text='Level number within the program', verbose_name='Level Number')),
                ('effective_date', models.DateField(db_index=True, help_text='Date this template set becomes active', verbose_name='Effective Date')),
                ('expiry_date', models.DateField(blank=True, help_text='Date this template set expires (null = no expiry)', null=True, verbose_name='Expiry Date')),
                ('version', models.IntegerField(default=1, help_text='Version number for this template set', verbose_name='Version')),
                ('name', models.CharField(help_text='Descriptive name for this template set', max_length=200, verbose_name='Template Set Name')),
                ('description', models.TextField(blank=True, help_text='Description of this template structure', verbose_name='Description')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this template set is currently active', verbose_name='Is Active')),
                ('auto_apply_on_promotion', models.BooleanField(default=True, help_text='Automatically apply this template when students are promoted to this level', verbose_name='Auto Apply on Promotion')),
                ('preserve_section_cohort', models.BooleanField(default=True, help_text='Keep students in same section when promoted', verbose_name='Preserve Section Cohort')),
            ],
            options={
                'verbose_name': 'Class Part Template Set',
                'verbose_name_plural': 'Class Part Template Sets',
                'ordering': ['-effective_date', 'program_code', 'level_number'],
                'indexes': [models.Index(fields=['program_code', 'level_number', '-effective_date'], name='scheduling__program_0c5ef7_idx'), models.Index(fields=['effective_date', 'is_active'], name='scheduling__effecti_16ca1e_idx')],
                'unique_together': {('program_code', 'level_number', 'version')},
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassPromotionRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('source_program', models.CharField(help_text='Program code students are promoted from', max_length=20, verbose_name='Source Program')),
                ('source_level', models.IntegerField(help_text='Level number students are promoted from', verbose_name='Source Level')),
                ('destination_program', models.CharField(help_text='Program code students are promoted to', max_length=20, verbose_name='Destination Program')),
                ('destination_level', models.IntegerField(help_text='Level number students are promoted to', verbose_name='Destination Level')),
                ('preserve_cohort', models.BooleanField(default=True, help_text='Keep students together in same section', verbose_name='Preserve Cohort')),
                ('auto_create_classes', models.BooleanField(default=True, help_text='Automatically create new classes for promoted students', verbose_name='Auto Create Classes')),
                ('apply_template', models.BooleanField(default=True, help_text='Apply class part templates to new classes', verbose_name='Apply Template')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this rule is active', verbose_name='Is Active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this promotion rule', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Class Promotion Rule',
                'verbose_name_plural': 'Class Promotion Rules',
                'ordering': ['source_program', 'source_level'],
                'unique_together': {('source_program', 'source_level', 'destination_program', 'destination_level')},
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('internal_session_id', models.UUIDField(default=uuid7, editable=False, help_text='Immutable internal identifier for this session', unique=True)),
                ('session_number', models.PositiveSmallIntegerField(default=1, help_text='Session number within the class (1 for regular, 1&2 for IEAP)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Session Number')),
                ('session_name', models.CharField(blank=True, help_text="Optional name for this session (e.g., 'Session 1', 'Morning Session')", max_length=50, verbose_name='Session Name')),
                ('grade_weight', models.DecimalField(decimal_places=3, default=Decimal('1.000'), help_text='Weight of this session in final grade (1.0 for regular, 0.5 for IEAP)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.000')), django.core.validators.MaxValueValidator(Decimal('1.000'))], verbose_name='Grade Weight')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this session', verbose_name='Notes')),
                ('class_header', models.ForeignKey(help_text='Class this session belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='class_sessions', to='scheduling.classheader', verbose_name='Class Header')),
            ],
            options={
                'verbose_name': 'Class Session',
                'verbose_name_plural': 'Class Sessions',
                'ordering': ['class_header', 'session_number'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassPart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('internal_part_id', models.UUIDField(default=uuid7, editable=False, help_text='Immutable internal identifier for this part', unique=True)),
                ('class_part_type', models.CharField(choices=[('MAIN', 'Main Class'), ('LECTURE', 'Lecture'), ('DISCUSSION', 'Discussion'), ('LAB', 'Laboratory'), ('COMPUTER', 'Computer Lab'), ('WORKSHOP', 'Workshop'), ('TUTORIAL', 'Tutorial'), ('PROJECT', 'Project'), ('GRAMMAR', 'Grammar'), ('CONVERSATION', 'Conversation'), ('WRITING', 'Writing'), ('READING', 'Reading'), ('LISTENING', 'Listening'), ('SPEAKING', 'Speaking'), ('VENTURES', 'Ventures'), ('BA', "Bachelor's Degree"), ('MA', "Master's Degree"), ('PRACTICUM', 'Practicum'), ('EXCHANGE', 'Exchange Program'), ('ONLINE', 'Online Class'), ('OTHER', 'Other')], db_index=True, default='MAIN', help_text='Type of class component', max_length=15, verbose_name='Class Part Type')),
                ('class_part_code', models.PositiveSmallIntegerField(default=1, help_text='Numeric identifier for this part (1, 2, 3, etc.)', verbose_name='Class Part Code')),
                ('name', models.CharField(blank=True, help_text='Optional specific name for this part', max_length=100, verbose_name='Part Name')),
                ('meeting_days', models.CharField(help_text='Days of week this part meets (comma-separated: MON,WED,FRI)', max_length=20, verbose_name='Meeting Days')),
                ('start_time', models.TimeField(blank=True, help_text='When this part starts (filled by scheduler)', null=True, verbose_name='Start Time')),
                ('end_time', models.TimeField(blank=True, help_text='When this part ends (filled by scheduler)', null=True, verbose_name='End Time')),
                ('grade_weight', models.DecimalField(decimal_places=3, default=Decimal('1.000'), help_text='Weight of this part in final grade (0.000-1.000)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.000')), django.core.validators.MaxValueValidator(Decimal('1.000'))], verbose_name='Grade Weight')),
                ('template_derived', models.BooleanField(default=False, help_text='Whether this class part was derived from a ClassPartTemplate', verbose_name='Template Derived')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this class part', verbose_name='Notes')),
                ('legacy_class_id', models.CharField(blank=True, help_text='Legacy system identifier for migration tracking', max_length=50, verbose_name='Legacy Class ID')),
                ('room', models.ForeignKey(blank=True, help_text='Assigned room for this part', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='class_parts', to='common.room', verbose_name='Room')),
                ('teacher', models.ForeignKey(blank=True, help_text='Assigned teacher for this part', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='class_parts', to='people.teacherprofile', verbose_name='Teacher')),
                ('textbooks', models.ManyToManyField(blank=True, help_text='Textbooks used in this part', related_name='class_parts', to='curriculum.textbook', verbose_name='Textbooks')),
                ('class_session', models.ForeignKey(help_text='Session this part belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='class_parts', to='scheduling.classsession', verbose_name='Class Session')),
            ],
            options={
                'verbose_name': 'Class Part',
                'verbose_name_plural': 'Class Parts',
                'ordering': ['class_session', 'class_part_code'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='CombinedClassGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text='Descriptive name for this class group', max_length=100, verbose_name='Group Name')),
                ('description', models.TextField(blank=True, help_text='Additional details about this group', verbose_name='Description')),
                ('term', models.ForeignKey(help_text='Academic term for this group', on_delete=django.db.models.deletion.CASCADE, related_name='combined_class_groups', to='curriculum.term', verbose_name='Term')),
            ],
            options={
                'verbose_name': 'Combined Class Group',
                'verbose_name_plural': 'Combined Class Groups',
                'ordering': ['term', 'name'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='classheader',
            name='combined_class_group',
            field=models.ForeignKey(blank=True, help_text='Group this class belongs to (if any)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='member_class_headers', to='scheduling.combinedclassgroup', verbose_name='Combined Class Group'),
        ),
        migrations.CreateModel(
            name='CombinedClassInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ACTIVE', 'Active'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], db_index=True, default='DRAFT', help_text='Current status of this combination instance', max_length=15, verbose_name='Status')),
                ('section_id', models.CharField(help_text='Section identifier for the combined class (A, B, C, etc.)', max_length=5, validators=[django.core.validators.RegexValidator('^[A-Z]$', 'Section ID must be a single letter A-Z')], verbose_name='Combined Section ID')),
                ('max_enrollment', models.PositiveSmallIntegerField(default=30, help_text='Maximum total students across all member courses', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(200)], verbose_name='Maximum Combined Enrollment')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this combination instance', verbose_name='Notes')),
                ('auto_created', models.BooleanField(default=True, help_text='Whether this instance was automatically created', verbose_name='Auto Created')),
                ('primary_room', models.ForeignKey(blank=True, help_text='Room where this combined class meets', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='combined_class_instances', to='common.room', verbose_name='Primary Room')),
                ('primary_teacher', models.ForeignKey(blank=True, help_text='Teacher assigned to teach this combined class', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='combined_class_instances', to='people.teacherprofile', verbose_name='Primary Teacher')),
                ('term', models.ForeignKey(help_text='Academic term for this combination instance', on_delete=django.db.models.deletion.CASCADE, related_name='combined_class_instances', to='curriculum.term', verbose_name='Term')),
            ],
            options={
                'verbose_name': 'Combined Class Instance',
                'verbose_name_plural': 'Combined Class Instances',
                'ordering': ['term', 'template', 'section_id'],
                'permissions': [('can_manage_combined_instances', 'Can manage combined class instances')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='classheader',
            name='combined_class_instance',
            field=models.ForeignKey(blank=True, help_text='Combined class instance this class belongs to (if any)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='class_headers', to='scheduling.combinedclassinstance', verbose_name='Combined Class Instance'),
        ),
        migrations.CreateModel(
            name='CombinedCourseTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text='Descriptive name for this course combination', max_length=100, verbose_name='Template Name')),
                ('description', models.TextField(blank=True, help_text='Additional details about this combination and its purpose', verbose_name='Description')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('DEPRECATED', 'Deprecated')], db_index=True, default='ACTIVE', help_text='Current status of this template', max_length=15, verbose_name='Status')),
                ('notes', models.TextField(blank=True, help_text='Internal notes for administrative purposes', verbose_name='Administrative Notes')),
                ('courses', models.ManyToManyField(help_text='Courses that should always be scheduled together', related_name='combined_course_templates', to='curriculum.course', verbose_name='Courses')),
                ('created_by', models.ForeignKey(help_text='User who created this template', on_delete=django.db.models.deletion.PROTECT, related_name='created_combined_course_templates', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Combined Course Template',
                'verbose_name_plural': 'Combined Course Templates',
                'ordering': ['name'],
                'permissions': [('can_manage_course_combinations', 'Can manage course combination templates')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='combinedclassinstance',
            name='template',
            field=models.ForeignKey(help_text='Course combination template this instance implements', on_delete=django.db.models.deletion.CASCADE, related_name='combined_class_instances', to='scheduling.combinedcoursetemplate', verbose_name='Template'),
        ),
        migrations.CreateModel(
            name='ReadingClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('tier', models.CharField(choices=[('TIER_1', 'Tier 1 (1-2 students)'), ('TIER_2', 'Tier 2 (3-5 students)'), ('TIER_3', 'Tier 3 (6-15 students)')], db_index=True, default='TIER_1', help_text='Current enrollment tier', max_length=10, verbose_name='Tier')),
                ('target_enrollment', models.PositiveSmallIntegerField(default=3, help_text='Target number of students for this reading class', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(15)], verbose_name='Target Enrollment')),
                ('enrollment_status', models.CharField(choices=[('PLANNING', 'Planning'), ('OPEN', 'Open for Enrollment'), ('CLOSED', 'Closed'), ('CONVERTED', 'Converted to Standard')], db_index=True, default='PLANNING', help_text='Current enrollment status', max_length=15, verbose_name='Enrollment Status')),
                ('description', models.TextField(blank=True, help_text='Additional description or notes about this reading class', verbose_name='Description')),
                ('class_header', models.OneToOneField(help_text='Class header this reading class is associated with', on_delete=django.db.models.deletion.CASCADE, related_name='reading_class', to='scheduling.classheader', verbose_name='Class Header')),
            ],
            options={
                'verbose_name': 'Reading Class',
                'verbose_name_plural': 'Reading Classes',
                'ordering': ['class_header'],
                'permissions': [('can_manage_reading_classes', 'Can manage reading class operations')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TeacherLeaveRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('leave_date', models.DateField(help_text='Date when teacher will be absent', verbose_name='Leave Date')),
                ('leave_type', models.CharField(choices=[('SICK', 'Sick Leave'), ('PERSONAL', 'Personal Leave'), ('EMERGENCY', 'Emergency'), ('PROFESSIONAL', 'Professional Development'), ('FAMILY', 'Family Emergency'), ('MEDICAL', 'Medical Appointment'), ('OTHER', 'Other')], default='SICK', help_text='Type of leave being requested', max_length=15, verbose_name='Leave Type')),
                ('reason', models.TextField(help_text='Detailed reason for leave request', verbose_name='Reason')),
                ('is_emergency', models.BooleanField(default=False, help_text='Whether this is an emergency/last-minute request', verbose_name='Is Emergency')),
                ('substitute_confirmed', models.BooleanField(default=False, help_text='Whether substitute teacher has confirmed availability', verbose_name='Substitute Confirmed')),
                ('substitute_assigned_at', models.DateTimeField(blank=True, help_text='When substitute was assigned', null=True, verbose_name='Substitute Assigned At')),
                ('approval_status', models.CharField(choices=[('PENDING', 'Pending Approval'), ('APPROVED', 'Approved'), ('DENIED', 'Denied'), ('CANCELLED', 'Cancelled')], db_index=True, default='PENDING', max_length=15, verbose_name='Approval Status')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Approved At')),
                ('denial_reason', models.TextField(blank=True, help_text='Reason for denial if status is denied', verbose_name='Denial Reason')),
                ('notification_sent', models.BooleanField(default=False, help_text='Whether department has been notified', verbose_name='Notification Sent')),
                ('substitute_found', models.BooleanField(default=False, help_text='Whether a substitute has been secured', verbose_name='Substitute Found')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this leave request', verbose_name='Administrative Notes')),
                ('affected_class_parts', models.ManyToManyField(help_text='Class parts that need substitute coverage', related_name='teacher_leave_requests', to='scheduling.classpart', verbose_name='Affected Class Parts')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='approved_leave_requests', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('substitute_assigned_by', models.ForeignKey(blank=True, help_text='Staff member who assigned the substitute', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='assigned_substitute_leaves', to=settings.AUTH_USER_MODEL, verbose_name='Substitute Assigned By')),
                ('substitute_teacher', models.ForeignKey(blank=True, help_text='Teacher assigned to cover the classes', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='substitute_assignments', to='people.teacherprofile', verbose_name='Substitute Teacher')),
                ('teacher', models.ForeignKey(help_text='Teacher requesting leave', on_delete=django.db.models.deletion.PROTECT, related_name='leave_requests', to='people.teacherprofile', verbose_name='Teacher')),
            ],
            options={
                'verbose_name': 'Teacher Leave Request',
                'verbose_name_plural': 'Teacher Leave Requests',
                'ordering': ['-leave_date', '-created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TestPeriodReset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('test_type', models.CharField(choices=[('IEAP_T1', 'IEAP Test 1'), ('IEAP_T2', 'IEAP Test 2'), ('IEAP_T3', 'IEAP Test 3'), ('MIDTERM', 'Midterm'), ('FINAL', 'Final')], db_index=True, help_text='Type of test period for absence reset', max_length=10, verbose_name='Test Type')),
                ('reset_date', models.DateField(db_index=True, help_text='Date when absence counters reset for this test period', verbose_name='Reset Date')),
                ('applies_to_all_language_classes', models.BooleanField(default=True, help_text='Apply this reset date to all language classes in the term', verbose_name='Applies to All Language Classes')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this reset period', verbose_name='Notes')),
                ('specific_classes', models.ManyToManyField(blank=True, help_text='Specific classes if not applying to all (language division only)', related_name='test_period_resets', to='scheduling.classheader', verbose_name='Specific Classes')),
                ('term', models.ForeignKey(help_text='Academic term for this reset period', on_delete=django.db.models.deletion.CASCADE, related_name='test_period_resets', to='curriculum.term', verbose_name='Term')),
            ],
            options={
                'verbose_name': 'Test Period Reset',
                'verbose_name_plural': 'Test Period Resets',
                'ordering': ['term', 'test_type', 'reset_date'],
                'permissions': [('can_manage_test_resets', 'Can manage test period reset operations')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassPartTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('class_part_type', models.CharField(choices=[('MAIN', 'Main Class'), ('LECTURE', 'Lecture'), ('DISCUSSION', 'Discussion'), ('LAB', 'Laboratory'), ('COMPUTER', 'Computer Lab'), ('WORKSHOP', 'Workshop'), ('TUTORIAL', 'Tutorial'), ('PROJECT', 'Project'), ('GRAMMAR', 'Grammar'), ('CONVERSATION', 'Conversation'), ('WRITING', 'Writing'), ('READING', 'Reading'), ('LISTENING', 'Listening'), ('SPEAKING', 'Speaking'), ('VENTURES', 'Ventures'), ('BA', "Bachelor's Degree"), ('MA', "Master's Degree"), ('PRACTICUM', 'Practicum'), ('EXCHANGE', 'Exchange Program'), ('ONLINE', 'Online Class'), ('OTHER', 'Other')], default='MAIN', help_text='Type of class component', max_length=20, verbose_name='Class Part Type')),
                ('class_part_code', models.PositiveSmallIntegerField(default=1, help_text='Numeric identifier for this part (1, 2, 3, etc.)', verbose_name='Class Part Code')),
                ('name', models.CharField(help_text="Name for this part (e.g., 'Ventures Ventures', 'Reading')", max_length=100, verbose_name='Part Name')),
                ('meeting_days_pattern', models.CharField(help_text="Days pattern (e.g., 'MON,WED' or 'TUE,THU' or 'FRI')", max_length=50, verbose_name='Meeting Days Pattern')),
                ('sequence_order', models.IntegerField(default=0, help_text='Order in which parts should be created', verbose_name='Sequence Order')),
                ('grade_weight', models.DecimalField(decimal_places=3, default=Decimal('1.000'), help_text='Weight of this part in final grade (0.000-1.000)', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.000')), django.core.validators.MaxValueValidator(Decimal('1.000'))], verbose_name='Grade Weight')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is active', verbose_name='Is Active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this template', verbose_name='Notes')),
                ('default_textbooks', models.ManyToManyField(blank=True, help_text='Default textbooks for this part', related_name='template_parts', to='curriculum.textbook', verbose_name='Default Textbooks')),
                ('template_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='templates', to='scheduling.classparttemplateset', verbose_name='Template Set')),
            ],
            options={
                'verbose_name': 'Class Part Template',
                'verbose_name_plural': 'Class Part Templates',
                'ordering': ['template_set', 'sequence_order', 'class_part_code'],
                'indexes': [models.Index(fields=['template_set', 'sequence_order'], name='scheduling__templat_20c429_idx')],
                'unique_together': {('template_set', 'class_part_code')},
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddIndex(
            model_name='classsession',
            index=models.Index(fields=['class_header', 'session_number'], name='scheduling__class_h_696980_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='classsession',
            unique_together={('class_header', 'session_number')},
        ),
        migrations.AddIndex(
            model_name='classpart',
            index=models.Index(fields=['class_session', 'class_part_type'], name='scheduling__class_s_123493_idx'),
        ),
        migrations.AddIndex(
            model_name='classpart',
            index=models.Index(fields=['teacher'], name='scheduling__teacher_997438_idx'),
        ),
        migrations.AddIndex(
            model_name='classpart',
            index=models.Index(fields=['room'], name='scheduling__room_id_b3e585_idx'),
        ),
        migrations.AddIndex(
            model_name='classpart',
            index=models.Index(fields=['start_time', 'end_time'], name='scheduling__start_t_f57c1f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='classpart',
            unique_together={('class_session', 'class_part_code')},
        ),
        migrations.AddIndex(
            model_name='combinedclassgroup',
            index=models.Index(fields=['term', 'is_deleted'], name='scheduling__term_id_c8fcbb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='combinedclassgroup',
            unique_together={('term', 'name')},
        ),
        migrations.AddIndex(
            model_name='classheader',
            index=models.Index(fields=['course', 'term'], name='scheduling__course__a43b63_idx'),
        ),
        migrations.AddIndex(
            model_name='classheader',
            index=models.Index(fields=['term', 'status'], name='scheduling__term_id_9da4e0_idx'),
        ),
        migrations.AddIndex(
            model_name='classheader',
            index=models.Index(fields=['class_type', 'status'], name='scheduling__class_t_cedfe9_idx'),
        ),
        migrations.AddIndex(
            model_name='classheader',
            index=models.Index(fields=['is_paired'], name='scheduling__is_pair_e35417_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='classheader',
            unique_together={('course', 'term', 'section_id', 'time_of_day')},
        ),
        migrations.AddIndex(
            model_name='combinedcoursetemplate',
            index=models.Index(fields=['status', 'is_deleted'], name='scheduling__status_e319de_idx'),
        ),
        migrations.AddIndex(
            model_name='combinedcoursetemplate',
            index=models.Index(fields=['created_by'], name='scheduling__created_7faaa4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='combinedcoursetemplate',
            unique_together={('name',)},
        ),
        migrations.AddIndex(
            model_name='combinedclassinstance',
            index=models.Index(fields=['template', 'term'], name='scheduling__templat_ae1e71_idx'),
        ),
        migrations.AddIndex(
            model_name='combinedclassinstance',
            index=models.Index(fields=['term', 'status'], name='scheduling__term_id_df1611_idx'),
        ),
        migrations.AddIndex(
            model_name='combinedclassinstance',
            index=models.Index(fields=['primary_teacher'], name='scheduling__primary_3ea89c_idx'),
        ),
        migrations.AddIndex(
            model_name='combinedclassinstance',
            index=models.Index(fields=['primary_room'], name='scheduling__primary_6efbe7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='combinedclassinstance',
            unique_together={('template', 'term', 'section_id')},
        ),
        migrations.AddIndex(
            model_name='teacherleaverequest',
            index=models.Index(fields=['teacher', 'leave_date'], name='scheduling__teacher_ff9037_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherleaverequest',
            index=models.Index(fields=['leave_date', 'approval_status'], name='scheduling__leave_d_8e977a_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherleaverequest',
            index=models.Index(fields=['substitute_teacher', 'leave_date'], name='scheduling__substit_eab3c5_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherleaverequest',
            index=models.Index(fields=['is_emergency', 'approval_status'], name='scheduling__is_emer_d0239d_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherleaverequest',
            index=models.Index(fields=['substitute_found', 'leave_date'], name='scheduling__substit_5c4416_idx'),
        ),
        migrations.AddIndex(
            model_name='testperiodreset',
            index=models.Index(fields=['term', 'test_type'], name='scheduling__term_id_1a9e64_idx'),
        ),
        migrations.AddIndex(
            model_name='testperiodreset',
            index=models.Index(fields=['reset_date', 'applies_to_all_language_classes'], name='scheduling__reset_d_f568b8_idx'),
        ),
        migrations.AddIndex(
            model_name='testperiodreset',
            index=models.Index(fields=['term', 'reset_date'], name='scheduling__term_id_9a6620_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='testperiodreset',
            unique_together={('term', 'test_type', 'applies_to_all_language_classes')},
        ),
    ]
