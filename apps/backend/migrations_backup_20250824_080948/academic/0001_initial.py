# Generated by Django 5.2.4 on 2025-07-15 01:23

from decimal import Decimal

import django.core.validators
import django.db.models.manager
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CanonicalRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "sequence_number",
                    models.PositiveSmallIntegerField(
                        help_text="Order in degree sequence (1-43 for BA, 1-24 for MA, etc.)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(50),
                        ],
                        verbose_name="Sequence Number",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this requirement slot",
                        max_length=200,
                        verbose_name="Requirement Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Additional context about this requirement",
                        verbose_name="Description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this canonical requirement is currently in use",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for curriculum committee",
                        verbose_name="Administrative Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Canonical Requirement",
                "verbose_name_plural": "Canonical Requirements",
                "ordering": ["major", "sequence_number"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="CourseEquivalency",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "is_bidirectional",
                    models.BooleanField(
                        default=True,
                        help_text="Whether the equivalency works in both directions",
                        verbose_name="Is Bidirectional",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this equivalency is currently in use",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this equivalency",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Course Equivalency",
                "verbose_name_plural": "Course Equivalencies",
                "ordering": ["original_course", "equivalent_course"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Requirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name of the requirement",
                        max_length=200,
                        verbose_name="Requirement Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of what students must complete",
                        verbose_name="Description",
                    ),
                ),
                (
                    "required_credits",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Minimum credits required (if credit-based)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(200),
                        ],
                        verbose_name="Required Credits",
                    ),
                ),
                (
                    "required_courses_count",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Minimum number of courses required (if course-count based)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(50),
                        ],
                        verbose_name="Required Courses Count",
                    ),
                ),
                (
                    "course_level",
                    models.CharField(
                        choices=[
                            ("ANY", "Any Level"),
                            ("LOWER", "Lower Level (100-200)"),
                            ("UPPER", "Upper Level (300-400)"),
                            ("GRAD", "Graduate Level (500+)"),
                        ],
                        default="ANY",
                        help_text="Level constraint for qualifying courses",
                        max_length=10,
                        verbose_name="Course Level Constraint",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this requirement is currently in use",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for academic advisors",
                        verbose_name="Administrative Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Academic Requirement",
                "verbose_name_plural": "Academic Requirements",
                "ordering": ["major", "requirement_type", "name"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="RequirementCourse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        blank=True,
                        help_text="Optional role description for this course in the requirement",
                        max_length=100,
                        verbose_name="Course Role",
                    ),
                ),
                (
                    "credits_value",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Override credit value for this course in this requirement (optional)",
                        null=True,
                        verbose_name="Credits Value",
                    ),
                ),
            ],
            options={
                "verbose_name": "Requirement Course",
                "verbose_name_plural": "Requirement Courses",
                "ordering": ["requirement", "course"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="RequirementType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the requirement type (e.g., 'Core Courses', 'Electives')",
                        max_length=100,
                        unique=True,
                        verbose_name="Requirement Type Name",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Short code for the requirement type (e.g., 'CORE', 'ELEC')",
                        max_length=20,
                        unique=True,
                        verbose_name="Requirement Code",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of this requirement type",
                        verbose_name="Description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this requirement type is currently in use",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "display_order",
                    models.PositiveSmallIntegerField(
                        default=100,
                        help_text="Order for displaying requirement types in lists",
                        verbose_name="Display Order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Requirement Type",
                "verbose_name_plural": "Requirement Types",
                "ordering": ["display_order", "name"],
                "permissions": [
                    (
                        "can_approve_academic_affairs",
                        "Can approve academic affairs decisions",
                    )
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StudentCourseOverride",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "override_reason",
                    models.CharField(
                        choices=[
                            ("TRANSFER", "Transfer Course Equivalent"),
                            ("PETITION", "Academic Petition"),
                            ("ADVISOR", "Advisor Recommendation"),
                            ("CURRICULUM", "Curriculum Change"),
                            ("SCHEDULE", "Schedule Conflict"),
                            ("PREREQ", "Prerequisite Waiver"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        max_length=20,
                        verbose_name="Override Reason",
                    ),
                ),
                (
                    "detailed_reason",
                    models.TextField(
                        help_text="Detailed explanation for the override request",
                        verbose_name="Detailed Reason",
                    ),
                ),
                (
                    "approval_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Review"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("EXPIRED", "Expired"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=20,
                        verbose_name="Approval Status",
                    ),
                ),
                (
                    "approval_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Approval Date"),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for rejection if status is rejected",
                        verbose_name="Rejection Reason",
                    ),
                ),
                (
                    "supporting_documentation",
                    models.TextField(
                        blank=True,
                        help_text="Description of supporting documentation provided",
                        verbose_name="Supporting Documentation",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes about this override",
                        verbose_name="Administrative Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Course Override",
                "verbose_name_plural": "Student Course Overrides",
                "ordering": ["student", "effective_term", "original_course"],
                "permissions": [
                    (
                        "can_approve_course_override",
                        "Can approve course override requests",
                    ),
                    (
                        "can_reject_course_override",
                        "Can reject course override requests",
                    ),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StudentDegreeProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "total_requirements",
                    models.PositiveSmallIntegerField(
                        help_text="Total canonical requirements for this major",
                        verbose_name="Total Requirements",
                    ),
                ),
                (
                    "completed_requirements",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Number of requirements completed or satisfied by exception",
                        verbose_name="Completed Requirements",
                    ),
                ),
                (
                    "total_credits_required",
                    models.PositiveSmallIntegerField(
                        help_text="Total credits required for degree completion",
                        verbose_name="Total Credits Required",
                    ),
                ),
                (
                    "credits_completed",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Credits completed through courses and approved exceptions",
                        max_digits=6,
                        verbose_name="Credits Completed",
                    ),
                ),
                (
                    "completion_status",
                    models.CharField(
                        choices=[
                            ("IN_PROGRESS", "In Progress"),
                            ("COMPLETED", "Completed"),
                            ("ON_HOLD", "On Hold"),
                            ("WITHDRAWN", "Withdrawn"),
                        ],
                        default="IN_PROGRESS",
                        max_length=20,
                        verbose_name="Completion Status",
                    ),
                ),
                (
                    "completion_percentage",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Overall degree completion percentage",
                        validators=[django.core.validators.MaxValueValidator(100)],
                        verbose_name="Completion Percentage",
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When progress was last recalculated",
                        verbose_name="Last Updated",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Administrative notes about student progress",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Degree Progress",
                "verbose_name_plural": "Student Degree Progress",
                "ordering": ["student", "major"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StudentRequirementException",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "exception_type",
                    models.CharField(
                        choices=[
                            ("TRANSFER", "Transfer Credit"),
                            ("ABROAD", "Study Abroad"),
                            ("SUBSTITUTION", "Course Substitution"),
                            ("ADMIN", "Administrative Override"),
                            ("EXAM", "Exam Credit (AP, CLEP, etc.)"),
                            ("PORTFOLIO", "Portfolio Credit"),
                            ("WAIVER", "Requirement Waiver"),
                        ],
                        help_text="Type of exception being requested",
                        max_length=20,
                        verbose_name="Exception Type",
                    ),
                ),
                (
                    "is_waived",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this requirement is completely waived",
                        verbose_name="Is Waived",
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        help_text="Detailed justification for this exception",
                        verbose_name="Reason for Exception",
                    ),
                ),
                (
                    "supporting_documentation",
                    models.TextField(
                        blank=True,
                        help_text="Description of supporting documentation provided",
                        verbose_name="Supporting Documentation",
                    ),
                ),
                (
                    "approval_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Review"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("CONDITIONAL", "Conditionally Approved"),
                            ("EXPIRED", "Expired"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=20,
                        verbose_name="Approval Status",
                    ),
                ),
                (
                    "approval_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Approval Date"),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for rejection if status is rejected",
                        verbose_name="Rejection Reason",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes about this exception",
                        verbose_name="Administrative Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Requirement Exception",
                "verbose_name_plural": "Student Requirement Exceptions",
                "ordering": ["student", "canonical_requirement__sequence_number"],
                "permissions": [
                    (
                        "can_approve_requirement_exception",
                        "Can approve requirement exceptions",
                    ),
                    (
                        "can_reject_requirement_exception",
                        "Can reject requirement exceptions",
                    ),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StudentRequirementFulfillment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "fulfillment_source",
                    models.CharField(
                        choices=[
                            ("COURSE", "Course Completion"),
                            ("TRANSFER", "Transfer Credit"),
                            ("OVERRIDE", "Administrative Override"),
                            ("EXAM", "Exam Credit"),
                            ("PORTFOLIO", "Portfolio Credit"),
                        ],
                        default="COURSE",
                        max_length=20,
                        verbose_name="Fulfillment Source",
                    ),
                ),
                (
                    "credits_applied",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Number of credits applied toward this requirement",
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                        verbose_name="Credits Applied",
                    ),
                ),
                (
                    "courses_applied",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Number of courses applied toward this requirement",
                        verbose_name="Courses Applied",
                    ),
                ),
                (
                    "fulfilled_by_override",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this requirement was fulfilled by administrative override",
                        verbose_name="Fulfilled by Override",
                    ),
                ),
                (
                    "override_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for administrative override",
                        verbose_name="Override Reason",
                    ),
                ),
                (
                    "is_fulfilled",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this requirement is completely fulfilled",
                        verbose_name="Is Fulfilled",
                    ),
                ),
                (
                    "fulfillment_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date when requirement was marked as fulfilled",
                        null=True,
                        verbose_name="Fulfillment Date",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this fulfillment",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Requirement Fulfillment",
                "verbose_name_plural": "Student Requirement Fulfillments",
                "ordering": ["student", "requirement"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="TransferCredit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "external_institution",
                    models.CharField(
                        help_text="Name of the institution where credit was earned",
                        max_length=200,
                        verbose_name="External Institution",
                    ),
                ),
                (
                    "external_course_code",
                    models.CharField(
                        help_text="Course code at the external institution",
                        max_length=50,
                        verbose_name="External Course Code",
                    ),
                ),
                (
                    "external_course_title",
                    models.CharField(
                        help_text="Course title at the external institution",
                        max_length=200,
                        verbose_name="External Course Title",
                    ),
                ),
                (
                    "external_credits",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Number of credits from external institution",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.25")),
                            django.core.validators.MaxValueValidator(Decimal("20.0")),
                        ],
                        verbose_name="External Credits",
                    ),
                ),
                (
                    "external_grade",
                    models.CharField(
                        blank=True,
                        help_text="Grade received at external institution",
                        max_length=10,
                        verbose_name="External Grade",
                    ),
                ),
                (
                    "internal_credits",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Number of credits awarded internally",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.25")),
                            django.core.validators.MaxValueValidator(Decimal("20.0")),
                        ],
                        verbose_name="Internal Credits",
                    ),
                ),
                (
                    "credit_type",
                    models.CharField(
                        choices=[
                            ("COURSE", "Course Equivalent"),
                            ("ELECTIVE", "Elective Credit"),
                            ("GEN_ED", "General Education"),
                            ("MAJOR", "Major Credit"),
                        ],
                        default="ELECTIVE",
                        help_text="Type of credit being awarded",
                        max_length=20,
                        verbose_name="Credit Type",
                    ),
                ),
                (
                    "approval_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Review"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("CONDITIONAL", "Conditionally Approved"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=20,
                        verbose_name="Approval Status",
                    ),
                ),
                (
                    "approved_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="Approved At"),
                ),
                (
                    "rejection_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for rejection if status is rejected",
                        verbose_name="Rejection Reason",
                    ),
                ),
                (
                    "documentation_provided",
                    models.BooleanField(
                        default=False,
                        help_text="Whether required documentation has been provided",
                        verbose_name="Documentation Provided",
                    ),
                ),
                (
                    "syllabus_reviewed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether course syllabus has been reviewed",
                        verbose_name="Syllabus Reviewed",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes about this transfer credit",
                        verbose_name="Administrative Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Transfer Credit",
                "verbose_name_plural": "Transfer Credits",
                "ordering": ["student", "external_institution", "external_course_code"],
                "permissions": [
                    (
                        "can_approve_transfer_credit",
                        "Can approve transfer credit requests",
                    ),
                    (
                        "can_reject_transfer_credit",
                        "Can reject transfer credit requests",
                    ),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
    ]
