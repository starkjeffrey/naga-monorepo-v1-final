# Generated by Django 5.2.4 on 2025-07-15 01:23

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("curriculum", "0002_initial"),
        ("enrollment", "0001_initial"),
        ("people", "0001_initial"),
        ("scheduling", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="classheaderenrollment",
            name="class_header",
            field=models.ForeignKey(
                help_text="Scheduled class the student is enrolled in",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="class_header_enrollments",
                to="scheduling.classheader",
                verbose_name="Class",
            ),
        ),
        migrations.AddField(
            model_name="classheaderenrollment",
            name="enrolled_by",
            field=models.ForeignKey(
                help_text="Staff member who processed the enrollment",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="class_enrollments_created",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Enrolled By",
            ),
        ),
        migrations.AddField(
            model_name="classheaderenrollment",
            name="student",
            field=models.ForeignKey(
                help_text="Student enrolled in this class",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="class_header_enrollments",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="classpartenrollment",
            name="class_part",
            field=models.ForeignKey(
                help_text="Specific class component the student is enrolled in",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="class_part_enrollments",
                to="scheduling.classpart",
                verbose_name="Class Part",
            ),
        ),
        migrations.AddField(
            model_name="classpartenrollment",
            name="student",
            field=models.ForeignKey(
                help_text="Student enrolled in this class part",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="class_part_enrollments",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="classsessionexemption",
            name="class_header_enrollment",
            field=models.ForeignKey(
                help_text="The class enrollment this exemption applies to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="session_exemptions",
                to="enrollment.classheaderenrollment",
                verbose_name="Class Header Enrollment",
            ),
        ),
        migrations.AddField(
            model_name="classsessionexemption",
            name="class_session",
            field=models.ForeignKey(
                help_text="Session the student is exempted from",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="session_exemptions",
                to="scheduling.classsession",
                verbose_name="Class Session",
            ),
        ),
        migrations.AddField(
            model_name="classsessionexemption",
            name="exempted_by",
            field=models.ForeignKey(
                help_text="Staff member who approved the exemption",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="session_exemptions_created",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Exempted By",
            ),
        ),
        migrations.AddField(
            model_name="majordeclaration",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                help_text="Staff member who approved the declaration (if required)",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="major_declarations_approved",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Approved By",
            ),
        ),
        migrations.AddField(
            model_name="majordeclaration",
            name="declared_by",
            field=models.ForeignKey(
                blank=True,
                help_text="Staff member who processed the declaration (null for student self-declaration)",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="major_declarations_processed",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Declared By",
            ),
        ),
        migrations.AddField(
            model_name="majordeclaration",
            name="major",
            field=models.ForeignKey(
                help_text="Major or program the student has declared",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="major_declarations",
                to="curriculum.major",
                verbose_name="Declared Major",
            ),
        ),
        migrations.AddField(
            model_name="majordeclaration",
            name="previous_declaration",
            field=models.ForeignKey(
                blank=True,
                help_text="Previous major declaration that this one supersedes",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="superseded_by",
                to="enrollment.majordeclaration",
                verbose_name="Previous Declaration",
            ),
        ),
        migrations.AddField(
            model_name="majordeclaration",
            name="student",
            field=models.ForeignKey(
                help_text="Student making the major declaration",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="major_declarations",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="programenrollment",
            name="end_term",
            field=models.ForeignKey(
                blank=True,
                help_text="Term when enrollment ended (optional)",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="program_enrollments_ending",
                to="curriculum.term",
                verbose_name="End Term",
            ),
        ),
        migrations.AddField(
            model_name="programenrollment",
            name="enrolled_by",
            field=models.ForeignKey(
                blank=True,
                help_text="Staff member who processed the enrollment (null for system-generated)",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="program_enrollments_created",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Enrolled By",
            ),
        ),
        migrations.AddField(
            model_name="programenrollment",
            name="program",
            field=models.ForeignKey(
                help_text="Academic program or major",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="program_enrollments",
                to="curriculum.major",
                verbose_name="Program",
            ),
        ),
        migrations.AddField(
            model_name="programenrollment",
            name="start_term",
            field=models.ForeignKey(
                blank=True,
                help_text="Term when enrollment began (optional for legacy data)",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="program_enrollments_starting",
                to="curriculum.term",
                verbose_name="Start Term",
            ),
        ),
        migrations.AddField(
            model_name="programenrollment",
            name="student",
            field=models.ForeignKey(
                help_text="Student enrolled in this program",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="program_enrollments",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="studentcourseeligibility",
            name="course",
            field=models.ForeignKey(
                help_text="Course for which eligibility is being checked",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="student_eligibilities",
                to="curriculum.course",
                verbose_name="Course",
            ),
        ),
        migrations.AddField(
            model_name="studentcourseeligibility",
            name="missing_prerequisites",
            field=models.ManyToManyField(
                blank=True,
                help_text="Prerequisites the student has not yet completed",
                related_name="blocking_eligibilities",
                to="curriculum.course",
                verbose_name="Missing Prerequisites",
            ),
        ),
        migrations.AddField(
            model_name="studentcourseeligibility",
            name="student",
            field=models.ForeignKey(
                help_text="Student whose eligibility is being tracked",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="course_eligibilities",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="studentcourseeligibility",
            name="term",
            field=models.ForeignKey(
                help_text="Term for which eligibility applies",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="course_eligibilities",
                to="curriculum.term",
                verbose_name="Term",
            ),
        ),
        migrations.AddIndex(
            model_name="classheaderenrollment",
            index=models.Index(fields=["student", "status"], name="enrollment__student_b68873_idx"),
        ),
        migrations.AddIndex(
            model_name="classheaderenrollment",
            index=models.Index(fields=["class_header", "status"], name="enrollment__class_h_0a9de0_idx"),
        ),
        migrations.AddIndex(
            model_name="classheaderenrollment",
            index=models.Index(fields=["enrollment_date"], name="enrollment__enrollm_c92ff7_idx"),
        ),
        migrations.AddIndex(
            model_name="classheaderenrollment",
            index=models.Index(
                fields=["status", "completion_date"],
                name="enrollment__status_fb7b32_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="classheaderenrollment",
            index=models.Index(fields=["status"], name="enrollment_status_idx"),
        ),
        migrations.AddConstraint(
            model_name="classheaderenrollment",
            constraint=models.UniqueConstraint(
                condition=models.Q(("status__in", ["ENROLLED", "ACTIVE"])),
                fields=("student", "class_header"),
                name="unique_active_enrollment_per_class",
            ),
        ),
        migrations.AddConstraint(
            model_name="classheaderenrollment",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("grade_points__isnull", True),
                    models.Q(("grade_points__gte", 0), ("grade_points__lte", 4)),
                    _connector="OR",
                ),
                name="valid_grade_points_range",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="classheaderenrollment",
            unique_together={("student", "class_header")},
        ),
        migrations.AddIndex(
            model_name="classpartenrollment",
            index=models.Index(fields=["student", "is_active"], name="enrollment__student_b10073_idx"),
        ),
        migrations.AddIndex(
            model_name="classpartenrollment",
            index=models.Index(
                fields=["class_part", "is_active"],
                name="enrollment__class_p_ea6953_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="classpartenrollment",
            index=models.Index(fields=["enrollment_date"], name="enrollment__enrollm_d4a3eb_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="classpartenrollment",
            unique_together={("student", "class_part", "is_active")},
        ),
        migrations.AddIndex(
            model_name="classsessionexemption",
            index=models.Index(
                fields=["class_header_enrollment"],
                name="enrollment__class_h_df2cb0_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="classsessionexemption",
            index=models.Index(fields=["class_session"], name="enrollment__class_s_43ca6b_idx"),
        ),
        migrations.AddIndex(
            model_name="classsessionexemption",
            index=models.Index(fields=["exemption_date"], name="enrollment__exempti_58c983_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="classsessionexemption",
            unique_together={("class_header_enrollment", "class_session")},
        ),
        migrations.AddIndex(
            model_name="majordeclaration",
            index=models.Index(
                fields=["student", "is_active", "effective_date"],
                name="enrollment__student_8aa085_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="majordeclaration",
            index=models.Index(fields=["major", "is_active"], name="enrollment__major_i_ed90ef_idx"),
        ),
        migrations.AddIndex(
            model_name="majordeclaration",
            index=models.Index(
                fields=["effective_date", "is_active"],
                name="enrollment__effecti_34daed_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="majordeclaration",
            index=models.Index(fields=["declared_date"], name="enrollment__declare_ec89ed_idx"),
        ),
        migrations.AddIndex(
            model_name="majordeclaration",
            index=models.Index(
                fields=["requires_approval", "approved_by"],
                name="enrollment__require_a100ba_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="majordeclaration",
            unique_together={("student", "effective_date", "is_active")},
        ),
        migrations.AddIndex(
            model_name="programenrollment",
            index=models.Index(fields=["student", "status"], name="enrollment__student_e47ce4_idx"),
        ),
        migrations.AddIndex(
            model_name="programenrollment",
            index=models.Index(
                fields=["program", "enrollment_type"],
                name="enrollment__program_d9f25c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="programenrollment",
            index=models.Index(fields=["start_date", "end_date"], name="enrollment__start_d_6b7a82_idx"),
        ),
        migrations.AddIndex(
            model_name="programenrollment",
            index=models.Index(fields=["start_term", "end_term"], name="enrollment__start_t_e761f9_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="programenrollment",
            unique_together={("student", "program", "start_date")},
        ),
        migrations.AddIndex(
            model_name="studentcourseeligibility",
            index=models.Index(
                fields=["student", "term", "is_eligible"],
                name="enrollment__student_6b2f66_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentcourseeligibility",
            index=models.Index(
                fields=["course", "term", "is_eligible"],
                name="enrollment__course__5b6343_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentcourseeligibility",
            index=models.Index(
                fields=["is_retake", "retry_priority_score"],
                name="enrollment__is_reta_51ff8b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentcourseeligibility",
            index=models.Index(fields=["last_calculated"], name="enrollment__last_ca_3755c8_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="studentcourseeligibility",
            unique_together={("student", "course", "term")},
        ),
    ]
