# Generated by Django 5.2.4 on 2025-07-15 01:23

import datetime
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("curriculum", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="FeeGLMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "fee_type",
                    models.CharField(
                        choices=[
                            ("REGISTRATION", "Registration Fee"),
                            ("APPLICATION", "Application Fee"),
                            ("LATE_PAYMENT", "Late Payment Fee"),
                            ("MATERIAL", "Material Fee"),
                            ("TECHNOLOGY", "Technology Fee"),
                            ("LIBRARY", "Library Fee"),
                            ("STUDENT_SERVICES", "Student Services Fee"),
                            ("GRADUATION", "Graduation Fee"),
                            ("TRANSCRIPT", "Transcript Fee"),
                            ("ID_CARD", "ID Card Fee"),
                            ("PARKING", "Parking Fee"),
                            ("OTHER", "Other Fee"),
                        ],
                        help_text="Type of fee this mapping applies to",
                        max_length=20,
                        verbose_name="Fee Type",
                    ),
                ),
                (
                    "fee_code",
                    models.CharField(
                        help_text="Internal fee code (e.g., 'LT_PLACEMENT')",
                        max_length=50,
                        verbose_name="Fee Code",
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(
                        default=datetime.date.today,
                        help_text="Date this mapping becomes effective",
                        verbose_name="Effective Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Date this mapping expires (null = indefinite)",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fee G/L Mapping",
                "verbose_name_plural": "Fee G/L Mappings",
                "ordering": ["fee_code", "-effective_date"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="FeePricing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the fee",
                        max_length=100,
                        verbose_name="Fee Name",
                    ),
                ),
                (
                    "fee_type",
                    models.CharField(
                        choices=[
                            ("REGISTRATION", "Registration Fee"),
                            ("APPLICATION", "Application Fee"),
                            ("LATE_PAYMENT", "Late Payment Fee"),
                            ("MATERIAL", "Material Fee"),
                            ("TECHNOLOGY", "Technology Fee"),
                            ("LIBRARY", "Library Fee"),
                            ("STUDENT_SERVICES", "Student Services Fee"),
                            ("GRADUATION", "Graduation Fee"),
                            ("TRANSCRIPT", "Transcript Fee"),
                            ("ID_CARD", "ID Card Fee"),
                            ("PARKING", "Parking Fee"),
                            ("OTHER", "Other Fee"),
                        ],
                        help_text="Category of this fee",
                        max_length=20,
                        verbose_name="Fee Type",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Fee amount",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[("USD", "US Dollar")],
                        default="USD",
                        help_text="Currency for this fee",
                        max_length=3,
                        verbose_name="Currency",
                    ),
                ),
                (
                    "is_per_course",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this fee is charged per course",
                        verbose_name="Is Per Course",
                    ),
                ),
                (
                    "is_per_term",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this fee is charged per term",
                        verbose_name="Is Per Term",
                    ),
                ),
                (
                    "is_mandatory",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this fee is mandatory for all students",
                        verbose_name="Is Mandatory",
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(
                        default=datetime.date.today,
                        help_text="Date this fee becomes effective",
                        verbose_name="Effective Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Date this fee expires (null = indefinite)",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of this fee",
                        verbose_name="Description",
                    ),
                ),
            ],
            options={
                "verbose_name": "Fee Pricing",
                "verbose_name_plural": "Fee Pricing",
                "ordering": ["fee_type", "name", "-effective_date"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="GLAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "account_code",
                    models.CharField(
                        help_text="Unique G/L account code (e.g., '4100-LT')",
                        max_length=20,
                        unique=True,
                        verbose_name="Account Code",
                    ),
                ),
                (
                    "account_name",
                    models.CharField(
                        help_text="Descriptive name for this account",
                        max_length=100,
                        verbose_name="Account Name",
                    ),
                ),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("ASSET", "Asset"),
                            ("LIABILITY", "Liability"),
                            ("EQUITY", "Equity"),
                            ("REVENUE", "Revenue"),
                            ("EXPENSE", "Expense"),
                        ],
                        help_text="Primary classification of this account",
                        max_length=20,
                        verbose_name="Account Type",
                    ),
                ),
                (
                    "account_category",
                    models.CharField(
                        choices=[
                            ("CURRENT_ASSET", "Current Asset"),
                            ("FIXED_ASSET", "Fixed Asset"),
                            ("CURRENT_LIABILITY", "Current Liability"),
                            ("LONG_TERM_LIABILITY", "Long-term Liability"),
                            ("OPERATING_REVENUE", "Operating Revenue"),
                            ("NON_OPERATING_REVENUE", "Non-operating Revenue"),
                            ("OPERATING_EXPENSE", "Operating Expense"),
                            ("ADMINISTRATIVE_EXPENSE", "Administrative Expense"),
                        ],
                        help_text="Detailed category for reporting purposes",
                        max_length=30,
                        verbose_name="Account Category",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this account is currently in use",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "requires_department",
                    models.BooleanField(
                        default=False,
                        help_text="Whether transactions to this account require department codes",
                        verbose_name="Requires Department",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of this account's purpose",
                        verbose_name="Description",
                    ),
                ),
            ],
            options={
                "verbose_name": "G/L Account",
                "verbose_name_plural": "G/L Accounts",
                "ordering": ["account_code"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="GLBatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "batch_number",
                    models.CharField(
                        help_text="Unique batch identifier",
                        max_length=50,
                        unique=True,
                        verbose_name="Batch Number",
                    ),
                ),
                (
                    "batch_date",
                    models.DateField(
                        default=datetime.date.today,
                        help_text="Date this batch was created",
                        verbose_name="Batch Date",
                    ),
                ),
                (
                    "accounting_period",
                    models.CharField(
                        db_index=True,
                        help_text="Accounting period for this batch (YYYY-MM)",
                        max_length=7,
                        verbose_name="Accounting Period",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("EXPORTED", "Exported"),
                            ("FAILED", "Failed"),
                            ("PARTIAL", "Partially Exported"),
                        ],
                        default="PENDING",
                        help_text="Current batch status",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "total_entries",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of journal entries in this batch",
                        verbose_name="Total Entries",
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total debit amount in this batch",
                        max_digits=14,
                        verbose_name="Total Amount",
                    ),
                ),
                (
                    "export_file",
                    models.CharField(
                        blank=True,
                        help_text="Path to exported file",
                        max_length=255,
                        verbose_name="Export File",
                    ),
                ),
                (
                    "exported_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this batch was exported",
                        null=True,
                        verbose_name="Exported Date",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error details if export failed",
                        verbose_name="Error Message",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this batch",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "G/L Batch",
                "verbose_name_plural": "G/L Batches",
                "ordering": ["-batch_date", "-batch_number"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "invoice_number",
                    models.CharField(
                        help_text="Unique invoice identifier",
                        max_length=50,
                        unique=True,
                        verbose_name="Invoice Number",
                    ),
                ),
                (
                    "issue_date",
                    models.DateField(
                        default=datetime.date.today,
                        help_text="Date the invoice was issued",
                        verbose_name="Issue Date",
                    ),
                ),
                (
                    "due_date",
                    models.DateField(help_text="Date payment is due", verbose_name="Due Date"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("SENT", "Sent"),
                            ("PAID", "Paid"),
                            ("PARTIALLY_PAID", "Partially Paid"),
                            ("OVERDUE", "Overdue"),
                            ("CANCELLED", "Cancelled"),
                            ("REFUNDED", "Refunded"),
                        ],
                        default="DRAFT",
                        help_text="Current status of this invoice",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "subtotal",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Subtotal before taxes and adjustments",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Subtotal",
                    ),
                ),
                (
                    "tax_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Total tax amount",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Tax Amount",
                    ),
                ),
                (
                    "total_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total amount due",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Total Amount",
                    ),
                ),
                (
                    "paid_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Amount already paid",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Paid Amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[("USD", "US Dollar")],
                        default="USD",
                        help_text="Currency for this invoice",
                        max_length=3,
                        verbose_name="Currency",
                    ),
                ),
                (
                    "version",
                    models.IntegerField(
                        default=0,
                        editable=False,
                        help_text="Version field for optimistic locking",
                        verbose_name="Version",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this invoice",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "sent_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time the invoice was sent to student",
                        null=True,
                        verbose_name="Sent Date",
                    ),
                ),
            ],
            options={
                "verbose_name": "Invoice",
                "verbose_name_plural": "Invoices",
                "ordering": ["-issue_date", "invoice_number"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="InvoiceLineItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "line_item_type",
                    models.CharField(
                        choices=[
                            ("COURSE", "Course Tuition"),
                            ("FEE", "Fee"),
                            ("ADJUSTMENT", "Adjustment"),
                            ("DISCOUNT", "Discount"),
                            ("REFUND", "Refund"),
                        ],
                        help_text="Type of charge",
                        max_length=20,
                        verbose_name="Line Item Type",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="Description of this charge",
                        max_length=200,
                        verbose_name="Description",
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price per unit",
                        max_digits=10,
                        verbose_name="Unit Price",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1.00"),
                        help_text="Quantity or units",
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Quantity",
                    ),
                ),
                (
                    "line_total",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total for this line item",
                        max_digits=10,
                        verbose_name="Line Total",
                    ),
                ),
            ],
            options={
                "verbose_name": "Invoice Line Item",
                "verbose_name_plural": "Invoice Line Items",
                "ordering": ["invoice", "id"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="JournalEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "entry_number",
                    models.CharField(
                        help_text="Unique journal entry number (e.g., 'JE-2025-01-001')",
                        max_length=50,
                        unique=True,
                        verbose_name="Entry Number",
                    ),
                ),
                (
                    "entry_date",
                    models.DateField(
                        help_text="Effective date of this journal entry",
                        verbose_name="Entry Date",
                    ),
                ),
                (
                    "accounting_period",
                    models.CharField(
                        db_index=True,
                        help_text="Accounting period (YYYY-MM format)",
                        max_length=7,
                        verbose_name="Accounting Period",
                    ),
                ),
                (
                    "entry_type",
                    models.CharField(
                        choices=[
                            ("REVENUE", "Revenue Receipt"),
                            ("PAYMENT", "Payment Receipt"),
                            ("REFUND", "Refund Issued"),
                            ("ADJUSTMENT", "Adjustment Entry"),
                            ("TRANSFER", "Transfer Entry"),
                            ("REVERSAL", "Reversal Entry"),
                            ("CLOSING", "Closing Entry"),
                        ],
                        help_text="Type of journal entry",
                        max_length=20,
                        verbose_name="Entry Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PENDING_REVIEW", "Pending Review"),
                            ("APPROVED", "Approved"),
                            ("POSTED", "Posted to G/L"),
                            ("REVERSED", "Reversed"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="DRAFT",
                        help_text="Current status of this entry",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="Brief description of this journal entry",
                        max_length=200,
                        verbose_name="Description",
                    ),
                ),
                (
                    "reference_number",
                    models.CharField(
                        blank=True,
                        help_text="External reference number if applicable",
                        max_length=50,
                        verbose_name="Reference Number",
                    ),
                ),
                (
                    "total_debits",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Sum of all debit amounts",
                        max_digits=12,
                        verbose_name="Total Debits",
                    ),
                ),
                (
                    "total_credits",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Sum of all credit amounts",
                        max_digits=12,
                        verbose_name="Total Credits",
                    ),
                ),
                (
                    "approved_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this entry was approved",
                        null=True,
                        verbose_name="Approved Date",
                    ),
                ),
                (
                    "posted_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this entry was posted to G/L",
                        null=True,
                        verbose_name="Posted Date",
                    ),
                ),
                (
                    "source_system",
                    models.CharField(
                        default="NAGA_SIS",
                        help_text="System that generated this entry",
                        max_length=50,
                        verbose_name="Source System",
                    ),
                ),
                (
                    "batch_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Batch identifier for grouped processing",
                        max_length=50,
                        verbose_name="Batch ID",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes or comments",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Journal Entry",
                "verbose_name_plural": "Journal Entries",
                "ordering": ["-entry_date", "-entry_number"],
                "permissions": [
                    ("can_approve_journal_entries", "Can approve journal entries"),
                    ("can_post_journal_entries", "Can post journal entries to G/L"),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="JournalEntryLine",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "line_number",
                    models.PositiveSmallIntegerField(
                        help_text="Sequential line number within the entry",
                        verbose_name="Line Number",
                    ),
                ),
                (
                    "debit_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Debit amount (increases assets/expenses)",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Debit Amount",
                    ),
                ),
                (
                    "credit_amount",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Credit amount (increases liabilities/revenue)",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Credit Amount",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="Description of this line item",
                        max_length=200,
                        verbose_name="Line Description",
                    ),
                ),
                (
                    "reference_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of reference (e.g., 'INVOICE', 'PAYMENT')",
                        max_length=50,
                        verbose_name="Reference Type",
                    ),
                ),
                (
                    "reference_id",
                    models.CharField(
                        blank=True,
                        help_text="ID of referenced object",
                        max_length=50,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "department_code",
                    models.CharField(
                        blank=True,
                        help_text="Department code for cost allocation",
                        max_length=20,
                        verbose_name="Department Code",
                    ),
                ),
                (
                    "project_code",
                    models.CharField(
                        blank=True,
                        help_text="Project code for tracking",
                        max_length=20,
                        verbose_name="Project Code",
                    ),
                ),
            ],
            options={
                "verbose_name": "Journal Entry Line",
                "verbose_name_plural": "Journal Entry Lines",
                "ordering": ["journal_entry", "line_number"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "payment_reference",
                    models.CharField(
                        help_text="Unique payment reference number",
                        max_length=100,
                        unique=True,
                        verbose_name="Payment Reference",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount of this payment",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Payment Amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[("USD", "US Dollar")],
                        default="USD",
                        help_text="Currency of this payment",
                        max_length=3,
                        verbose_name="Currency",
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("CASH", "Cash"),
                            ("BANK_TRANSFER", "Bank Transfer"),
                            ("CREDIT_CARD", "Credit Card"),
                            ("DEBIT_CARD", "Debit Card"),
                            ("CHECK", "Check"),
                            ("MONEY_ORDER", "Money Order"),
                            ("ONLINE", "Online Payment"),
                            ("MOBILE_PAYMENT", "Mobile Payment"),
                            ("OTHER", "Other"),
                        ],
                        help_text="Method used for payment",
                        max_length=20,
                        verbose_name="Payment Method",
                    ),
                ),
                (
                    "payment_date",
                    models.DateField(
                        default=datetime.date.today,
                        help_text="Date payment was made",
                        verbose_name="Payment Date",
                    ),
                ),
                (
                    "processed_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Date and time payment was processed",
                        verbose_name="Processed Date",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                            ("REFUNDED", "Refunded"),
                        ],
                        default="PENDING",
                        help_text="Current status of this payment",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "payer_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the person who made the payment",
                        max_length=200,
                        verbose_name="Payer Name",
                    ),
                ),
                (
                    "external_reference",
                    models.CharField(
                        blank=True,
                        help_text="External payment reference (bank ref, transaction ID, etc.)",
                        max_length=200,
                        verbose_name="External Reference",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this payment",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "idempotency_key",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Unique key to prevent duplicate payments",
                        max_length=255,
                        null=True,
                        unique=True,
                        verbose_name="Idempotency Key",
                    ),
                ),
            ],
            options={
                "verbose_name": "Payment",
                "verbose_name_plural": "Payments",
                "ordering": ["-processed_date"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="PricingTier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "tier_name",
                    models.CharField(
                        help_text="e.g., 'Reading class (1-2 students)', 'COMEX-488 Special', 'Default Course'",
                        max_length=100,
                        verbose_name="Tier Name",
                    ),
                ),
                (
                    "pricing_type",
                    models.CharField(
                        choices=[
                            ("DEFAULT", "Default Price (regular courses)"),
                            ("READING", "Reading Class (tiered by enrollment)"),
                            ("SENIOR", "Senior Project (tiered by enrollment)"),
                            ("SPECIAL", "Special Price (fixed for specific courses)"),
                        ],
                        help_text="Type of pricing: DEFAULT, READING_CLASS, SENIOR_PROJECT, or SPECIAL",
                        max_length=15,
                        verbose_name="Pricing Type",
                    ),
                ),
                (
                    "cycle",
                    models.CharField(
                        choices=[
                            ("BA", "Bachelor's Program"),
                            ("MA", "Master's Program"),
                            ("LANG", "Language Program"),
                        ],
                        default="BA",
                        help_text="Academic program cycle this pricing applies to (BA, MA, Language)",
                        max_length=10,
                        verbose_name="Academic Cycle",
                    ),
                ),
                (
                    "student_min",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Minimum students for this tier (tiered pricing only)",
                        null=True,
                        verbose_name="Minimum Students",
                    ),
                ),
                (
                    "student_max",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum students for this tier (tiered pricing only)",
                        null=True,
                        verbose_name="Maximum Students",
                    ),
                ),
                (
                    "local_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price for Cambodian citizens (USD)",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Local Price",
                    ),
                ),
                (
                    "foreign_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price for foreign students (USD)",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Foreign Price",
                    ),
                ),
                (
                    "advisor_payment",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Payment to advisor (senior projects only)",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Advisor Payment",
                    ),
                ),
                (
                    "committee_payment",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Payment to committee (senior projects only)",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Committee Payment",
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(
                        default=datetime.date.today,
                        help_text="Date this pricing becomes effective",
                        verbose_name="Effective Date",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this pricing tier is currently available",
                        verbose_name="Is Active",
                    ),
                ),
            ],
            options={
                "verbose_name": "Pricing Tier",
                "verbose_name_plural": "Pricing Tiers",
                "ordering": ["cycle", "pricing_type", "tier_name"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="TermPricingAdjustment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "adjustment_type",
                    models.CharField(
                        choices=[
                            ("DISCOUNT", "Discount"),
                            ("SURCHARGE", "Surcharge"),
                            ("OVERRIDE", "Price Override"),
                            ("PROMOTION", "Promotional Price"),
                        ],
                        help_text="Type of pricing adjustment",
                        max_length=20,
                        verbose_name="Adjustment Type",
                    ),
                ),
                (
                    "adjustment_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Amount to adjust (positive for surcharge, negative for discount)",
                        max_digits=10,
                        verbose_name="Adjustment Amount",
                    ),
                ),
                (
                    "adjustment_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage adjustment (alternative to fixed amount)",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(-100),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Adjustment Percentage",
                    ),
                ),
                (
                    "final_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Final price after adjustment (calculated automatically)",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Final Price",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        help_text="Reason for this adjustment",
                        max_length=200,
                        verbose_name="Reason",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this adjustment is currently active",
                        verbose_name="Is Active",
                    ),
                ),
            ],
            options={
                "verbose_name": "Term Pricing Adjustment",
                "verbose_name_plural": "Term Pricing Adjustments",
                "ordering": ["term", "course_pricing"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="CoursePricing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "domestic_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price for domestic/Cambodian students",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Domestic Price",
                    ),
                ),
                (
                    "foreign_price",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Price for foreign/international students",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Foreign Price",
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Use this pricing when no specific tier is assigned to a course",
                        verbose_name="Is Default",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[("USD", "US Dollar")],
                        default="USD",
                        help_text="Currency for this price",
                        max_length=3,
                        verbose_name="Currency",
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(
                        default=datetime.date.today,
                        help_text="Date this pricing becomes effective",
                        verbose_name="Effective Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Date this pricing expires (null = indefinite)",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this pricing",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        help_text="Course this pricing applies to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="course_pricing",
                        to="curriculum.course",
                        verbose_name="Course",
                    ),
                ),
            ],
            options={
                "verbose_name": "Course Pricing",
                "verbose_name_plural": "Course Pricing",
                "ordering": ["course", "pricing_tier", "-effective_date"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="FinancialTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "transaction_id",
                    models.CharField(
                        help_text="Unique transaction identifier",
                        max_length=100,
                        unique=True,
                        verbose_name="Transaction ID",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("INVOICE_CREATED", "Invoice Created"),
                            ("INVOICE_SENT", "Invoice Sent"),
                            ("INVOICE_MODIFIED", "Invoice Modified"),
                            ("INVOICE_CANCELLED", "Invoice Cancelled"),
                            ("PAYMENT_RECEIVED", "Payment Received"),
                            ("PAYMENT_REFUNDED", "Payment Refunded"),
                            ("ADJUSTMENT_APPLIED", "Adjustment Applied"),
                            ("DISCOUNT_APPLIED", "Discount Applied"),
                            ("FEE_WAIVED", "Fee Waived"),
                            ("PRICE_CHANGED", "Price Changed"),
                        ],
                        help_text="Type of financial transaction",
                        max_length=30,
                        verbose_name="Transaction Type",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Transaction amount (positive for charges, negative for credits)",
                        max_digits=10,
                        verbose_name="Amount",
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[("USD", "US Dollar")],
                        default="USD",
                        help_text="Currency for this transaction",
                        max_length=3,
                        verbose_name="Currency",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="Description of the transaction",
                        max_length=300,
                        verbose_name="Description",
                    ),
                ),
                (
                    "transaction_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Date and time of the transaction",
                        verbose_name="Transaction Date",
                    ),
                ),
                (
                    "reference_data",
                    models.JSONField(
                        default=dict,
                        help_text="Additional reference data for this transaction",
                        verbose_name="Reference Data",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        help_text="User who processed this transaction",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="financial_transactions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Processed By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Financial Transaction",
                "verbose_name_plural": "Financial Transactions",
                "ordering": ["-transaction_date"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
    ]
