# Generated by Django 5.2.4 on 2025-07-15 01:23

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("curriculum", "0002_initial"),
        ("enrollment", "0002_initial"),
        ("finance", "0001_initial"),
        ("people", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="financialtransaction",
            name="student",
            field=models.ForeignKey(
                help_text="Student involved in this transaction",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="financial_transactions",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="glaccount",
            name="parent_account",
            field=models.ForeignKey(
                blank=True,
                help_text="Parent account for hierarchical reporting",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="sub_accounts",
                to="finance.glaccount",
                verbose_name="Parent Account",
            ),
        ),
        migrations.AddField(
            model_name="feeglmapping",
            name="receivable_account",
            field=models.ForeignKey(
                blank=True,
                help_text="G/L account for unpaid fees (optional)",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="fee_receivable_mappings",
                to="finance.glaccount",
                verbose_name="Receivable Account",
            ),
        ),
        migrations.AddField(
            model_name="feeglmapping",
            name="revenue_account",
            field=models.ForeignKey(
                help_text="G/L account for recording fee revenue",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="fee_revenue_mappings",
                to="finance.glaccount",
                verbose_name="Revenue Account",
            ),
        ),
        migrations.AddField(
            model_name="glbatch",
            name="exported_by",
            field=models.ForeignKey(
                blank=True,
                help_text="User who exported this batch",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="gl_batches_exported",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Exported By",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="student",
            field=models.ForeignKey(
                help_text="Student this invoice is for",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="invoices",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="term",
            field=models.ForeignKey(
                help_text="Academic term this invoice covers",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="invoices",
                to="curriculum.term",
                verbose_name="Term",
            ),
        ),
        migrations.AddField(
            model_name="financialtransaction",
            name="invoice",
            field=models.ForeignKey(
                blank=True,
                help_text="Related invoice (if applicable)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="financial_transactions",
                to="finance.invoice",
                verbose_name="Invoice",
            ),
        ),
        migrations.AddField(
            model_name="invoicelineitem",
            name="enrollment",
            field=models.ForeignKey(
                blank=True,
                help_text="Class enrollment this line item is for (if applicable)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="invoice_line_items",
                to="enrollment.classheaderenrollment",
                verbose_name="Enrollment",
            ),
        ),
        migrations.AddField(
            model_name="invoicelineitem",
            name="fee_pricing",
            field=models.ForeignKey(
                blank=True,
                help_text="Fee pricing this line item is based on (if applicable)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="invoice_line_items",
                to="finance.feepricing",
                verbose_name="Fee Pricing",
            ),
        ),
        migrations.AddField(
            model_name="invoicelineitem",
            name="invoice",
            field=models.ForeignKey(
                help_text="Invoice this line item belongs to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="line_items",
                to="finance.invoice",
                verbose_name="Invoice",
            ),
        ),
        migrations.AddField(
            model_name="journalentry",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                help_text="User who approved this entry",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="journal_entries_approved",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Approved By",
            ),
        ),
        migrations.AddField(
            model_name="journalentry",
            name="prepared_by",
            field=models.ForeignKey(
                help_text="User who prepared this entry",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="journal_entries_prepared",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Prepared By",
            ),
        ),
        migrations.AddField(
            model_name="journalentry",
            name="reverses_entry",
            field=models.ForeignKey(
                blank=True,
                help_text="Original entry being reversed",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="reversal_entries",
                to="finance.journalentry",
                verbose_name="Reverses Entry",
            ),
        ),
        migrations.AddField(
            model_name="journalentryline",
            name="gl_account",
            field=models.ForeignKey(
                help_text="General ledger account",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="journal_lines",
                to="finance.glaccount",
                verbose_name="G/L Account",
            ),
        ),
        migrations.AddField(
            model_name="journalentryline",
            name="journal_entry",
            field=models.ForeignKey(
                help_text="Parent journal entry",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="line_items",
                to="finance.journalentry",
                verbose_name="Journal Entry",
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="invoice",
            field=models.ForeignKey(
                help_text="Invoice this payment is for",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="payments",
                to="finance.invoice",
                verbose_name="Invoice",
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="processed_by",
            field=models.ForeignKey(
                help_text="User who processed this payment",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="processed_payments",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Processed By",
            ),
        ),
        migrations.AddField(
            model_name="financialtransaction",
            name="payment",
            field=models.ForeignKey(
                blank=True,
                help_text="Related payment (if applicable)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="financial_transactions",
                to="finance.payment",
                verbose_name="Payment",
            ),
        ),
        migrations.AddField(
            model_name="pricingtier",
            name="effective_term",
            field=models.ForeignKey(
                blank=True,
                help_text="Term when this pricing becomes effective",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="curriculum.term",
                verbose_name="Effective Term",
            ),
        ),
        migrations.AddField(
            model_name="feepricing",
            name="pricing_tier",
            field=models.ForeignKey(
                blank=True,
                help_text="Pricing tier (null = applies to all tiers)",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="fee_pricing",
                to="finance.pricingtier",
                verbose_name="Pricing Tier",
            ),
        ),
        migrations.AddField(
            model_name="coursepricing",
            name="pricing_tier",
            field=models.ForeignKey(
                help_text="Pricing tier this rate applies to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="course_pricing",
                to="finance.pricingtier",
                verbose_name="Pricing Tier",
            ),
        ),
        migrations.AddField(
            model_name="termpricingadjustment",
            name="course_pricing",
            field=models.ForeignKey(
                help_text="Base course pricing to adjust",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="term_adjustments",
                to="finance.coursepricing",
                verbose_name="Course Pricing",
            ),
        ),
        migrations.AddField(
            model_name="termpricingadjustment",
            name="term",
            field=models.ForeignKey(
                help_text="Term this adjustment applies to",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="pricing_adjustments",
                to="curriculum.term",
                verbose_name="Term",
            ),
        ),
        migrations.AddIndex(
            model_name="glaccount",
            index=models.Index(
                fields=["account_type", "account_category"],
                name="finance_gla_account_05e50a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="glaccount",
            index=models.Index(fields=["is_active"], name="finance_gla_is_acti_18d13d_idx"),
        ),
        migrations.AddIndex(
            model_name="glaccount",
            index=models.Index(fields=["parent_account"], name="finance_gla_parent__3ed03a_idx"),
        ),
        migrations.AddIndex(
            model_name="feeglmapping",
            index=models.Index(
                fields=["fee_code", "effective_date"],
                name="finance_fee_fee_cod_03ce77_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="feeglmapping",
            index=models.Index(fields=["fee_type"], name="finance_fee_fee_typ_6f2722_idx"),
        ),
        migrations.AddIndex(
            model_name="feeglmapping",
            index=models.Index(fields=["revenue_account"], name="finance_fee_revenue_0de016_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="feeglmapping",
            unique_together={("fee_code", "effective_date")},
        ),
        migrations.AddIndex(
            model_name="glbatch",
            index=models.Index(
                fields=["accounting_period", "status"],
                name="finance_glb_account_bedc61_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="glbatch",
            index=models.Index(fields=["status", "batch_date"], name="finance_glb_status_5f14c0_idx"),
        ),
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(fields=["student", "-issue_date"], name="finance_inv_student_9f0a3a_idx"),
        ),
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(fields=["status", "due_date"], name="finance_inv_status_0e2dc8_idx"),
        ),
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(fields=["term", "status"], name="finance_inv_term_id_c5839f_idx"),
        ),
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(fields=["invoice_number"], name="finance_inv_invoice_89da8a_idx"),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                condition=models.Q(("paid_amount__lte", models.F("total_amount"))),
                name="paid_amount_not_exceed_total",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                condition=models.Q(("paid_amount__gte", 0)),
                name="paid_amount_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                condition=models.Q(("total_amount__gte", 0)),
                name="total_amount_non_negative",
            ),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(condition=models.Q(("subtotal__gte", 0)), name="subtotal_non_negative"),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                condition=models.Q(("due_date__gt", models.F("issue_date"))),
                name="due_date_after_issue_date",
            ),
        ),
        migrations.AddIndex(
            model_name="invoicelineitem",
            index=models.Index(
                fields=["invoice", "line_item_type"],
                name="finance_inv_invoice_9f0f79_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="invoicelineitem",
            index=models.Index(fields=["enrollment"], name="finance_inv_enrollm_ebdee6_idx"),
        ),
        migrations.AddIndex(
            model_name="journalentry",
            index=models.Index(
                fields=["accounting_period", "status"],
                name="finance_jou_account_f55e96_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="journalentry",
            index=models.Index(
                fields=["entry_type", "entry_date"],
                name="finance_jou_entry_t_b520cc_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="journalentry",
            index=models.Index(fields=["batch_id"], name="finance_jou_batch_i_ca5e0c_idx"),
        ),
        migrations.AddIndex(
            model_name="journalentry",
            index=models.Index(fields=["status", "posted_date"], name="finance_jou_status_377fc7_idx"),
        ),
        migrations.AddIndex(
            model_name="journalentryline",
            index=models.Index(
                fields=["gl_account", "journal_entry"],
                name="finance_jou_gl_acco_7b3626_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="journalentryline",
            index=models.Index(
                fields=["reference_type", "reference_id"],
                name="finance_jou_referen_405569_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="journalentryline",
            unique_together={("journal_entry", "line_number")},
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["invoice", "-payment_date"],
                name="finance_pay_invoice_01b027_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["status", "-processed_date"],
                name="finance_pay_status_d78b79_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["payment_method", "-payment_date"],
                name="finance_pay_payment_782a4d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(fields=["payment_reference"], name="finance_pay_payment_9b4d4f_idx"),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(fields=["idempotency_key"], name="finance_pay_idempot_dc5d1a_idx"),
        ),
        migrations.AddConstraint(
            model_name="payment",
            constraint=models.CheckConstraint(
                condition=models.Q(("amount__gt", 0), ("status", "REFUNDED"), _connector="OR"),
                name="payment_amount_positive_or_refund",
            ),
        ),
        migrations.AddConstraint(
            model_name="payment",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("external_reference__isnull", False),
                    models.Q(("external_reference", ""), _negated=True),
                ),
                fields=("external_reference", "payment_method"),
                name="unique_external_payment_reference",
            ),
        ),
        migrations.AddIndex(
            model_name="financialtransaction",
            index=models.Index(
                fields=["student", "-transaction_date"],
                name="finance_fin_student_b0c48d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="financialtransaction",
            index=models.Index(
                fields=["transaction_type", "-transaction_date"],
                name="finance_fin_transac_44349a_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="financialtransaction",
            index=models.Index(
                fields=["invoice", "-transaction_date"],
                name="finance_fin_invoice_79a048_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="financialtransaction",
            index=models.Index(fields=["transaction_id"], name="finance_fin_transac_d81d7d_idx"),
        ),
        migrations.AddIndex(
            model_name="pricingtier",
            index=models.Index(
                fields=["is_active", "pricing_type", "cycle"],
                name="finance_pri_is_acti_daa192_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="pricingtier",
            index=models.Index(
                fields=["effective_date", "is_active"],
                name="finance_pri_effecti_95975c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="pricingtier",
            index=models.Index(
                fields=["pricing_type", "student_min", "student_max"],
                name="finance_pri_pricing_a39eb1_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="pricingtier",
            index=models.Index(fields=["cycle", "pricing_type"], name="finance_pri_cycle_f452e8_idx"),
        ),
        migrations.AddConstraint(
            model_name="pricingtier",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("student_min__lte", models.F("student_max")),
                    ("student_min__isnull", True),
                    ("student_max__isnull", True),
                    _connector="OR",
                ),
                name="student_range_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="pricingtier",
            constraint=models.CheckConstraint(
                condition=models.Q(("local_price__gte", 0)), name="local_price_positive"
            ),
        ),
        migrations.AddConstraint(
            model_name="pricingtier",
            constraint=models.CheckConstraint(
                condition=models.Q(("foreign_price__gte", 0)),
                name="foreign_price_positive",
            ),
        ),
        migrations.AddIndex(
            model_name="feepricing",
            index=models.Index(
                fields=["fee_type", "is_mandatory"],
                name="finance_fee_fee_typ_2878f7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="feepricing",
            index=models.Index(
                fields=["effective_date", "end_date"],
                name="finance_fee_effecti_eb2c66_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="feepricing",
            index=models.Index(fields=["pricing_tier"], name="finance_fee_pricing_34f0ed_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="feepricing",
            unique_together={("name", "fee_type", "pricing_tier", "effective_date")},
        ),
        migrations.AddIndex(
            model_name="coursepricing",
            index=models.Index(
                fields=["course", "pricing_tier", "effective_date"],
                name="finance_cou_course__c9d612_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="coursepricing",
            index=models.Index(
                fields=["effective_date", "end_date"],
                name="finance_cou_effecti_3d99e9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="coursepricing",
            index=models.Index(fields=["currency"], name="finance_cou_currenc_66934f_idx"),
        ),
        migrations.AddIndex(
            model_name="coursepricing",
            index=models.Index(fields=["is_default"], name="finance_cou_is_defa_5c5d2f_idx"),
        ),
        migrations.AddConstraint(
            model_name="coursepricing",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_default", True)),
                fields=("course", "pricing_tier"),
                name="unique_default_per_course_tier",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="coursepricing",
            unique_together={("course", "pricing_tier", "effective_date")},
        ),
        migrations.AddIndex(
            model_name="termpricingadjustment",
            index=models.Index(fields=["term", "is_active"], name="finance_ter_term_id_be5b05_idx"),
        ),
        migrations.AddIndex(
            model_name="termpricingadjustment",
            index=models.Index(fields=["adjustment_type"], name="finance_ter_adjustm_4a073a_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="termpricingadjustment",
            unique_together={("term", "course_pricing")},
        ),
    ]
