# Generated by Django 5.2.4 on 2025-08-10 22:16

import django.db.models.deletion
import django.db.models.manager
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("level_testing", "0005_add_english_self_assessment_and_update_fields"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="potentialstudent",
            name="english_level_self_assessment",
        ),
        migrations.AddField(
            model_name="potentialstudent",
            name="last_english_level",
            field=models.CharField(
                blank=True,
                help_text="Previous English level achieved",
                max_length=50,
                verbose_name="Last English Level",
            ),
        ),
        migrations.AddField(
            model_name="potentialstudent",
            name="last_english_textbook",
            field=models.CharField(
                blank=True,
                help_text="Most recent English textbook series",
                max_length=100,
                verbose_name="Last Textbook Used",
            ),
        ),
        migrations.AlterField(
            model_name="potentialstudent",
            name="last_english_school",
            field=models.CharField(
                blank=True,
                help_text="Previous English language institution",
                max_length=100,
                verbose_name="Last English School",
            ),
        ),
        migrations.AlterField(
            model_name="potentialstudent",
            name="last_english_study_period",
            field=models.CharField(
                blank=True,
                choices=[
                    ("studying_now", "Studying now in school"),
                    ("never_studied", "Never studied"),
                    ("3_months", "3 months ago"),
                    ("6_months", "6 months ago"),
                    ("over_1_year", "Over 1 year ago"),
                ],
                help_text="When you last studied English formally",
                max_length=20,
                null=True,
                verbose_name="When Did You Last Study English",
            ),
        ),
        migrations.AlterField(
            model_name="potentialstudent",
            name="preferred_gender",
            field=models.CharField(
                choices=[("M", "Male"), ("F", "Female"), ("N", "Non-Binary/Other"), ("X", "Prefer not to say")],
                help_text="Gender identity preference",
                max_length=1,
                verbose_name="Preferred Gender",
            ),
        ),
        migrations.AlterField(
            model_name="potentialstudent",
            name="preferred_time_slot",
            field=models.CharField(
                choices=[
                    ("MORNING", "Morning (7:00 AM - 11:00 AM)"),
                    ("AFTERNOON", "Afternoon (1:00 PM - 5:00 PM)"),
                    ("EVENING", "Evening (5:30 PM - 9:30 PM)"),
                    ("WEEKEND", "Weekend (Saturday/Sunday)"),
                    ("FLEXIBLE", "Flexible Schedule"),
                ],
                help_text="Preferred study schedule",
                max_length=20,
                verbose_name="Preferred Time Slot",
            ),
        ),
        migrations.CreateModel(
            name="TestCompletion",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "internal_code",
                    models.CharField(
                        db_index=True,
                        help_text="7-digit code with Luhn check digit for cross-app linking",
                        max_length=7,
                        unique=True,
                        verbose_name="Internal Code",
                    ),
                ),
                (
                    "qr_code_data",
                    models.JSONField(
                        default=dict,
                        help_text="Complete QR code payload including URL and metadata",
                        verbose_name="QR Code Data",
                    ),
                ),
                (
                    "slip_printed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the completion slip was printed",
                        null=True,
                        verbose_name="Slip Printed At",
                    ),
                ),
                (
                    "is_payment_linked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this code has been linked to a payment",
                        verbose_name="Payment Linked",
                    ),
                ),
                (
                    "is_telegram_linked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether student has registered Telegram via this code",
                        verbose_name="Telegram Linked",
                    ),
                ),
                (
                    "payment_transaction_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Link to finance app transaction record",
                        null=True,
                        verbose_name="Payment Transaction ID",
                    ),
                ),
                (
                    "telegram_data",
                    models.JSONField(
                        default=dict,
                        help_text="Telegram username, phone, and registration details",
                        verbose_name="Telegram Data",
                    ),
                ),
                (
                    "completion_notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about test completion or code usage",
                        verbose_name="Completion Notes",
                    ),
                ),
                (
                    "test_attempt",
                    models.OneToOneField(
                        help_text="The test attempt this completion record represents",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="completion",
                        to="level_testing.testattempt",
                        verbose_name="Test Attempt",
                    ),
                ),
            ],
            options={
                "verbose_name": "Test Completion",
                "verbose_name_plural": "Test Completions",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["internal_code"], name="level_testi_interna_59c391_idx"),
                    models.Index(
                        fields=["is_payment_linked", "is_telegram_linked"], name="level_testi_is_paym_d57169_idx"
                    ),
                    models.Index(fields=["created_at"], name="level_testi_created_23fef4_idx"),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
    ]
