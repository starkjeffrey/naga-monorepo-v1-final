# Generated by Django 5.2.4 on 2025-07-15 01:23

import datetime
import uuid

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import django_countries.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TeacherLeaveRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "leave_date",
                    models.DateField(
                        help_text="Date when teacher will be absent",
                        verbose_name="Leave Date",
                    ),
                ),
                (
                    "leave_type",
                    models.CharField(
                        choices=[
                            ("SICK", "Sick Leave"),
                            ("PERSONAL", "Personal Leave"),
                            ("EMERGENCY", "Emergency"),
                            ("PROFESSIONAL", "Professional Development"),
                            ("FAMILY", "Family Emergency"),
                            ("MEDICAL", "Medical Appointment"),
                            ("OTHER", "Other"),
                        ],
                        default="SICK",
                        help_text="Type of leave being requested",
                        max_length=15,
                        verbose_name="Leave Type",
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        help_text="Detailed reason for leave request",
                        verbose_name="Reason",
                    ),
                ),
                (
                    "is_emergency",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is an emergency/last-minute request",
                        verbose_name="Is Emergency",
                    ),
                ),
                (
                    "substitute_confirmed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether substitute teacher has confirmed availability",
                        verbose_name="Substitute Confirmed",
                    ),
                ),
                (
                    "substitute_assigned_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When substitute was assigned",
                        null=True,
                        verbose_name="Substitute Assigned At",
                    ),
                ),
                (
                    "approval_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Approval"),
                            ("APPROVED", "Approved"),
                            ("DENIED", "Denied"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        db_index=True,
                        default="PENDING",
                        max_length=15,
                        verbose_name="Approval Status",
                    ),
                ),
                (
                    "approved_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="Approved At"),
                ),
                (
                    "denial_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for denial if status is denied",
                        verbose_name="Denial Reason",
                    ),
                ),
                (
                    "notification_sent",
                    models.BooleanField(
                        default=False,
                        help_text="Whether department has been notified",
                        verbose_name="Notification Sent",
                    ),
                ),
                (
                    "substitute_found",
                    models.BooleanField(
                        default=False,
                        help_text="Whether a substitute has been secured",
                        verbose_name="Substitute Found",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes about this leave request",
                        verbose_name="Administrative Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Teacher Leave Request",
                "verbose_name_plural": "Teacher Leave Requests",
                "ordering": ["-leave_date", "-created_at"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="TeacherProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "terminal_degree",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BA/BSc", "Bachelor's Degree"),
                            ("MA/MSc/JD", "Master's Degree"),
                            ("PHD", "Doctorate"),
                            ("OTH", "Other"),
                        ],
                        default="OTH",
                        max_length=50,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("SUSPENDED", "Suspended"),
                            ("ON_LEAVE", "On Leave"),
                        ],
                        db_index=True,
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        default=datetime.date.today,
                        help_text="Date when employment started",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when employment ended (if applicable)",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
            ],
            options={
                "verbose_name": "Teacher Profile",
                "verbose_name_plural": "Teacher Profiles",
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "unique_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "family_name",
                    models.CharField(max_length=255, verbose_name="Family Name"),
                ),
                (
                    "personal_name",
                    models.CharField(max_length=255, verbose_name="Personal Name"),
                ),
                (
                    "full_name",
                    models.CharField(blank=True, max_length=255, verbose_name="Full Name"),
                ),
                (
                    "khmer_name",
                    models.CharField(blank=True, max_length=255, verbose_name="Khmer Name"),
                ),
                (
                    "preferred_gender",
                    models.CharField(
                        choices=[
                            ("M", "Male"),
                            ("F", "Female"),
                            ("N", "Non-Binary/Other"),
                            ("X", "Prefer not to say"),
                        ],
                        default="X",
                        max_length=1,
                        verbose_name="Preferred Gender",
                    ),
                ),
                (
                    "use_legal_name_for_documents",
                    models.BooleanField(
                        default=False,
                        help_text="Use alternate (legal) name instead of preferred name on official documents",
                        verbose_name="Use Legal Name for Documents",
                    ),
                ),
                (
                    "alternate_family_name",
                    models.CharField(
                        blank=True,
                        help_text="Family name to be used for official documents",
                        max_length=255,
                        verbose_name="Legal Family Name",
                    ),
                ),
                (
                    "alternate_personal_name",
                    models.CharField(
                        blank=True,
                        help_text="Personal name to be used for official documents",
                        max_length=255,
                        verbose_name="Legal Personal Name",
                    ),
                ),
                (
                    "alternate_khmer_name",
                    models.CharField(
                        blank=True,
                        help_text="Khmer name to be used for official documents",
                        max_length=255,
                        verbose_name="Legal Khmer Name",
                    ),
                ),
                (
                    "alternate_gender",
                    models.CharField(
                        choices=[
                            ("M", "Male"),
                            ("F", "Female"),
                            ("N", "Non-Binary/Other"),
                            ("X", "Prefer not to say"),
                        ],
                        default="X",
                        help_text="Gender to be used on official documents",
                        max_length=1,
                        verbose_name="Legal Gender",
                    ),
                ),
                (
                    "photo",
                    models.ImageField(blank=True, null=True, upload_to="photos/", verbose_name="Photo"),
                ),
                (
                    "school_email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="School Email",
                    ),
                ),
                (
                    "personal_email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name="Personal Email",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(blank=True, null=True, verbose_name="Date of Birth"),
                ),
                (
                    "birth_province",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BANTEAY_MEANCHEY", "Banteay Meanchey"),
                            ("BATTAMBANG", "Battambang"),
                            ("KAMPONG_CHAM", "Kampong Cham"),
                            ("KAMPONG_CHHNANG", "Kampong Chhnang"),
                            ("KAMPONG_SPEU", "Kampong Speu"),
                            ("KAMPONG_THOM", "Kampong Thom"),
                            ("KAMPOT", "Kampot"),
                            ("KANDAL", "Kandal"),
                            ("KEP", "Kep"),
                            ("KOH_KONG", "Koh Kong"),
                            ("KRATIE", "Kratie"),
                            ("MONDULKIRI", "Mondulkiri"),
                            ("ODDAR_MEANCHEY", "Oddar Meanchey"),
                            ("PAILIN", "Pailin"),
                            ("PHNOM_PENH", "Phnom Penh"),
                            ("PREAH_SIHANOUK", "Preah Sihanouk"),
                            ("PREAH_VIHEAR", "Preah Vihear"),
                            ("PREY_VENG", "Prey Veng"),
                            ("PURSAT", "Pursat"),
                            ("RATANAKIRI", "Ratanakiri"),
                            ("SIEM_REAP", "Siem Reap"),
                            ("STUNG_TRENG", "Stung Treng"),
                            ("SVAY_RIENG", "Svay Rieng"),
                            ("TAKEO", "Takeo"),
                            ("TBOUNG_KHMUM", "Tboung Khmum"),
                            ("INTERNATIONAL", "International/Other"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        help_text="Province of birth (for Cambodian citizens) or International for non-Cambodian citizens",
                        max_length=50,
                        null=True,
                        verbose_name="Birth Province",
                    ),
                ),
                (
                    "citizenship",
                    django_countries.fields.CountryField(default="KH", max_length=2, verbose_name="Citizenship"),
                ),
            ],
            options={
                "verbose_name": "Person",
                "verbose_name_plural": "People",
                "ordering": ["family_name", "personal_name"],
                "indexes": [
                    models.Index(
                        fields=["family_name", "personal_name"],
                        name="people_pers_family__efe68e_idx",
                    ),
                    models.Index(fields=["date_of_birth"], name="people_pers_date_of_c1209b_idx"),
                    models.Index(fields=["unique_id"], name="people_pers_unique__a12374_idx"),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="EmergencyContact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "relationship",
                    models.CharField(
                        choices=[
                            ("FATHER", "Father"),
                            ("MOTHER", "Mother"),
                            ("SPOUSE", "Spouse"),
                            ("PARTNER", "Partner"),
                            ("SIBLING", "Sibling"),
                            ("GRANDPARENT", "Grandparent"),
                            ("GUARDIAN", "Legal Guardian"),
                            ("FRIEND", "Friend"),
                            ("OTHER", "Other"),
                        ],
                        default="OTHER",
                        max_length=40,
                    ),
                ),
                (
                    "primary_phone",
                    models.CharField(
                        blank=True,
                        help_text="Can include multiple numbers separated by commas or slashes",
                        max_length=100,
                    ),
                ),
                ("secondary_phone", models.CharField(blank=True, max_length=100)),
                ("email", models.EmailField(blank=True, max_length=254)),
                ("address", models.TextField(blank=True)),
                ("is_primary", models.BooleanField(default=False)),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emergency_contacts",
                        to="people.person",
                    ),
                ),
            ],
            options={
                "verbose_name": "Emergency Contact",
                "verbose_name_plural": "Emergency Contacts",
                "ordering": ["-is_primary", "name"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="PersonEventLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("ROLE_CHANGE", "Role Change"),
                            ("LEAVE", "Leave of Absence"),
                            ("UPDATE", "Profile Update"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                        verbose_name="Action",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="Timestamp"),
                ),
                (
                    "details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Record of event details (e.g., old/new status, role)",
                        verbose_name="Details",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "changed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Changed By",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="event_logs",
                        to="people.person",
                        verbose_name="Person",
                    ),
                ),
            ],
            options={
                "verbose_name": "Person Event Log",
                "verbose_name_plural": "Person Event Logs",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="PhoneNumber",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "number",
                    models.CharField(
                        blank=True,
                        help_text="Phone number in international format (e.g., +85512345678) or local format. Must be 8-15 digits.",
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_phone_format",
                                message="Phone number must be 8-15 digits in international format. Use + followed by country code and number (e.g., +85512345678), or local format starting with a non-zero digit.",
                                regex="^\\+?[1-9]\\d{7,14}$",
                            )
                        ],
                    ),
                ),
                ("comment", models.CharField(blank=True, default="", max_length=100)),
                ("is_preferred", models.BooleanField(default=False)),
                ("is_telegram", models.BooleanField(default=False)),
                ("is_verified", models.BooleanField(default=False)),
                ("last_verification", models.DateTimeField(blank=True, null=True)),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="phone_numbers",
                        to="people.person",
                    ),
                ),
            ],
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StaffProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                ("position", models.CharField(default="Staff", max_length=100)),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("SUSPENDED", "Suspended"),
                            ("ON_LEAVE", "On Leave"),
                        ],
                        db_index=True,
                        default="ACTIVE",
                        max_length=20,
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        default=datetime.date.today,
                        help_text="Date when employment started",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when employment ended (if applicable)",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="staff_profile",
                        to="people.person",
                    ),
                ),
            ],
            options={
                "verbose_name": "Staff Profile",
                "verbose_name_plural": "Staff Profiles",
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StudentProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "student_id",
                    models.PositiveIntegerField(unique=True, verbose_name="Student ID"),
                ),
                (
                    "is_monk",
                    models.BooleanField(default=False, verbose_name="Is a Monk"),
                ),
                (
                    "is_transfer_student",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates student transferred from another institution",
                        verbose_name="Is Transfer Student",
                    ),
                ),
                (
                    "current_status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("GRADUATED", "Graduated"),
                            ("DROPPED", "Dropped"),
                            ("SUSPENDED", "Suspended"),
                            ("TRANSFERRED", "Transferred"),
                            ("FROZEN", "Frozen"),
                            ("UNKNOWN", "Unknown"),
                        ],
                        db_index=True,
                        default="UNKNOWN",
                        max_length=11,
                        verbose_name="Current Status",
                    ),
                ),
                (
                    "study_time_preference",
                    models.CharField(
                        choices=[
                            ("morning", "Morning"),
                            ("afternoon", "Afternoon"),
                            ("evening", "Evening"),
                        ],
                        default="evening",
                        help_text="Preferred time of day for classes",
                        max_length=20,
                        verbose_name="Study Time Preference",
                    ),
                ),
                (
                    "last_enrollment_date",
                    models.DateField(blank=True, null=True, verbose_name="Last Enrollment Date"),
                ),
                (
                    "person",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="student_profile",
                        to="people.person",
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Profile",
                "verbose_name_plural": "Student Profiles",
                "ordering": ["student_id"],
                "permissions": [
                    ("can_activate_student", "Can activate student accounts"),
                    ("can_deactivate_student", "Can deactivate student accounts"),
                    ("can_change_student_status", "Can change student status"),
                    (
                        "can_manage_student_records",
                        "Can perform administrative actions on student records",
                    ),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StudentAuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("CREATE", "Create"),
                            ("UPDATE", "Update"),
                            ("MERGE", "Merge"),
                            ("STATUS", "Status Change"),
                            ("ENROLLMENT", "Enrollment Change"),
                            ("GRADUATION", "Graduation Recorded"),
                            ("ACADEMIC", "Academic Progression"),
                            ("OTHER", "Other Change"),
                        ],
                        max_length=15,
                        verbose_name="Action",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="Timestamp"),
                ),
                (
                    "changes",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Record of what changed (e.g., old/new values, reason)",
                        verbose_name="Changes",
                    ),
                ),
                (
                    "object_id",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Related Object ID"),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                (
                    "changed_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Changed By",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contenttypes.contenttype",
                        verbose_name="Related Object Type",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_logs",
                        to="people.studentprofile",
                        verbose_name="Student",
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Audit Log",
                "verbose_name_plural": "Student Audit Logs",
                "ordering": ["-timestamp"],
            },
        ),
    ]
