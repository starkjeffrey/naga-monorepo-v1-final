# pytest.ini - Pytest configuration for Naga SIS
# This file configures pytest behavior for the entire test suite

[pytest]
# Minimum pytest version required
minversion = 8.0

# Django settings module for tests
DJANGO_SETTINGS_MODULE = config.settings.test

# Test discovery patterns
python_files = test_*.py tests_*.py
python_classes = Test* *Tests *TestCase
python_functions = test_*

# Test paths - where to look for tests
testpaths = 
    tests
    apps/*/tests

# Ignore paths during test collection
norecursedirs = 
    .git
    .tox
    dist
    build
    *.egg
    .venv
    migrations
    static
    media
    node_modules
    tests_legacy
    htmlcov
    .mypy_cache
    .pytest_cache

# Command line options always applied
addopts = 
    # Disable problematic plugins
    -p no:postgresql
    
    # Verbosity and output
    --verbose
    --strict-markers
    --strict-config
    --tb=short
    --showlocals
    
    # Django specific
    --reuse-db
    --nomigrations
    --create-db
    
    # Import mode for better module resolution
    --import-mode=importlib
    
    # Coverage options
    --cov=apps
    --cov=api
    --cov-branch
    --cov-report=term-missing:skip-covered
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=85
    
    # Parallel execution (disabled by default, enable with -n auto)
    # --numprocesses=auto
    
    # Show slowest tests
    --durations=10
    
    # Fail on warnings
    --strict
    
    # Color output
    --color=yes

# Test markers for categorization
markers =
    # Test categories
    unit: Unit tests that run in isolation without external dependencies
    integration: Integration tests that test multiple components together
    contract: API contract tests validating endpoints against OpenAPI spec
    e2e: End-to-end tests covering complete user workflows
    
    # Speed markers
    slow: Tests that take longer than 1 second (deselect with '-m "not slow"')
    fast: Tests that complete in under 100ms
    
    # Domain markers
    finance: Tests for financial modules (invoicing, payments, GL)
    academic: Tests for academic modules (enrollment, grading, transcripts)
    auth: Tests for authentication and authorization
    
    # Quality markers
    smoke: Quick smoke tests for CI/CD sanity checks
    security: Security and permission boundary tests
    performance: Performance benchmarks and load tests
    flaky: Tests known to be intermittently failing (skip in CI)
    wip: Work in progress tests (skip in CI)
    
    # Compliance markers
    financial_compliance: Tests ensuring financial regulatory compliance
    audit_trail: Tests verifying audit logging requirements
    data_privacy: Tests for GDPR/privacy compliance
    
    # Database markers
    django_db: Mark test to use Django test database (auto-applied by pytest-django)
    transaction: Tests requiring real database transactions
    
    # Special markers
    destructive: Tests that modify system state significantly
    requires_redis: Tests that need Redis running
    requires_email: Tests that send actual emails
    network: Tests that make external network calls

# Django-specific settings
django_find_project = true
django_debug_mode = false

# Timeout for individual tests (seconds) - requires pytest-timeout plugin
# timeout = 30
# timeout_method = thread

# Console output configuration
console_output_style = progress
log_cli = true
log_cli_level = WARNING
log_cli_format = %(asctime)s [%(levelname)8s] [%(name)s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# File logging for test runs
log_file = tests/logs/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] [%(name)s] %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Capture settings
log_level = INFO

# Warning filters
filterwarnings =
    # Treat warnings as errors by default
    error
    
    # Ignore specific warnings that are expected
    ignore::DeprecationWarning:django.*
    ignore::django.utils.deprecation.RemovedInDjango60Warning
    ignore::PendingDeprecationWarning:django.*
    ignore::ResourceWarning:urllib3.*
    ignore::DeprecationWarning:pkg_resources.*
    
    # Ignore warnings from third-party packages
    ignore::UserWarning:django_countries.*
    ignore::DeprecationWarning:faker.*
    ignore::DeprecationWarning:factory.*
    
    # Ignore test-specific warnings
    ignore::pytest.PytestUnraisableExceptionWarning
    ignore::pytest.PytestCollectionWarning

# Coverage configuration (if not in .coveragerc)
[coverage:run]
source = apps,api
omit = 
    */migrations/*
    */tests/*
    */test_*.py
    */__pycache__/*
    */admin.py
    */apps.py
    */urls.py
    */wsgi.py
    */asgi.py
    */settings/*
    */conftest.py
    */factories.py

[coverage:report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true

exclude_lines =
    # Standard pragma
    pragma: no cover
    
    # Debug statements
    def __repr__
    def __str__
    
    # Defensive programming
    raise AssertionError
    raise NotImplementedError
    
    # Non-runtime code
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    if typing.TYPE_CHECKING:
    
    # Abstract methods
    @abstractmethod
    @abc.abstractmethod
    
    # Deprecated code
    warnings.warn
    
    # Platform-specific code
    if sys.platform
    
    # Test-only code
    if settings.DEBUG
    if settings.TESTING

[coverage:html]
directory = htmlcov
title = Naga SIS Test Coverage Report
show_contexts = true

[coverage:xml]
output = coverage.xml