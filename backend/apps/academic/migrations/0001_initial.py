# Generated by Django 5.2.5 on 2025-08-28 12:49

import django.core.validators
import django.db.models.manager
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CanonicalRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('sequence_number', models.PositiveSmallIntegerField(blank=True, default=1, help_text='Order in degree sequence (1-43 for BA, 1-24 for MA, etc.)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)], verbose_name='Sequence Number')),
                ('name', models.CharField(help_text='Descriptive name for this requirement slot', max_length=200, verbose_name='Requirement Name')),
                ('description', models.TextField(blank=True, help_text='Additional context about this requirement', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this canonical requirement is currently in use', verbose_name='Is Active')),
                ('notes', models.TextField(blank=True, help_text='Internal notes for curriculum committee', verbose_name='Administrative Notes')),
            ],
            options={
                'verbose_name': 'Canonical Requirement',
                'verbose_name_plural': 'Canonical Requirements',
                'ordering': ['major', 'sequence_number'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='CourseEquivalency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('bidirectional', models.BooleanField(default=False, help_text='Whether the equivalency works in both directions', verbose_name='Bidirectional')),
                ('reason', models.TextField(help_text='Reason for establishing this equivalency', verbose_name='Reason')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this equivalency is currently active', verbose_name='Is Active')),
                ('approval_date', models.DateField(help_text='Date when this equivalency was approved', verbose_name='Approval Date')),
            ],
            options={
                'verbose_name': 'Course Equivalency',
                'verbose_name_plural': 'Course Equivalencies',
                'ordering': ['original_course', 'equivalent_course'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentCourseOverride',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('reason', models.CharField(choices=[('DISCONTINUED', 'Course Discontinued'), ('SCHEDULING', 'Scheduling Conflict'), ('TRANSFER', 'Transfer Equivalency'), ('ACADEMIC', 'Academic Exception'), ('MEDICAL', 'Medical Accommodation'), ('OTHER', 'Other Reason')], default='OTHER', max_length=15, verbose_name='Override Reason')),
                ('detailed_reason', models.TextField(help_text='Detailed explanation for this override request', verbose_name='Detailed Reason')),
                ('approval_status', models.CharField(choices=[('PENDING', 'Pending Approval'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired')], default='PENDING', max_length=10, verbose_name='Approval Status')),
                ('request_date', models.DateTimeField(auto_now_add=True, verbose_name='Request Date')),
                ('approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Approval Date')),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection if applicable', verbose_name='Rejection Reason')),
                ('supporting_documentation', models.TextField(blank=True, help_text='Details of any supporting documentation', verbose_name='Supporting Documentation')),
                ('academic_advisor_notes', models.TextField(blank=True, help_text='Notes from academic advisor', verbose_name='Academic Advisor Notes')),
            ],
            options={
                'verbose_name': 'Student Course Override',
                'verbose_name_plural': 'Student Course Overrides',
                'ordering': ['student', '-request_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentDegreeProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('fulfillment_method', models.CharField(choices=[('COURSE', 'Course Completion'), ('TRANSFER', 'Transfer Credit'), ('SUBSTITUTION', 'Course Substitution'), ('WAIVER', 'Requirement Waived'), ('EXAM', 'Exam Credit')], help_text='How this requirement was fulfilled', max_length=20, verbose_name='Fulfillment Method')),
                ('fulfillment_date', models.DateField(help_text='Date when requirement was fulfilled', verbose_name='Fulfillment Date')),
                ('credits_earned', models.DecimalField(decimal_places=2, help_text='Actual credits earned toward this requirement', max_digits=4, verbose_name='Credits Earned')),
                ('grade', models.CharField(blank=True, help_text='Grade earned (if applicable)', max_length=10, verbose_name='Grade')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this fulfillment is currently valid', verbose_name='Is Active')),
                ('notes', models.TextField(blank=True, help_text='Administrative notes about this fulfillment', verbose_name='Notes')),
                ('completion_status', models.CharField(choices=[('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('ON_HOLD', 'On Hold'), ('WITHDRAWN', 'Withdrawn')], default='COMPLETED', help_text='Status of this individual requirement fulfillment', max_length=20, verbose_name='Completion Status')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='When this fulfillment was last modified', verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'Student Degree Progress',
                'verbose_name_plural': 'Student Degree Progress',
                'ordering': ['student', 'canonical_requirement__sequence_number'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentRequirementException',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('exception_type', models.CharField(choices=[('TRANSFER', 'Transfer Credit'), ('ABROAD', 'Study Abroad'), ('SUBSTITUTION', 'Course Substitution'), ('ADMIN', 'Administrative Override'), ('EXAM', 'Exam Credit (AP, CLEP, etc.)'), ('PORTFOLIO', 'Portfolio Credit'), ('WAIVER', 'Requirement Waiver')], help_text='Type of exception being requested', max_length=20, verbose_name='Exception Type')),
                ('is_waived', models.BooleanField(default=False, help_text='Whether this requirement is completely waived', verbose_name='Is Waived')),
                ('reason', models.TextField(help_text='Detailed justification for this exception', verbose_name='Reason for Exception')),
                ('supporting_documentation', models.TextField(blank=True, help_text='Description of supporting documentation provided', verbose_name='Supporting Documentation')),
                ('approval_status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('CONDITIONAL', 'Conditionally Approved'), ('EXPIRED', 'Expired')], db_index=True, default='PENDING', max_length=20, verbose_name='Approval Status')),
                ('approval_date', models.DateTimeField(blank=True, null=True, verbose_name='Approval Date')),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejection if status is rejected', verbose_name='Rejection Reason')),
                ('notes', models.TextField(blank=True, help_text='Internal notes about this exception', verbose_name='Administrative Notes')),
            ],
            options={
                'verbose_name': 'Student Requirement Exception',
                'verbose_name_plural': 'Student Requirement Exceptions',
                'ordering': ['student', 'canonical_requirement__sequence_number'],
                'permissions': [('can_approve_requirement_exception', 'Can approve requirement exceptions'), ('can_reject_requirement_exception', 'Can reject requirement exceptions')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TransferCredit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('external_institution', models.CharField(help_text='Name of the institution where credit was earned', max_length=200, verbose_name='External Institution')),
                ('external_course_code', models.CharField(help_text='Course code at the external institution', max_length=20, verbose_name='External Course Code')),
                ('external_course_name', models.CharField(help_text='Course name at the external institution', max_length=200, verbose_name='External Course Name')),
                ('external_credits', models.DecimalField(decimal_places=2, help_text='Number of credits earned at external institution', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.0')), django.core.validators.MaxValueValidator(Decimal('12.0'))], verbose_name='External Credits')),
                ('external_grade', models.CharField(blank=True, help_text='Grade received at external institution', max_length=10, verbose_name='External Grade')),
                ('awarded_credits', models.DecimalField(decimal_places=2, help_text='Number of credits awarded for this transfer', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.0')), django.core.validators.MaxValueValidator(Decimal('12.0'))], verbose_name='Awarded Credits')),
                ('credit_type', models.CharField(choices=[('COURSE', 'Course Transfer'), ('EXAM', 'Examination Credit'), ('LIFE', 'Life Experience'), ('MILITARY', 'Military Credit')], default='COURSE', max_length=10, verbose_name='Credit Type')),
                ('term_taken', models.CharField(blank=True, help_text='Term/semester when course was taken externally', max_length=50, verbose_name='Term Taken')),
                ('year_taken', models.PositiveSmallIntegerField(blank=True, help_text='Year when course was taken externally', null=True, verbose_name='Year Taken')),
                ('approval_status', models.CharField(choices=[('PENDING', 'Pending Review'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected'), ('INFO', 'More Information Required')], default='PENDING', max_length=10, verbose_name='Approval Status')),
                ('review_date', models.DateTimeField(blank=True, null=True, verbose_name='Review Date')),
                ('review_notes', models.TextField(blank=True, help_text='Notes from the review process', verbose_name='Review Notes')),
                ('documentation', models.TextField(blank=True, help_text='Details about supporting documentation provided', verbose_name='Documentation')),
            ],
            options={
                'verbose_name': 'Transfer Credit',
                'verbose_name_plural': 'Transfer Credits',
                'ordering': ['student', 'external_institution', 'external_course_code'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
    ]
