# Generated by Django 5.2.5 on 2025-08-28 12:49

import django.db.models.deletion
import django.db.models.manager
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text='Descriptive name of the role', max_length=100, verbose_name='Role Name')),
                ('role_type', models.CharField(choices=[('DIRECTOR', 'Director'), ('HEAD', 'Department Head'), ('SUPERVISOR', 'Supervisor'), ('TEACHER', 'Teacher'), ('STAFF', 'Staff'), ('STUDENT', 'Student'), ('PARENT', 'Parent'), ('EXTERNAL', 'External User')], help_text='Standard role type classification', max_length=20, verbose_name='Role Type')),
                ('can_approve', models.BooleanField(default=False, help_text='Whether this role can approve requests/changes', verbose_name='Can Approve')),
                ('can_edit', models.BooleanField(default=False, help_text='Whether this role can edit data', verbose_name='Can Edit')),
                ('can_view', models.BooleanField(default=True, help_text='Whether this role can view data', verbose_name='Can View')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this role is currently active', verbose_name='Is Active')),
                ('description', models.TextField(blank=True, help_text="Detailed description of this role's responsibilities", verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'ordering': ['department', 'role_type', 'name'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('object_id', models.PositiveIntegerField(blank=True, help_text='Object ID for object-level permissions', null=True, verbose_name='Object ID')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this permission assignment is active', verbose_name='Is Active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this permission assignment', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Role Permission',
                'verbose_name_plural': 'Role Permissions',
                'ordering': ['role', 'permission'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TeachingAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('minimum_degree', models.CharField(choices=[('BACHELORS', "Bachelor's Degree"), ('MASTERS', "Master's Degree"), ('DOCTORATE', 'Doctorate Degree')], default='MASTERS', help_text='Minimum degree level required for teaching in this assignment', max_length=20, verbose_name='Minimum Degree Required')),
                ('authorized_levels', models.CharField(choices=[('UNDERGRADUATE', 'Undergraduate'), ('GRADUATE', 'Graduate'), ('BOTH', 'Both Undergraduate and Graduate')], default='UNDERGRADUATE', help_text='Which academic levels this teacher can teach', max_length=20, verbose_name='Authorized Teaching Levels')),
                ('is_native_english_speaker', models.BooleanField(default=False, help_text="Allows teaching English courses with Bachelor's degree", verbose_name='Native English Speaker')),
                ('has_special_qualification', models.BooleanField(default=False, help_text='Has special qualifications that override standard degree requirements', verbose_name='Has Special Qualification')),
                ('special_qualification_notes', models.TextField(blank=True, help_text='Details about special qualifications', verbose_name='Special Qualification Notes')),
                ('can_approve_course_changes', models.BooleanField(default=False, help_text='Whether teacher can approve course modifications', verbose_name='Can Approve Course Changes')),
                ('is_department_coordinator', models.BooleanField(default=False, help_text='Whether teacher serves as coordinator for this department', verbose_name='Is Department Coordinator')),
                ('start_date', models.DateField(help_text='Date when this teaching assignment began', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, help_text='Date when this teaching assignment ended (leave blank for current)', null=True, verbose_name='End Date')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this teaching assignment is currently active', verbose_name='Is Active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this teaching assignment', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Teaching Assignment',
                'verbose_name_plural': 'Teaching Assignments',
                'ordering': ['department', 'teacher'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this role assignment is currently active', verbose_name='Is Active')),
                ('assigned_date', models.DateTimeField(auto_now_add=True, help_text='Date when this role was assigned', verbose_name='Assigned Date')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this role assignment', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'User Role',
                'verbose_name_plural': 'User Roles',
                'ordering': ['user', 'role'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text='Full name of the department', max_length=100, unique=True, verbose_name='Department Name')),
                ('code', models.CharField(help_text="Short code for the department (e.g., 'CS', 'MATH', 'ADMIN')", max_length=20, unique=True, verbose_name='Department Code')),
                ('description', models.TextField(blank=True, help_text="Detailed description of the department's purpose and scope", verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this department is currently active', verbose_name='Is Active')),
                ('display_order', models.PositiveSmallIntegerField(default=100, help_text='Order for displaying departments in lists', verbose_name='Display Order')),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'ordering': ['display_order', 'name'],
                'indexes': [models.Index(fields=['code'], name='accounts_de_code_b809b1_idx'), models.Index(fields=['is_active', 'display_order'], name='accounts_de_is_acti_b87d76_idx')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text='Human-readable name of the permission', max_length=100, verbose_name='Permission Name')),
                ('codename', models.CharField(help_text='Unique codename for programmatic access', max_length=100, unique=True, verbose_name='Codename')),
                ('description', models.TextField(blank=True, help_text='Detailed description of what this permission allows', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this permission is currently active', verbose_name='Is Active')),
                ('content_type', models.ForeignKey(blank=True, help_text='Model this permission applies to (optional)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='custom_permissions', to='contenttypes.contenttype', verbose_name='Content Type')),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
                'ordering': ['content_type', 'name'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('title', models.CharField(help_text="Official title of the position (e.g., 'Department Chair', 'Academic Director')", max_length=100, verbose_name='Position Title')),
                ('authority_level', models.PositiveSmallIntegerField(help_text='Authority level (1=highest like Dean, 2=Dept Chair, 3=Supervisor, etc.)', verbose_name='Authority Level')),
                ('can_override_policies', models.JSONField(blank=True, default=list, help_text="List of policy types this position can override (e.g., ['ENROLLMENT', 'ACADEMIC'])", verbose_name='Override Policies')),
                ('approval_limits', models.JSONField(blank=True, default=dict, help_text="Financial and other approval limits (e.g., {'financial': 5000, 'enrollment': 'unlimited'})", verbose_name='Approval Limits')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this position is currently active', verbose_name='Is Active')),
                ('description', models.TextField(blank=True, help_text="Detailed description of this position's responsibilities", verbose_name='Description')),
                ('department', models.ForeignKey(blank=True, help_text='Department this position belongs to (leave blank for institutional positions)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='positions', to='accounts.department', verbose_name='Department')),
                ('reports_to', models.ForeignKey(blank=True, help_text='Position this role reports to in organizational hierarchy', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='direct_reports', to='accounts.position', verbose_name='Reports To')),
            ],
            options={
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
                'ordering': ['authority_level', 'department', 'title'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PositionAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('start_date', models.DateField(help_text='Date when this position assignment began', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, help_text='Date when this position assignment ended (leave blank for current)', null=True, verbose_name='End Date')),
                ('is_acting', models.BooleanField(default=False, help_text='Whether this is an acting position assignment', verbose_name='Is Acting')),
                ('is_primary', models.BooleanField(default=True, help_text="Whether this is the person's primary position", verbose_name='Is Primary')),
                ('delegation_start', models.DateField(blank=True, help_text='Start date of delegation', null=True, verbose_name='Delegation Start')),
                ('delegation_end', models.DateField(blank=True, help_text='End date of delegation', null=True, verbose_name='Delegation End')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this position assignment', verbose_name='Notes')),
                ('delegates_to', models.ForeignKey(blank=True, help_text='Position assignment that has been delegated authority', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='delegated_from', to='accounts.positionassignment', verbose_name='Delegates To')),
            ],
            options={
                'verbose_name': 'Position Assignment',
                'verbose_name_plural': 'Position Assignments',
                'ordering': ['-start_date', 'position__authority_level'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
    ]
