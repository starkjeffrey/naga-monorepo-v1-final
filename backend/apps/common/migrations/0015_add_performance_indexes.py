# Generated by Django 5.1.4 on 2025-01-01

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('common', '0014_auto_20241227_1234'),  # Update this to match the latest migration
        ('people', '0033_enhance_photo_metadata'),
        ('academic', '0025_add_collaboration_features'),
        ('finance', '0030_add_security_enhancements'),
        ('analytics', '0005_add_ai_ml_metadata'),
    ]

    operations = [
        # Student Management Performance Indexes
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_student_search_composite
            ON people_studentprofile(current_status, student_id, last_enrollment_date)
            WHERE current_status IN ('ACTIVE', 'INACTIVE');
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_people_student_search_composite;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_person_fulltext_search
            ON people_person USING gin(to_tsvector('english', coalesce(family_name, '') || ' ' || coalesce(personal_name, '') || ' ' || coalesce(khmer_name, '')));
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_people_person_fulltext_search;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_student_risk_analytics
            ON people_studentprofile(risk_score, success_probability, last_risk_assessment_date)
            WHERE risk_score IS NOT NULL;
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_people_student_risk_analytics;",
        ),

        # Academic Performance Indexes
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_grading_grade_recent
            ON grading_grade(student_id, created_at)
            WHERE created_at > NOW() - INTERVAL '1 year';
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_grading_grade_recent;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_enrollment_active_students
            ON enrollment_classheaderenrollment(student_id, enrollment_status, class_header_id)
            WHERE enrollment_status = 'ENROLLED';
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_enrollment_active_students;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_attendance_recent_records
            ON attendance_attendancerecord(student_id, date, status)
            WHERE date > CURRENT_DATE - INTERVAL '30 days';
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_attendance_recent_records;",
        ),

        # Financial Performance Indexes
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_finance_payment_recent
            ON finance_payment(student_id, payment_date, amount)
            WHERE payment_date > CURRENT_DATE - INTERVAL '6 months';
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_finance_payment_recent;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_finance_invoice_outstanding
            ON finance_invoice(student_id, status, due_date)
            WHERE status IN ('SENT', 'PARTIALLY_PAID', 'OVERDUE');
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_finance_invoice_outstanding;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_finance_transaction_audit
            ON finance_encryptedtransactionlog(created_at, transaction_type, user_id)
            WHERE created_at > NOW() - INTERVAL '1 year';
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_finance_transaction_audit;",
        ),

        # Real-time Collaboration Indexes
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_academic_collaboration_active_sessions
            ON academic_gradecollaborationsession(status, updated_at, owner_id)
            WHERE status = 'active';
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_academic_collaboration_active_sessions;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_academic_presence_real_time
            ON academic_userpresence(session_id, status, last_seen_at)
            WHERE status IN ('online', 'away', 'busy');
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_academic_presence_real_time;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_academic_change_history_recent
            ON academic_collaborationchangehistory(session_id, timestamp, user_id)
            WHERE timestamp > NOW() - INTERVAL '24 hours';
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_academic_change_history_recent;",
        ),

        # Photo and Media Performance Indexes
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_photo_processing_queue
            ON people_studentphoto(processing_status, created_at, person_id)
            WHERE processing_status IN ('pending', 'processing', 'failed');
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_people_photo_processing_queue;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_photo_quality_filter
            ON people_studentphoto(face_detected, image_quality_score, is_current)
            WHERE face_detected = true AND is_current = true;
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_people_photo_quality_filter;",
        ),

        # AI/ML Performance Indexes
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_analytics_prediction_current
            ON analytics_predictionresult(student_id, prediction_type, is_active, created_at)
            WHERE is_active = true AND expires_at > NOW();
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_analytics_prediction_current;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_analytics_model_deployment
            ON analytics_mlmodelmetadata(status, model_type, deployed_at)
            WHERE status IN ('production', 'staging');
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_analytics_model_deployment;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_analytics_document_processing
            ON analytics_documentintelligencemetadata(processing_status, document_type, created_at)
            WHERE processing_status IN ('pending', 'processing', 'manual_review');
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_analytics_document_processing;",
        ),

        # Security and Audit Indexes
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_finance_fraud_detection_priority
            ON finance_frauddetectionlog(risk_level, reviewed, detected_at)
            WHERE risk_level IN ('high', 'critical') AND reviewed = false;
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_finance_fraud_detection_priority;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_analytics_blockchain_verification_queue
            ON analytics_blockchainverification(verification_status, record_type, created_at)
            WHERE verification_status IN ('pending', 'submitted');
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_analytics_blockchain_verification_queue;",
        ),

        # Cross-table Performance Indexes for Common Queries
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_common_user_activity
            ON django_session(expire_date, session_key)
            WHERE expire_date > NOW();
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_common_user_activity;",
        ),

        # Partial indexes for frequently filtered data
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_active_students_only
            ON people_studentprofile(student_id, person_id)
            WHERE current_status = 'ACTIVE';
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_people_active_students_only;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_recent_photos_only
            ON people_studentphoto(person_id, created_at)
            WHERE is_current = true AND created_at > NOW() - INTERVAL '2 years';
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_people_recent_photos_only;",
        ),

        # Covering indexes for read-heavy queries
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_student_profile_summary
            ON people_studentprofile(student_id, current_status, is_monk, study_time_preference, person_id);
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_people_student_profile_summary;",
        ),
        migrations.RunSQL(
            """
            CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_finance_payment_summary
            ON finance_payment(student_id, payment_date, amount, currency, payment_method);
            """,
            reverse_sql="DROP INDEX IF EXISTS idx_finance_payment_summary;",
        ),
    ]