# Generated by Django 5.2.5 on 2025-08-28 12:49

import datetime
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('code', models.CharField(db_index=True, help_text="Course code (e.g., 'ENGL-110', 'MATH-101'). Multiple versions allowed with different effective dates.", max_length=15, verbose_name='Course Code')),
                ('title', models.CharField(help_text='Full course title', max_length=100, verbose_name='Course Title')),
                ('short_title', models.CharField(help_text='Abbreviated title for transcripts', max_length=30, verbose_name='Short Title')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('credits', models.IntegerField(default=3, help_text='Number of credit hours for this course', verbose_name='Credits')),
                ('is_language', models.BooleanField(default=True, help_text='Whether this is a language instruction course', verbose_name='Is Language Course')),
                ('is_foundation_year', models.BooleanField(default=False, help_text='Whether this course is part of foundation year curriculum', verbose_name='Is Foundation Year')),
                ('is_senior_project', models.BooleanField(default=False, help_text='Whether this course is a senior project requiring group formation and tiered pricing', verbose_name='Is Senior Project')),
                ('recommended_term', models.PositiveIntegerField(blank=True, help_text='Recommended term number for taking this course', null=True, verbose_name='Recommended Term')),
                ('earliest_term', models.PositiveIntegerField(blank=True, help_text='Earliest term when this course can be taken', null=True, verbose_name='Earliest Term')),
                ('latest_term', models.PositiveIntegerField(blank=True, help_text='Latest term when this course should be taken', null=True, verbose_name='Latest Term')),
                ('failure_retry_priority', models.PositiveIntegerField(default=1, help_text='Priority for retaking if failed (1=highest priority)', verbose_name='Failure Retry Priority')),
                ('start_date', models.DateField(default=datetime.date(2009, 4, 7), help_text='Date when this course becomes available', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, help_text='Date when this course is discontinued (if applicable)', null=True, verbose_name='End Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['code'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Cycle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text="Name of the cycle (e.g., 'Foundation Year', 'Bachelor's Program')", max_length=255, verbose_name='Cycle Name')),
                ('short_name', models.CharField(blank=True, help_text='Abbreviated name for codes', max_length=50, verbose_name='Short Name')),
                ('typical_duration_terms', models.PositiveSmallIntegerField(blank=True, help_text='Expected number of terms to complete this cycle', null=True, verbose_name='Typical Duration (Terms)')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('display_order', models.PositiveIntegerField(default=100, help_text='Order for display (positive integers only)', verbose_name='Display Order')),
            ],
            options={
                'verbose_name': 'Cycle',
                'verbose_name_plural': 'Cycles',
                'ordering': ['division', 'display_order', 'name'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SeniorProjectGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('project_title', models.CharField(help_text='Working title of the senior project', max_length=255, verbose_name='Project Title')),
                ('final_title', models.CharField(blank=True, help_text='Final title of the completed research paper', max_length=255, verbose_name='Final Paper Title')),
                ('project_description', models.TextField(blank=True, help_text='Detailed description of the project scope and objectives', verbose_name='Project Description')),
                ('status', models.CharField(choices=[('PROPOSED', 'Proposed'), ('APPROVED', 'Approved'), ('IN_PROGRESS', 'In Progress'), ('SUBMITTED', 'Submitted'), ('DEFENDED', 'Defended'), ('COMPLETED', 'Completed'), ('WITHDRAWN', 'Withdrawn')], db_index=True, default='PROPOSED', help_text='Current status of the project', max_length=20, verbose_name='Project Status')),
                ('proposal_date', models.DateField(blank=True, help_text='Date when project proposal was submitted', null=True, verbose_name='Proposal Date')),
                ('approval_date', models.DateField(blank=True, help_text='Date when project was approved by advisor/committee', null=True, verbose_name='Approval Date')),
                ('submission_date', models.DateField(blank=True, help_text='Date when final paper was submitted', null=True, verbose_name='Submission Date')),
                ('defense_date', models.DateField(blank=True, help_text='Date of project defense/presentation', null=True, verbose_name='Defense Date')),
                ('completion_date', models.DateField(blank=True, help_text='Date when project was officially completed', null=True, verbose_name='Completion Date')),
                ('notes', models.TextField(blank=True, help_text='Administrative notes about the project', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Senior Project Group',
                'verbose_name_plural': 'Senior Project Groups',
                'ordering': ['-created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('code', models.CharField(help_text="Unique identifier/code for the term (e.g., 'Fall 2024', 'BA15-T2')", max_length=100, verbose_name='Term Code')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('term_type', models.CharField(choices=[('ENG A', 'English Term A'), ('ENG B', 'English Term B'), ('BA', 'BA Term'), ('MA', 'MA Term'), ('X', 'Special Term')], db_index=True, help_text='Type of academic term', max_length=20, verbose_name='Term Type')),
                ('ba_cohort_number', models.PositiveSmallIntegerField(blank=True, help_text="Bachelor's cohort number for this term", null=True, verbose_name='BA Cohort Number')),
                ('ma_cohort_number', models.PositiveSmallIntegerField(blank=True, help_text="Master's cohort number for this term", null=True, verbose_name='MA Cohort Number')),
                ('start_date', models.DateField(help_text='First day of classes', verbose_name='Start Date')),
                ('end_date', models.DateField(help_text='Last day of classes', verbose_name='End Date')),
                ('discount_end_date', models.DateField(blank=True, help_text='Last day for early enrollment discounts', null=True, verbose_name='Discount End Date')),
                ('add_date', models.DateField(blank=True, help_text='Last day to add courses', null=True, verbose_name='Add Deadline')),
                ('drop_date', models.DateField(blank=True, help_text='Last day to drop courses without penalty', null=True, verbose_name='Drop Deadline')),
                ('payment_deadline_date', models.DateField(blank=True, help_text='Final payment deadline', null=True, verbose_name='Payment Deadline')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Term',
                'verbose_name_plural': 'Terms',
                'ordering': ['-start_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Textbook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('title', models.CharField(help_text='Full title of the textbook', max_length=200, verbose_name='Title')),
                ('author', models.CharField(help_text='Author(s) of the textbook', max_length=200, verbose_name='Author')),
                ('isbn', models.CharField(blank=True, help_text='ISBN for ordering and identification', max_length=20, verbose_name='ISBN')),
                ('publisher', models.CharField(blank=True, help_text='Publishing company', max_length=100, verbose_name='Publisher')),
                ('edition', models.CharField(blank=True, help_text='Edition number or description', max_length=20, verbose_name='Edition')),
                ('year', models.PositiveSmallIntegerField(blank=True, help_text='Year of publication', null=True, verbose_name='Publication Year')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this textbook', verbose_name='Notes')),
            ],
            options={
                'verbose_name': 'Textbook',
                'verbose_name_plural': 'Textbooks',
                'ordering': ['title', 'author'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='CoursePartTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('part_type', models.CharField(choices=[('MAIN', 'Main Class'), ('LECTURE', 'Lecture'), ('DISCUSSION', 'Discussion'), ('LAB', 'Laboratory'), ('COMPUTER', 'Computer Lab'), ('WORKSHOP', 'Workshop'), ('TUTORIAL', 'Tutorial'), ('PROJECT', 'Project'), ('GRAMMAR', 'Grammar'), ('CONVERSATION', 'Conversation'), ('WRITING', 'Writing'), ('READING', 'Reading'), ('LISTENING', 'Listening'), ('SPEAKING', 'Speaking'), ('VENTURES', 'Ventures'), ('BA', "Bachelor's Degree"), ('MA', "Master's Degree"), ('PRACTICUM', 'Practicum'), ('EXCHANGE', 'Exchange Program'), ('ONLINE', 'Online Class'), ('OTHER', 'Other')], default='MAIN', help_text='Type of class component', max_length=15, verbose_name='Part Type')),
                ('part_code', models.CharField(help_text='Code for this part (A, B, C, etc.)', max_length=10, verbose_name='Part Code')),
                ('name', models.CharField(help_text="Display name (e.g., 'Grammar', 'Computer Lab')", max_length=100, verbose_name='Part Name')),
                ('session_number', models.PositiveSmallIntegerField(default=1, help_text='Session assignment (1 or 2 for IEAP, 1 for regular classes)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(2)], verbose_name='Session Number')),
                ('meeting_days', models.CharField(help_text='Default meeting pattern (MON,WED,FRI) - can be adjusted during scheduling', max_length=20, verbose_name='Meeting Days')),
                ('grade_weight', models.DecimalField(decimal_places=3, default=Decimal('1.000'), help_text='CURRICULUM WEIGHT: Predetermined during curriculum design. Parts in same session should sum to 1.0', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.000')), django.core.validators.MaxValueValidator(Decimal('1.000'))], verbose_name='Grade Weight')),
                ('display_order', models.IntegerField(default=100, help_text='Display order within session', verbose_name='Display Order')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is currently active', verbose_name='Is Active')),
                ('course', models.ForeignKey(help_text='Course this template defines parts for', on_delete=django.db.models.deletion.CASCADE, related_name='part_templates', to='curriculum.course', verbose_name='Course')),
            ],
            options={
                'verbose_name': 'Course Part Template',
                'verbose_name_plural': 'Course Part Templates',
                'ordering': ['course', 'session_number', 'display_order'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='CoursePrerequisite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this prerequisite relationship', verbose_name='Notes')),
                ('start_date', models.DateField(default=datetime.date.today, help_text='Date when this prerequisite becomes effective', verbose_name='Effective Start Date')),
                ('end_date', models.DateField(blank=True, help_text='Date when this prerequisite is no longer required', null=True, verbose_name='Effective End Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('course', models.ForeignKey(help_text='Course that requires the prerequisite', on_delete=django.db.models.deletion.CASCADE, related_name='required_prerequisites', to='curriculum.course', verbose_name='Course')),
                ('prerequisite', models.ForeignKey(help_text='Course that must be completed first', on_delete=django.db.models.deletion.CASCADE, related_name='enables_courses', to='curriculum.course', verbose_name='Prerequisite Course')),
            ],
            options={
                'verbose_name': 'Course Prerequisite',
                'verbose_name_plural': 'Course Prerequisites',
                'ordering': ['course__code', 'prerequisite__code'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='cycle',
            field=models.ForeignKey(help_text='Academic cycle for this course', on_delete=django.db.models.deletion.PROTECT, related_name='courses', to='curriculum.cycle', verbose_name='Cycle'),
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text="Full name of the division (e.g., 'Language Division')", max_length=255, verbose_name='Division Name')),
                ('short_name', models.CharField(blank=True, help_text='Abbreviated name for codes and displays', max_length=50, verbose_name='Short Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('display_order', models.IntegerField(default=100, verbose_name='Display Order')),
            ],
            options={
                'verbose_name': 'Division',
                'verbose_name_plural': 'Divisions',
                'ordering': ['display_order', 'name'],
                'indexes': [models.Index(fields=['is_active', 'display_order'], name='curriculum__is_acti_5589b5_idx'), models.Index(fields=['short_name'], name='curriculum__short_n_0ca23d_idx')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='cycle',
            name='division',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cycles', to='curriculum.division', verbose_name='Division'),
        ),
        migrations.CreateModel(
            name='Major',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text='Full name of the major or program', max_length=255, verbose_name='Program Name')),
                ('short_name', models.CharField(blank=True, help_text='Abbreviated name for transcripts and codes', max_length=50, verbose_name='Short Name')),
                ('code', models.CharField(blank=True, help_text='Official code for this program', max_length=20, verbose_name='Program Code')),
                ('faculty_display_name', models.CharField(blank=True, help_text="Faculty name for transcript display only (e.g., 'Faculty of Business & Economics')", max_length=255, verbose_name='Faculty Display Name')),
                ('faculty_code', models.CharField(blank=True, help_text='Faculty abbreviation for display (SSIR, BE, EDUC, IFL)', max_length=10, verbose_name='Faculty Code')),
                ('program_type', models.CharField(choices=[('ACADEMIC', 'Academic Degree Program'), ('LANGUAGE', 'Language Program')], db_index=True, default='ACADEMIC', help_text='Distinguishes between ACADEMIC (degree-granting programs like BA, MBA, MEd) and LANGUAGE (non-degree programs like IEAP, GESL, EHSS)', max_length=20, verbose_name='Program Type')),
                ('degree_awarded', models.CharField(choices=[('BA', 'Bachelor of Arts'), ('MBA', 'Master of Business Administration'), ('MEd', 'Master of Education'), ('MA', 'Master of Arts'), ('AA', 'Associate of Arts'), ('PHD', 'Doctor of Philosophy'), ('CERT', 'Certificate'), ('NONE', 'No degree awarded')], default='NONE', help_text='Degree or certification awarded upon completion', max_length=20, verbose_name='Degree Awarded')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('total_credits_required', models.PositiveSmallIntegerField(blank=True, help_text='Total credits required to complete this program', null=True, verbose_name='Total Credits Required')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('display_order', models.PositiveIntegerField(default=100, help_text='Order for display (positive integers only)', verbose_name='Display Order')),
                ('cycle', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='majors', to='curriculum.cycle', verbose_name='Cycle')),
            ],
            options={
                'verbose_name': 'Major',
                'verbose_name_plural': 'Majors',
                'ordering': ['cycle', 'display_order', 'name'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='majors',
            field=models.ManyToManyField(blank=True, help_text='Majors that include this course in their curriculum', related_name='courses', to='curriculum.major', verbose_name='Majors'),
        ),
    ]
