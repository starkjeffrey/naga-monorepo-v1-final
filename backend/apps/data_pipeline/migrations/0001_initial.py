# Generated by Django 5.2.5 on 2025-09-01 08:28

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="CleaningRule",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("null_standardization", "NULL Standardization"),
                            ("date_parsing", "Date Format Parsing"),
                            ("encoding_fix", "Character Encoding Fix"),
                            ("text_normalization", "Text Normalization"),
                            ("numeric_conversion", "Numeric Data Conversion"),
                            ("custom_mapping", "Custom Value Mapping"),
                        ],
                        max_length=50,
                    ),
                ),
                ("description", models.TextField(help_text="Human-readable description of the rule")),
                ("parameters", models.JSONField(default=dict, help_text="Rule parameters and settings")),
                ("applies_to_tables", models.JSONField(default=list, help_text="Tables this rule applies to")),
                ("applies_to_columns", models.JSONField(default=list, help_text="Columns this rule applies to")),
                ("version", models.CharField(default="1.0", max_length=20)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("created_by", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "db_table": "data_pipeline_cleaningrule",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PipelineRun",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("table_name", models.CharField(help_text="Name of the table being processed", max_length=100)),
                (
                    "stage",
                    models.IntegerField(
                        choices=[(1, "Raw Import"), (2, "Data Profiling"), (3, "Data Cleaning"), (4, "Validation")],
                        help_text="Current/final pipeline stage",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("running", "Running"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("source_file", models.CharField(help_text="Path to source CSV file", max_length=500)),
                ("source_file_size", models.BigIntegerField(blank=True, help_text="File size in bytes", null=True)),
                (
                    "source_encoding",
                    models.CharField(blank=True, help_text="Detected file encoding", max_length=50, null=True),
                ),
                ("records_processed", models.IntegerField(default=0, help_text="Total records processed")),
                ("records_valid", models.IntegerField(default=0, help_text="Records passing validation")),
                ("records_invalid", models.IntegerField(default=0, help_text="Records failing validation")),
                ("error_log", models.JSONField(blank=True, default=dict, help_text="Detailed error information")),
                (
                    "warnings",
                    models.JSONField(blank=True, default=list, help_text="Non-fatal warnings during processing"),
                ),
                (
                    "config_snapshot",
                    models.JSONField(blank=True, default=dict, help_text="Configuration used for this run"),
                ),
            ],
            options={
                "ordering": ["-started_at"],
                "indexes": [
                    models.Index(fields=["table_name", "status"], name="data_pipeli_table_n_f4f151_idx"),
                    models.Index(fields=["started_at"], name="data_pipeli_started_6c0477_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="ProcessingStatistics",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("date", models.DateField(help_text="Statistics date")),
                ("table_name", models.CharField(max_length=100)),
                ("total_runs", models.IntegerField(default=0)),
                ("successful_runs", models.IntegerField(default=0)),
                ("failed_runs", models.IntegerField(default=0)),
                ("avg_processing_time", models.DurationField(blank=True, null=True)),
                ("max_processing_time", models.DurationField(blank=True, null=True)),
                ("total_records_processed", models.BigIntegerField(default=0)),
                ("avg_success_rate", models.FloatField(blank=True, null=True)),
                ("common_error_types", models.JSONField(default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "data_pipeline_processingstatistics",
                "ordering": ["-date", "table_name"],
                "unique_together": {("date", "table_name")},
            },
        ),
        migrations.CreateModel(
            name="DataProfile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("table_name", models.CharField(help_text="Source table name", max_length=100)),
                ("column_name", models.CharField(help_text="Column being profiled", max_length=100)),
                ("total_rows", models.IntegerField(help_text="Total number of rows")),
                ("null_count", models.IntegerField(help_text="Number of NULL/empty values")),
                ("unique_count", models.IntegerField(help_text="Number of unique values")),
                ("min_value", models.TextField(blank=True, help_text="Minimum value found", null=True)),
                ("max_value", models.TextField(blank=True, help_text="Maximum value found", null=True)),
                ("avg_length", models.FloatField(blank=True, help_text="Average string length", null=True)),
                ("common_values", models.JSONField(default=list, help_text="Most common values with frequencies")),
                ("null_patterns", models.JSONField(default=list, help_text="Different NULL representations found")),
                ("detected_type", models.CharField(help_text="Probable data type", max_length=50)),
                (
                    "completeness_score",
                    models.FloatField(blank=True, help_text="Data completeness (0-100)", null=True),
                ),
                ("consistency_score", models.FloatField(blank=True, help_text="Data consistency (0-100)", null=True)),
                ("has_encoding_issues", models.BooleanField(default=False, help_text="Contains encoding problems")),
                ("has_date_patterns", models.BooleanField(default=False, help_text="Contains date-like patterns")),
                ("has_numeric_patterns", models.BooleanField(default=False, help_text="Contains numeric patterns")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "pipeline_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profiles",
                        to="data_pipeline.pipelinerun",
                    ),
                ),
            ],
            options={
                "db_table": "data_pipeline_dataprofile",
                "indexes": [
                    models.Index(fields=["table_name", "column_name"], name="data_pipeli_table_n_9ca9ec_idx"),
                    models.Index(fields=["detected_type"], name="data_pipeli_detecte_4f2a53_idx"),
                ],
                "unique_together": {("pipeline_run", "column_name")},
            },
        ),
        migrations.CreateModel(
            name="ValidationError",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("row_number", models.IntegerField(help_text="Row number in source data")),
                ("column_name", models.CharField(help_text="Column where error occurred", max_length=100)),
                (
                    "error_type",
                    models.CharField(
                        choices=[
                            ("required_field", "Required Field Missing"),
                            ("data_type", "Data Type Mismatch"),
                            ("format_error", "Format Validation Failed"),
                            ("range_error", "Value Out of Range"),
                            ("pattern_error", "Pattern Validation Failed"),
                            ("business_rule", "Business Rule Violation"),
                            ("foreign_key", "Foreign Key Constraint"),
                            ("unique_constraint", "Unique Constraint Violation"),
                        ],
                        max_length=100,
                    ),
                ),
                ("error_message", models.TextField(help_text="Detailed error description")),
                ("raw_value", models.TextField(help_text="Original value that caused error")),
                (
                    "expected_format",
                    models.CharField(blank=True, help_text="Expected format/pattern", max_length=200, null=True),
                ),
                (
                    "validation_rule",
                    models.CharField(blank=True, help_text="Validation rule that failed", max_length=200, null=True),
                ),
                ("suggested_fix", models.TextField(blank=True, help_text="Suggested correction", null=True)),
                ("is_critical", models.BooleanField(default=False, help_text="Critical error preventing processing")),
                (
                    "is_correctable",
                    models.BooleanField(default=True, help_text="Error can be automatically corrected"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "pipeline_run",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="validation_errors",
                        to="data_pipeline.pipelinerun",
                    ),
                ),
            ],
            options={
                "db_table": "data_pipeline_validationerror",
                "indexes": [
                    models.Index(fields=["pipeline_run", "error_type"], name="data_pipeli_pipelin_25ebba_idx"),
                    models.Index(fields=["column_name", "error_type"], name="data_pipeli_column__11529f_idx"),
                    models.Index(fields=["is_critical"], name="data_pipeli_is_crit_a75bf8_idx"),
                ],
            },
        ),
    ]
