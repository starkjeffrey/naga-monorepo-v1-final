# Generated by Django 5.2.5 on 2025-08-28 12:49

import datetime
import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('curriculum', '0002_initial'),
        ('enrollment', '0001_initial'),
        ('people', '0001_initial'),
        ('scheduling', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='academicjourney',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by'),
        ),
        migrations.AddField(
            model_name='academicjourney',
            name='program',
            field=models.ForeignKey(blank=True, help_text='Specific program or major for this period', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='journey_periods', to='curriculum.major', verbose_name='Program/Major'),
        ),
        migrations.AddField(
            model_name='academicjourney',
            name='start_term',
            field=models.ForeignKey(blank=True, help_text='Term when this program period started', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='journey_starts', to='curriculum.term', verbose_name='Start Term'),
        ),
        migrations.AddField(
            model_name='academicjourney',
            name='student',
            field=models.ForeignKey(help_text='Student whose program period is being tracked', on_delete=django.db.models.deletion.PROTECT, related_name='academic_journeys', to='people.studentprofile', verbose_name='Student'),
        ),
        migrations.AddField(
            model_name='academicjourney',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by'),
        ),
        migrations.CreateModel(
            name='AcademicProgression',
            fields=[
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='progression_summary', serialize=False, to='people.studentprofile', verbose_name='Student')),
                ('student_name', models.CharField(help_text='Denormalized student full name', max_length=200, verbose_name='Student Name')),
                ('student_id_number', models.CharField(db_index=True, help_text='Denormalized student ID number', max_length=20, verbose_name='Student ID')),
                ('entry_program', models.CharField(help_text='First program enrolled in', max_length=50, verbose_name='Entry Program')),
                ('entry_date', models.DateField(db_index=True, help_text='Date of first enrollment', verbose_name='Entry Date')),
                ('entry_term', models.CharField(help_text='Term code of first enrollment', max_length=20, verbose_name='Entry Term')),
                ('language_start_date', models.DateField(blank=True, help_text='Start date of language program', null=True, verbose_name='Language Start Date')),
                ('language_end_date', models.DateField(blank=True, help_text='End date of language program', null=True, verbose_name='Language End Date')),
                ('language_terms', models.PositiveIntegerField(default=0, help_text='Number of terms in language programs', verbose_name='Language Terms')),
                ('language_final_level', models.CharField(blank=True, help_text='Final level achieved in language program', max_length=20, verbose_name='Language Final Level')),
                ('language_completion_status', models.CharField(blank=True, db_index=True, help_text='COMPLETED, BYPASSED, DROPPED, etc.', max_length=20, verbose_name='Language Completion Status')),
                ('ba_start_date', models.DateField(blank=True, help_text='Start date of BA program', null=True, verbose_name='BA Start Date')),
                ('ba_major', models.CharField(blank=True, db_index=True, help_text="Bachelor's degree major", max_length=100, verbose_name='BA Major')),
                ('ba_major_changes', models.PositiveIntegerField(default=0, help_text='Number of major changes during BA', verbose_name='BA Major Changes')),
                ('ba_terms', models.PositiveIntegerField(default=0, help_text='Number of terms enrolled in BA', verbose_name='BA Terms')),
                ('ba_credits', models.DecimalField(decimal_places=2, default=0, help_text='Total credits earned in BA', max_digits=6, verbose_name='BA Credits')),
                ('ba_gpa', models.DecimalField(blank=True, decimal_places=2, help_text='Final BA GPA', max_digits=3, null=True, verbose_name='BA GPA')),
                ('ba_completion_date', models.DateField(blank=True, help_text='BA graduation date', null=True, verbose_name='BA Completion Date')),
                ('ba_completion_status', models.CharField(blank=True, db_index=True, help_text='GRADUATED, DROPPED, ACTIVE, etc.', max_length=20, verbose_name='BA Completion Status')),
                ('ma_start_date', models.DateField(blank=True, help_text='Start date of MA program', null=True, verbose_name='MA Start Date')),
                ('ma_program', models.CharField(blank=True, db_index=True, help_text="Master's degree program", max_length=100, verbose_name='MA Program')),
                ('ma_terms', models.PositiveIntegerField(default=0, help_text='Number of terms enrolled in MA', verbose_name='MA Terms')),
                ('ma_credits', models.DecimalField(decimal_places=2, default=0, help_text='Total credits earned in MA', max_digits=6, verbose_name='MA Credits')),
                ('ma_gpa', models.DecimalField(blank=True, decimal_places=2, help_text='Final MA GPA', max_digits=3, null=True, verbose_name='MA GPA')),
                ('ma_completion_date', models.DateField(blank=True, help_text='MA graduation date', null=True, verbose_name='MA Completion Date')),
                ('ma_completion_status', models.CharField(blank=True, db_index=True, help_text='GRADUATED, DROPPED, ACTIVE, etc.', max_length=20, verbose_name='MA Completion Status')),
                ('total_terms', models.PositiveIntegerField(default=0, help_text='Total terms enrolled across all programs', verbose_name='Total Terms')),
                ('total_gap_terms', models.PositiveIntegerField(default=0, help_text='Number of terms with no enrollment', verbose_name='Total Gap Terms')),
                ('time_to_ba_days', models.PositiveIntegerField(blank=True, db_index=True, help_text='Days from first enrollment to BA graduation', null=True, verbose_name='Time to BA (Days)')),
                ('time_to_ma_days', models.PositiveIntegerField(blank=True, db_index=True, help_text='Days from BA graduation to MA graduation', null=True, verbose_name='Time to MA (Days)')),
                ('current_status', models.CharField(db_index=True, help_text='Current enrollment status', max_length=50, verbose_name='Current Status')),
                ('last_enrollment_term', models.CharField(help_text='Most recent term with enrollment', max_length=20, verbose_name='Last Enrollment Term')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='When this summary was last updated', verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'Academic Progression',
                'verbose_name_plural': 'Academic Progressions',
                'ordering': ['-last_updated'],
                'indexes': [models.Index(fields=['current_status', 'entry_program'], name='enrollment__current_be75f0_idx'), models.Index(fields=['ba_major', 'ba_completion_status'], name='enrollment__ba_majo_ae69e2_idx'), models.Index(fields=['ma_program', 'ma_completion_status'], name='enrollment__ma_prog_e67077_idx'), models.Index(fields=['time_to_ba_days'], name='enrollment__time_to_3e3d5a_idx'), models.Index(fields=['time_to_ma_days'], name='enrollment__time_to_00426c_idx'), models.Index(fields=['language_completion_status', 'language_final_level'], name='enrollment__languag_e08425_idx')],
            },
        ),
        migrations.CreateModel(
            name='CertificateIssuance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('certificate_type', models.CharField(choices=[('IEAP', 'IEAP Completion Certificate'), ('GESL', 'GESL Completion Certificate'), ('EHSS', 'EHSS Completion Certificate'), ('BA', 'Bachelor of Arts'), ('MA', 'Master of Arts'), ('PHD', 'Doctor of Philosophy'), ('TRANS', 'Official Transcript'), ('LETTER', 'Completion Letter'), ('CERT', 'General Certificate')], db_index=True, help_text='Type of certificate issued', max_length=20, verbose_name='Certificate Type')),
                ('issue_date', models.DateField(db_index=True, help_text='Date certificate was issued', verbose_name='Issue Date')),
                ('completion_level', models.CharField(blank=True, help_text='Level completed (for language programs)', max_length=20, verbose_name='Completion Level')),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, help_text='GPA at time of graduation', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('4.00'))], verbose_name='GPA')),
                ('honors', models.CharField(blank=True, help_text='Academic honors (e.g., Magna Cum Laude)', max_length=50, verbose_name='Honors')),
                ('certificate_number', models.CharField(help_text='Unique certificate identifier', max_length=50, unique=True, verbose_name='Certificate Number')),
                ('printed_date', models.DateField(blank=True, help_text='Date certificate was printed', null=True, verbose_name='Printed Date')),
                ('collected_date', models.DateField(blank=True, help_text='Date certificate was collected by student', null=True, verbose_name='Collected Date')),
                ('collected_by', models.CharField(blank=True, help_text='Person who collected certificate', max_length=100, verbose_name='Collected By')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about issuance', verbose_name='Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('issued_by', models.ForeignKey(help_text='Staff member who issued certificate', on_delete=django.db.models.deletion.PROTECT, related_name='certificates_issued_by', to=settings.AUTH_USER_MODEL, verbose_name='Issued By')),
                ('program', models.ForeignKey(blank=True, help_text='Academic program for degree/certificate', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='certificates', to='curriculum.major', verbose_name='Program')),
                ('student', models.ForeignKey(help_text='Student receiving certificate', on_delete=django.db.models.deletion.PROTECT, related_name='certificates_issued', to='people.studentprofile', verbose_name='Student')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Certificate Issuance',
                'verbose_name_plural': 'Certificate Issuances',
                'ordering': ['-issue_date', 'student'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassHeaderEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('status', models.CharField(choices=[('ENROLLED', 'Enrolled'), ('ACTIVE', 'Active'), ('DROPPED', 'Dropped'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('INCOMPLETE', 'Incomplete'), ('WITHDRAWN', 'Withdrawn'), ('AUDIT', 'Audit'), ('NO_SHOW_ACADEMIC', 'No Show (Academic)'), ('NO_SHOW_LANGUAGE', 'No Show (Language)')], db_index=True, default='ENROLLED', help_text='Current enrollment status', max_length=20, verbose_name='Enrollment Status')),
                ('final_grade', models.CharField(blank=True, db_index=True, help_text='Final grade awarded for the class', max_length=10, verbose_name='Final Grade')),
                ('grade_points', models.DecimalField(blank=True, decimal_places=2, help_text='Grade points for GPA calculation', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('4.00'))], verbose_name='Grade Points')),
                ('enrollment_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='When the student was enrolled', verbose_name='Enrollment Date')),
                ('completion_date', models.DateTimeField(blank=True, help_text='When the student completed or withdrew from the class', null=True, verbose_name='Completion Date')),
                ('notes', models.TextField(blank=True, help_text='Administrative notes about this enrollment', verbose_name='Notes')),
                ('has_override', models.BooleanField(default=False, help_text='Whether this enrollment was created with management override', verbose_name='Has Override')),
                ('override_type', models.CharField(blank=True, help_text='Type of override applied (if any)', max_length=50, verbose_name='Override Type')),
                ('override_reason', models.TextField(blank=True, help_text='Reason for management override (if any)', verbose_name='Override Reason')),
                ('is_audit', models.BooleanField(default=False, help_text='Whether student is auditing (not for credit)', verbose_name='Audit Only')),
                ('late_enrollment', models.BooleanField(default=False, help_text='Whether student enrolled after normal deadline', verbose_name='Late Enrollment')),
                ('class_header', models.ForeignKey(help_text='Scheduled class the student is enrolled in', on_delete=django.db.models.deletion.CASCADE, related_name='class_header_enrollments', to='scheduling.classheader', verbose_name='Class')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('enrolled_by', models.ForeignKey(help_text='Staff member who processed the enrollment', on_delete=django.db.models.deletion.PROTECT, related_name='class_enrollments_created', to=settings.AUTH_USER_MODEL, verbose_name='Enrolled By')),
                ('student', models.ForeignKey(help_text='Student enrolled in this class', on_delete=django.db.models.deletion.PROTECT, related_name='class_header_enrollments', to='people.studentprofile', verbose_name='Student')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Class Header Enrollment',
                'verbose_name_plural': 'Class Header Enrollments',
                'ordering': ['student', '-enrollment_date'],
                'permissions': [('can_manage_enrollments', 'Can manage student enrollments'), ('can_override_capacity', 'Can override class capacity limits'), ('can_override_prerequisites', 'Can override prerequisite requirements'), ('can_override_credit_limits', 'Can override credit/course limits')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassPartEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('enrollment_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When the student was enrolled in this class part', verbose_name='Enrollment Date')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this enrollment is currently active', verbose_name='Is Active')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this class part enrollment', verbose_name='Notes')),
                ('class_part', models.ForeignKey(help_text='Specific class component the student is enrolled in', on_delete=django.db.models.deletion.CASCADE, related_name='class_part_enrollments', to='scheduling.classpart', verbose_name='Class Part')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('student', models.ForeignKey(help_text='Student enrolled in this class part', on_delete=django.db.models.deletion.PROTECT, related_name='class_part_enrollments', to='people.studentprofile', verbose_name='Student')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Class Part Enrollment',
                'verbose_name_plural': 'Class Part Enrollments',
                'ordering': ['student', 'class_part'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ClassSessionExemption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('exemption_reason', models.CharField(help_text="Reason for session exemption (e.g., 'Already passed Session 1')", max_length=100, verbose_name='Exemption Reason')),
                ('exemption_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When the exemption was granted', verbose_name='Exemption Date')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this session exemption', verbose_name='Notes')),
                ('class_header_enrollment', models.ForeignKey(help_text='The class enrollment this exemption applies to', on_delete=django.db.models.deletion.CASCADE, related_name='session_exemptions', to='enrollment.classheaderenrollment', verbose_name='Class Header Enrollment')),
                ('class_session', models.ForeignKey(help_text='Session the student is exempted from', on_delete=django.db.models.deletion.CASCADE, related_name='session_exemptions', to='scheduling.classsession', verbose_name='Class Session')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('exempted_by', models.ForeignKey(help_text='Staff member who approved the exemption', on_delete=django.db.models.deletion.PROTECT, related_name='session_exemptions_created', to=settings.AUTH_USER_MODEL, verbose_name='Exempted By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Class Session Exemption',
                'verbose_name_plural': 'Class Session Exemptions',
                'ordering': ['class_header_enrollment', 'class_session'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='MajorDeclaration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('effective_date', models.DateField(db_index=True, default=datetime.date.today, help_text='Date when this major declaration becomes effective', verbose_name='Effective Date')),
                ('declared_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='When the student made this declaration', verbose_name='Declaration Date')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Whether this declaration is currently active', verbose_name='Is Active')),
                ('is_self_declared', models.BooleanField(default=True, help_text='Whether student declared this themselves via mobile app', verbose_name='Self Declared')),
                ('change_reason', models.TextField(blank=True, help_text='Reason for major change (required for major changes)', verbose_name='Change Reason')),
                ('supporting_documents', models.TextField(blank=True, help_text='Reference to paperwork or documents supporting this declaration', verbose_name='Supporting Documents')),
                ('requires_approval', models.BooleanField(default=False, help_text='Whether this declaration requires administrative approval', verbose_name='Requires Approval')),
                ('approved_date', models.DateTimeField(blank=True, help_text='When the declaration was approved', null=True, verbose_name='Approval Date')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this major declaration', verbose_name='Notes')),
                ('approved_by', models.ForeignKey(blank=True, help_text='Staff member who approved the declaration (if required)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='major_declarations_approved', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('declared_by', models.ForeignKey(blank=True, help_text='Staff member who processed the declaration (null for student self-declaration)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='major_declarations_processed', to=settings.AUTH_USER_MODEL, verbose_name='Declared By')),
                ('major', models.ForeignKey(help_text='Major or program the student has declared', on_delete=django.db.models.deletion.PROTECT, related_name='major_declarations', to='curriculum.major', verbose_name='Declared Major')),
                ('previous_declaration', models.ForeignKey(blank=True, help_text='Previous major declaration that this one supersedes', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='superseded_by', to='enrollment.majordeclaration', verbose_name='Previous Declaration')),
                ('student', models.ForeignKey(help_text='Student making the major declaration', on_delete=django.db.models.deletion.PROTECT, related_name='major_declarations', to='people.studentprofile', verbose_name='Student')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Major Declaration',
                'verbose_name_plural': 'Major Declarations',
                'ordering': ['student', '-effective_date', '-declared_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProgramEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('enrollment_type', models.CharField(choices=[('LANG', 'Language Program'), ('ACAD', 'Academic Program'), ('JOINT', 'Joint Program')], db_index=True, default='ACAD', help_text='Type of program enrollment', max_length=10, verbose_name='Enrollment Type')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('COMPLETED', 'Completed'), ('WITHDRAWN', 'Withdrawn'), ('SUSPENDED', 'Suspended'), ('TRANSFERRED', 'Transferred'), ('DROPPED', 'Dropped'), ('FAILED', 'Failed'), ('NO_SHOW_ACADEMIC', 'No Show (Academic)'), ('NO_SHOW_LANGUAGE', 'No Show (Language)')], db_index=True, default='ACTIVE', help_text='Current enrollment status', max_length=20, verbose_name='Enrollment Status')),
                ('start_date', models.DateField(db_index=True, help_text='Date when program enrollment began', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, db_index=True, help_text='Date when program enrollment ended (if applicable)', null=True, verbose_name='End Date')),
                ('entry_level', models.CharField(blank=True, help_text="Student's level when entering the program", max_length=50, verbose_name='Entry Level')),
                ('finishing_level', models.CharField(blank=True, help_text="Student's expected or actual finishing level", max_length=50, verbose_name='Finishing Level')),
                ('terms_active', models.PositiveIntegerField(default=0, help_text='Number of terms the student has been active in this program', verbose_name='Terms Active')),
                ('is_joint', models.BooleanField(default=False, help_text='Whether this is part of a joint program enrollment', verbose_name='Joint Program')),
                ('is_system_generated', models.BooleanField(default=False, help_text='Whether this enrollment was automatically created/updated by system', verbose_name='System Generated')),
                ('last_status_update', models.DateTimeField(auto_now=True, help_text='When the status was last updated (for tracking automated updates)', verbose_name='Last Status Update')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this program enrollment', verbose_name='Notes')),
                ('division', models.CharField(choices=[('LANG', 'Language Programs'), ('ACAD', 'Academic Programs'), ('PREP', 'Preparatory Programs'), ('PROF', 'Professional Development')], db_index=True, default='ACAD', help_text='Academic division (Language/Academic/etc)', max_length=10, verbose_name='Division')),
                ('cycle', models.CharField(choices=[('HS', 'High School (EHSS)'), ('CERT', 'Certificate Program'), ('PREP', 'Preparatory (IEAP/Foundation)'), ('BA', "Bachelor's Degree"), ('MA', "Master's Degree"), ('PHD', 'Doctoral Degree')], db_index=True, default='BA', help_text='Academic cycle or degree level', max_length=10, verbose_name='Cycle')),
                ('credits_earned', models.DecimalField(decimal_places=2, default=0, help_text='Total credits earned in this program', max_digits=6, verbose_name='Credits Earned')),
                ('credits_required', models.DecimalField(blank=True, decimal_places=2, help_text='Total credits required for program completion', max_digits=6, null=True, verbose_name='Credits Required')),
                ('gpa_at_exit', models.DecimalField(blank=True, decimal_places=2, help_text='Cumulative GPA when leaving the program', max_digits=3, null=True, verbose_name='GPA at Exit')),
                ('exit_reason', models.CharField(blank=True, choices=[('GRAD', 'Graduated'), ('COMP', 'Completed without Graduation'), ('TRAN_INT', 'Transferred to Another Program'), ('TRAN_EXT', 'Transferred to Another Institution'), ('DISM', 'Academic Dismissal'), ('FIN', 'Financial Reasons'), ('PERS', 'Personal Reasons'), ('MED', 'Medical Leave'), ('VISA', 'Visa/Immigration Issues'), ('NS', 'Never Attended'), ('UNK', 'Unknown/Not Specified')], db_index=True, help_text='Reason for leaving the program', max_length=15, verbose_name='Exit Reason')),
                ('is_deduced', models.BooleanField(default=False, help_text='Whether major was deduced from course enrollment patterns', verbose_name='Major Deduced')),
                ('deduction_confidence', models.DecimalField(blank=True, decimal_places=2, help_text='Confidence score (0-1) for deduced major', max_digits=3, null=True, verbose_name='Deduction Confidence')),
                ('completion_percentage', models.DecimalField(decimal_places=2, default=0, help_text='Percentage of program requirements completed', max_digits=5, verbose_name='Completion Percentage')),
                ('expected_completion_date', models.DateField(blank=True, help_text='Originally expected completion date', null=True, verbose_name='Expected Completion')),
                ('time_to_completion', models.PositiveIntegerField(blank=True, help_text='Days from start to completion/exit', null=True, verbose_name='Time to Completion')),
                ('enrollment_gaps', models.JSONField(blank=True, default=list, help_text='List of terms with no enrollment', verbose_name='Enrollment Gaps')),
                ('legacy_section_code', models.CharField(blank=True, db_index=True, help_text='Section code from legacy system (87=BA, 147=MA, etc)', max_length=10, verbose_name='Legacy Section Code')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('end_term', models.ForeignKey(blank=True, help_text='Term when enrollment ended (optional)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='program_enrollments_ending', to='curriculum.term', verbose_name='End Term')),
                ('enrolled_by', models.ForeignKey(blank=True, help_text='Staff member who processed the enrollment (null for system-generated)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='program_enrollments_created', to=settings.AUTH_USER_MODEL, verbose_name='Enrolled By')),
                ('program', models.ForeignKey(help_text='Academic program or major', on_delete=django.db.models.deletion.PROTECT, related_name='program_enrollments', to='curriculum.major', verbose_name='Program')),
                ('start_term', models.ForeignKey(blank=True, help_text='Term when enrollment began (optional for legacy data)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='program_enrollments_starting', to='curriculum.term', verbose_name='Start Term')),
                ('student', models.ForeignKey(help_text='Student enrolled in this program', on_delete=django.db.models.deletion.PROTECT, related_name='program_enrollments', to='people.studentprofile', verbose_name='Student')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Program Enrollment',
                'verbose_name_plural': 'Program Enrollments',
                'ordering': ['student', '-start_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProgramMilestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('milestone_type', models.CharField(choices=[('PROG_START', 'Program Start'), ('LEVEL_ADV', 'Level Advancement'), ('MAJOR_DEC', 'Major Declaration'), ('MAJOR_CHG', 'Major Change'), ('LEVEL_COMP', 'Level Completion'), ('PROG_COMP', 'Program Completion'), ('DEGREE', 'Degree Earned'), ('CERT', 'Certificate Earned'), ('WITHDRAW', 'Withdrawal'), ('DISMISS', 'Academic Dismissal'), ('LOA', 'Leave of Absence'), ('TRANSFER', 'Transfer'), ('READMIT', 'Readmission'), ('STATUS', 'Status Change')], db_index=True, help_text='Type of academic milestone', max_length=20, verbose_name='Milestone Type')),
                ('milestone_date', models.DateField(db_index=True, help_text='Date when milestone occurred', verbose_name='Milestone Date')),
                ('level', models.CharField(blank=True, help_text='Level for language programs', max_length=10, verbose_name='Level')),
                ('is_inferred', models.BooleanField(default=False, help_text='Whether milestone was deduced from enrollment data', verbose_name='Is Inferred')),
                ('confidence_score', models.DecimalField(decimal_places=2, default=Decimal('1.00'), help_text='Confidence in milestone accuracy (0.0-1.0)', max_digits=3, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))], verbose_name='Confidence Score')),
                ('inference_method', models.CharField(blank=True, help_text='Method used to infer milestone', max_length=50, verbose_name='Inference Method')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about milestone', verbose_name='Notes')),
                ('academic_term', models.ForeignKey(blank=True, help_text='Term when milestone occurred', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='program_milestones', to='curriculum.term', verbose_name='Academic Term')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('from_program', models.ForeignKey(blank=True, help_text='Previous program (for changes/transitions)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='transitions_from_milestones', to='curriculum.major', verbose_name='From Program')),
                ('journey', models.ForeignKey(help_text='Parent journey record', on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='enrollment.academicjourney', verbose_name='Academic Journey')),
                ('program', models.ForeignKey(blank=True, help_text='Program associated with milestone', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='milestones', to='curriculum.major', verbose_name='Program')),
                ('recorded_by', models.ForeignKey(blank=True, help_text='User who recorded milestone', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='recorded_milestones', to=settings.AUTH_USER_MODEL, verbose_name='Recorded By')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Program Milestone',
                'verbose_name_plural': 'Program Milestones',
                'ordering': ['journey', 'milestone_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProgramPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('transition_type', models.CharField(choices=[('INITIAL', 'Initial Enrollment'), ('PROGRESSION', 'Natural Progression'), ('CHANGE', 'Program Change'), ('RETURN', 'Return to Previous Program'), ('CONTINUATION', 'Continuation in Same Program'), ('GAP', 'Gap Period')], help_text='Type of transition', max_length=20, verbose_name='Transition Type')),
                ('transition_date', models.DateField(db_index=True, help_text='Date when this program period started', verbose_name='Transition Date')),
                ('from_program_type', models.CharField(blank=True, choices=[('IEAP', 'Intensive English for Academic Purposes'), ('GESL', 'General English as a Second Language'), ('EHSS', 'English for High School Students'), ('LANG_OTHER', 'Other Language Program'), ('BA', 'Bachelor of Arts'), ('MA', 'Master of Arts'), ('PHD', 'Doctoral Program'), ('CERT', 'Certificate Program')], help_text='Previous program type', max_length=20, null=True, verbose_name='From Program Type')),
                ('to_program_type', models.CharField(choices=[('IEAP', 'Intensive English for Academic Purposes'), ('GESL', 'General English as a Second Language'), ('EHSS', 'English for High School Students'), ('LANG_OTHER', 'Other Language Program'), ('BA', 'Bachelor of Arts'), ('MA', 'Master of Arts'), ('PHD', 'Doctoral Program'), ('CERT', 'Certificate Program')], help_text='New program type', max_length=20, verbose_name='To Program Type')),
                ('program_name', models.CharField(help_text='Full program name for display', max_length=200, verbose_name='Program Name')),
                ('duration_days', models.PositiveIntegerField(help_text='Days spent in this program period', verbose_name='Duration (Days)')),
                ('duration_months', models.DecimalField(decimal_places=1, help_text='Months spent in this program period', max_digits=5, verbose_name='Duration (Months)')),
                ('term_count', models.PositiveIntegerField(default=0, help_text='Number of terms enrolled in this period', verbose_name='Term Count')),
                ('total_credits', models.DecimalField(decimal_places=2, default=0, help_text='Total credits attempted in this period', max_digits=6, verbose_name='Total Credits')),
                ('completed_credits', models.DecimalField(decimal_places=2, default=0, help_text='Credits successfully completed', max_digits=6, verbose_name='Completed Credits')),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, help_text='GPA for this period', max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('4.00'))], verbose_name='GPA')),
                ('completion_status', models.CharField(choices=[('ACTIVE', 'Currently Active'), ('COMPLETED', 'Completed Successfully'), ('GRADUATED', 'Graduated with Degree'), ('DROPPED', 'Dropped Out'), ('INACTIVE', 'Inactive'), ('TRANSFERRED', 'Transferred')], help_text='Status at end of this period', max_length=20, verbose_name='Completion Status')),
                ('language_level', models.CharField(blank=True, help_text='Final level achieved (for language programs)', max_length=10, verbose_name='Language Level')),
                ('sequence_number', models.PositiveIntegerField(help_text="Order in student's journey (1-based)", verbose_name='Sequence Number')),
                ('confidence_score', models.DecimalField(decimal_places=2, default=Decimal('1.00'), help_text='Confidence in transition data (0.0-1.0)', max_digits=3, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('1.00'))], verbose_name='Confidence Score')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this transition', verbose_name='Notes')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('journey', models.ForeignKey(help_text='Parent journey record', on_delete=django.db.models.deletion.CASCADE, related_name='program_periods', to='enrollment.academicjourney', verbose_name='Academic Journey')),
                ('to_program', models.ForeignKey(blank=True, help_text='Specific program or major (for BA/MA)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='program_periods', to='curriculum.major', verbose_name='Program/Major')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Program Period',
                'verbose_name_plural': 'Program Periods',
                'ordering': ['journey', 'sequence_number'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ProgramTransition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transition_date', models.DateField(db_index=True, verbose_name='Transition Date')),
                ('transition_type', models.CharField(choices=[('PROG', 'Natural Progression (e.g., IEAP to BA)'), ('MAJOR', 'Change of Major'), ('LEVEL', 'Level Change (e.g., BA to MA)'), ('LAT', 'Lateral Move (e.g., between language programs)'), ('RESTART', 'Program Restart')], max_length=10, verbose_name='Transition Type')),
                ('transition_reason', models.TextField(blank=True, verbose_name='Transition Reason')),
                ('credits_transferred', models.DecimalField(decimal_places=2, default=0, max_digits=6, verbose_name='Credits Transferred')),
                ('gap_days', models.PositiveIntegerField(default=0, help_text='Days between programs', verbose_name='Gap Days')),
                ('from_enrollment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transitions_from', to='enrollment.programenrollment', verbose_name='From Program')),
                ('to_enrollment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transitions_to', to='enrollment.programenrollment', verbose_name='To Program')),
                ('transition_term', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='curriculum.term')),
            ],
            options={
                'verbose_name': 'Program Transition',
                'verbose_name_plural': 'Program Transitions',
                'ordering': ['from_enrollment__student', 'transition_date'],
            },
        ),
        migrations.CreateModel(
            name='SeniorProjectGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('project_title', models.CharField(help_text='Working title of the senior project', max_length=255, verbose_name='Project Title')),
                ('final_title', models.CharField(blank=True, help_text='Final title of the completed research paper', max_length=255, verbose_name='Final Paper Title')),
                ('project_description', models.TextField(blank=True, help_text='Detailed description of the project scope and objectives', verbose_name='Project Description')),
                ('status', models.CharField(choices=[('PROPOSED', 'Proposed'), ('APPROVED', 'Approved'), ('IN_PROGRESS', 'In Progress'), ('SUBMITTED', 'Submitted'), ('DEFENDED', 'Defended'), ('COMPLETED', 'Completed'), ('WITHDRAWN', 'Withdrawn')], db_index=True, default='PROPOSED', help_text='Current status of the project', max_length=20, verbose_name='Project Status')),
                ('proposal_date', models.DateField(blank=True, help_text='Date when project proposal was submitted', null=True, verbose_name='Proposal Date')),
                ('approval_date', models.DateField(blank=True, help_text='Date when project was approved by advisor/committee', null=True, verbose_name='Approval Date')),
                ('submission_date', models.DateField(blank=True, help_text='Date when final paper was submitted', null=True, verbose_name='Submission Date')),
                ('defense_date', models.DateField(blank=True, help_text='Date of project defense/presentation', null=True, verbose_name='Defense Date')),
                ('completion_date', models.DateField(blank=True, help_text='Date when project was officially completed', null=True, verbose_name='Completion Date')),
                ('registration_date', models.DateField(blank=True, help_text='Date when students were first registered for the senior project', null=True, verbose_name='Registration Date')),
                ('graduation_date', models.DateField(blank=True, help_text='Date when students graduated (from CSV data)', null=True, verbose_name='Graduation Date')),
                ('is_graduated', models.BooleanField(default=False, help_text='Whether the students in this group have graduated', verbose_name='Is Graduated')),
                ('notes', models.TextField(blank=True, help_text='Administrative notes about the project', verbose_name='Notes')),
                ('advisor', models.ForeignKey(help_text='Faculty member supervising this project', on_delete=django.db.models.deletion.PROTECT, related_name='advised_senior_projects', to='people.teacherprofile', verbose_name='Faculty Advisor')),
                ('course', models.ForeignKey(help_text='Course this senior project is associated with', limit_choices_to={'is_senior_project': True}, on_delete=django.db.models.deletion.PROTECT, related_name='senior_project_groups', to='curriculum.course', verbose_name='Senior Project Course')),
                ('registration_term', models.ForeignKey(blank=True, help_text='Term that contains the registration date (automatically determined)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='registered_senior_projects', to='curriculum.term', verbose_name='Registration Term')),
                ('students', models.ManyToManyField(help_text='Students participating in this senior project (1-5 students)', related_name='senior_project_groups', to='people.studentprofile', verbose_name='Group Members')),
                ('term', models.ForeignKey(help_text='Term when this project is being conducted', on_delete=django.db.models.deletion.PROTECT, related_name='senior_project_groups', to='curriculum.term', verbose_name='Term')),
            ],
            options={
                'verbose_name': 'Senior Project Group',
                'verbose_name_plural': 'Senior Project Groups',
                'ordering': ['-created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentCourseEligibility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('is_eligible', models.BooleanField(db_index=True, default=False, help_text='Whether the student is eligible for this course in this term', verbose_name='Is Eligible')),
                ('is_retake', models.BooleanField(db_index=True, default=False, help_text='Whether this would be a retake of the course', verbose_name='Is Retake')),
                ('previous_attempts', models.PositiveSmallIntegerField(default=0, help_text='Number of previous attempts at this course', verbose_name='Previous Attempts')),
                ('retry_priority_score', models.PositiveSmallIntegerField(default=0, help_text='Priority score for retake scheduling (higher = more priority)', verbose_name='Retry Priority Score')),
                ('last_calculated', models.DateTimeField(auto_now=True, help_text='When eligibility was last calculated', verbose_name='Last Calculated')),
                ('calculation_notes', models.TextField(blank=True, help_text='Notes about how eligibility was determined', verbose_name='Calculation Notes')),
                ('course', models.ForeignKey(help_text='Course for which eligibility is being checked', on_delete=django.db.models.deletion.CASCADE, related_name='student_eligibilities', to='curriculum.course', verbose_name='Course')),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_created', to=settings.AUTH_USER_MODEL, verbose_name='Created by')),
                ('missing_prerequisites', models.ManyToManyField(blank=True, help_text='Prerequisites the student has not yet completed', related_name='blocking_eligibilities', to='curriculum.course', verbose_name='Missing Prerequisites')),
                ('student', models.ForeignKey(help_text='Student whose eligibility is being tracked', on_delete=django.db.models.deletion.PROTECT, related_name='course_eligibilities', to='people.studentprofile', verbose_name='Student')),
                ('term', models.ForeignKey(help_text='Term for which eligibility applies', on_delete=django.db.models.deletion.CASCADE, related_name='course_eligibilities', to='curriculum.term', verbose_name='Term')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated this record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(app_label)s_%(class)s_updated', to=settings.AUTH_USER_MODEL, verbose_name='Updated by')),
            ],
            options={
                'verbose_name': 'Student Course Eligibility',
                'verbose_name_plural': 'Student Course Eligibilities',
                'ordering': ['student', 'term', 'course'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='StudentCycleStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('cycle_type', models.CharField(choices=[('NEW', 'New Student'), ('L2B', 'Language to Bachelor'), ('B2M', 'Bachelor to Master')], help_text='Type of cycle change', max_length=3, verbose_name='Cycle Type')),
                ('detected_date', models.DateField(help_text='Date when cycle change was detected', verbose_name='Detected Date')),
                ('is_active', models.BooleanField(default=True, help_text='Active until student graduates from target program', verbose_name='Is Active')),
                ('deactivated_date', models.DateField(blank=True, help_text='Date when status was deactivated (graduation/withdrawal)', null=True, verbose_name='Deactivated Date')),
                ('deactivation_reason', models.CharField(blank=True, choices=[('GRADUATED', 'Graduated'), ('WITHDRAWN', 'Withdrawn'), ('TRANSFERRED', 'Transferred'), ('OTHER', 'Other')], help_text='Reason for deactivation', max_length=50, verbose_name='Deactivation Reason')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this cycle change', verbose_name='Notes')),
                ('source_program', models.ForeignKey(blank=True, help_text='Program student was in before change (null for new students)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cycle_departures', to='curriculum.major', verbose_name='Source Program')),
                ('student', models.ForeignKey(help_text='Student with cycle change status', on_delete=django.db.models.deletion.PROTECT, related_name='cycle_statuses', to='people.studentprofile', verbose_name='Student')),
                ('target_program', models.ForeignKey(help_text='Program student changed to', on_delete=django.db.models.deletion.PROTECT, related_name='cycle_arrivals', to='curriculum.major', verbose_name='Target Program')),
            ],
            options={
                'verbose_name': 'Student Cycle Status',
                'verbose_name_plural': 'Student Cycle Statuses',
                'db_table': 'enrollment_student_cycle_status',
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddIndex(
            model_name='academicjourney',
            index=models.Index(fields=['student', 'start_date'], name='enrollment__student_f8fdeb_idx'),
        ),
        migrations.AddIndex(
            model_name='academicjourney',
            index=models.Index(fields=['transition_status', 'program_type'], name='enrollment__transit_0b0c79_idx'),
        ),
        migrations.AddIndex(
            model_name='academicjourney',
            index=models.Index(fields=['program', 'transition_status'], name='enrollment__program_d85365_idx'),
        ),
        migrations.AddIndex(
            model_name='academicjourney',
            index=models.Index(fields=['requires_review', 'confidence_score'], name='enrollment__require_9cba94_idx'),
        ),
        migrations.AddIndex(
            model_name='academicjourney',
            index=models.Index(fields=['data_source', 'confidence_score'], name='enrollment__data_so_868b2e_idx'),
        ),
        migrations.AddIndex(
            model_name='certificateissuance',
            index=models.Index(fields=['student', 'certificate_type'], name='enrollment__student_f36791_idx'),
        ),
        migrations.AddIndex(
            model_name='certificateissuance',
            index=models.Index(fields=['issue_date', 'certificate_type'], name='enrollment__issue_d_f5975c_idx'),
        ),
        migrations.AddIndex(
            model_name='certificateissuance',
            index=models.Index(fields=['certificate_number'], name='enrollment__certifi_7d659d_idx'),
        ),
        migrations.AddIndex(
            model_name='certificateissuance',
            index=models.Index(fields=['program', 'certificate_type'], name='enrollment__program_67cf0e_idx'),
        ),
        migrations.AddIndex(
            model_name='classheaderenrollment',
            index=models.Index(fields=['student', 'status'], name='enrollment__student_b68873_idx'),
        ),
        migrations.AddIndex(
            model_name='classheaderenrollment',
            index=models.Index(fields=['class_header', 'status'], name='enrollment__class_h_0a9de0_idx'),
        ),
        migrations.AddIndex(
            model_name='classheaderenrollment',
            index=models.Index(fields=['enrollment_date'], name='enrollment__enrollm_c92ff7_idx'),
        ),
        migrations.AddIndex(
            model_name='classheaderenrollment',
            index=models.Index(fields=['status', 'completion_date'], name='enrollment__status_fb7b32_idx'),
        ),
        migrations.AddIndex(
            model_name='classheaderenrollment',
            index=models.Index(fields=['status'], name='enrollment_status_idx'),
        ),
        migrations.AddConstraint(
            model_name='classheaderenrollment',
            constraint=models.UniqueConstraint(condition=models.Q(('status__in', ['ENROLLED', 'ACTIVE'])), fields=('student', 'class_header'), name='unique_active_enrollment_per_class'),
        ),
        migrations.AddConstraint(
            model_name='classheaderenrollment',
            constraint=models.CheckConstraint(condition=models.Q(('grade_points__isnull', True), models.Q(('grade_points__gte', 0), ('grade_points__lte', 4)), _connector='OR'), name='valid_grade_points_range'),
        ),
        migrations.AlterUniqueTogether(
            name='classheaderenrollment',
            unique_together={('student', 'class_header')},
        ),
        migrations.AddIndex(
            model_name='classpartenrollment',
            index=models.Index(fields=['student', 'is_active'], name='enrollment__student_b10073_idx'),
        ),
        migrations.AddIndex(
            model_name='classpartenrollment',
            index=models.Index(fields=['class_part', 'is_active'], name='enrollment__class_p_ea6953_idx'),
        ),
        migrations.AddIndex(
            model_name='classpartenrollment',
            index=models.Index(fields=['enrollment_date'], name='enrollment__enrollm_d4a3eb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='classpartenrollment',
            unique_together={('student', 'class_part', 'is_active')},
        ),
        migrations.AddIndex(
            model_name='classsessionexemption',
            index=models.Index(fields=['class_header_enrollment'], name='enrollment__class_h_df2cb0_idx'),
        ),
        migrations.AddIndex(
            model_name='classsessionexemption',
            index=models.Index(fields=['class_session'], name='enrollment__class_s_43ca6b_idx'),
        ),
        migrations.AddIndex(
            model_name='classsessionexemption',
            index=models.Index(fields=['exemption_date'], name='enrollment__exempti_58c983_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='classsessionexemption',
            unique_together={('class_header_enrollment', 'class_session')},
        ),
        migrations.AddIndex(
            model_name='majordeclaration',
            index=models.Index(fields=['student', 'is_active', 'effective_date'], name='enrollment__student_8aa085_idx'),
        ),
        migrations.AddIndex(
            model_name='majordeclaration',
            index=models.Index(fields=['major', 'is_active'], name='enrollment__major_i_ed90ef_idx'),
        ),
        migrations.AddIndex(
            model_name='majordeclaration',
            index=models.Index(fields=['effective_date', 'is_active'], name='enrollment__effecti_34daed_idx'),
        ),
        migrations.AddIndex(
            model_name='majordeclaration',
            index=models.Index(fields=['declared_date'], name='enrollment__declare_ec89ed_idx'),
        ),
        migrations.AddIndex(
            model_name='majordeclaration',
            index=models.Index(fields=['requires_approval', 'approved_by'], name='enrollment__require_a100ba_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='majordeclaration',
            unique_together={('student', 'effective_date', 'is_active')},
        ),
        migrations.AddIndex(
            model_name='programenrollment',
            index=models.Index(fields=['student', 'status'], name='enrollment__student_e47ce4_idx'),
        ),
        migrations.AddIndex(
            model_name='programenrollment',
            index=models.Index(fields=['program', 'enrollment_type'], name='enrollment__program_d9f25c_idx'),
        ),
        migrations.AddIndex(
            model_name='programenrollment',
            index=models.Index(fields=['start_date', 'end_date'], name='enrollment__start_d_6b7a82_idx'),
        ),
        migrations.AddIndex(
            model_name='programenrollment',
            index=models.Index(fields=['start_term', 'end_term'], name='enrollment__start_t_e761f9_idx'),
        ),
        migrations.AddIndex(
            model_name='programenrollment',
            index=models.Index(fields=['division', 'cycle'], name='enrollment_division_cycle_idx'),
        ),
        migrations.AddIndex(
            model_name='programenrollment',
            index=models.Index(fields=['exit_reason', 'status'], name='enrollment_exit_status_idx'),
        ),
        migrations.AddIndex(
            model_name='programenrollment',
            index=models.Index(fields=['is_deduced', 'deduction_confidence'], name='enrollment_deduction_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='programenrollment',
            unique_together={('student', 'program', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='programmilestone',
            index=models.Index(fields=['journey', 'milestone_date'], name='enrollment__journey_28adc3_idx'),
        ),
        migrations.AddIndex(
            model_name='programmilestone',
            index=models.Index(fields=['milestone_type', 'milestone_date'], name='enrollment__milesto_bb579d_idx'),
        ),
        migrations.AddIndex(
            model_name='programmilestone',
            index=models.Index(fields=['program', 'milestone_type'], name='enrollment__program_c1e9c1_idx'),
        ),
        migrations.AddIndex(
            model_name='programmilestone',
            index=models.Index(fields=['is_inferred', 'confidence_score'], name='enrollment__is_infe_530298_idx'),
        ),
        migrations.AddIndex(
            model_name='programperiod',
            index=models.Index(fields=['journey', 'sequence_number'], name='enrollment__journey_fb1991_idx'),
        ),
        migrations.AddIndex(
            model_name='programperiod',
            index=models.Index(fields=['transition_date', 'to_program_type'], name='enrollment__transit_495ebb_idx'),
        ),
        migrations.AddIndex(
            model_name='programperiod',
            index=models.Index(fields=['completion_status', 'to_program_type'], name='enrollment__complet_28c73f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='programperiod',
            unique_together={('journey', 'sequence_number')},
        ),
        migrations.AddIndex(
            model_name='programtransition',
            index=models.Index(fields=['transition_date'], name='transition_date_idx'),
        ),
        migrations.AddIndex(
            model_name='programtransition',
            index=models.Index(fields=['transition_type'], name='transition_type_idx'),
        ),
        migrations.AddIndex(
            model_name='seniorprojectgroup',
            index=models.Index(fields=['course', 'term'], name='enrollment__course__1c30b3_idx'),
        ),
        migrations.AddIndex(
            model_name='seniorprojectgroup',
            index=models.Index(fields=['status'], name='enrollment__status_65c556_idx'),
        ),
        migrations.AddIndex(
            model_name='seniorprojectgroup',
            index=models.Index(fields=['advisor'], name='enrollment__advisor_ddc3be_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='seniorprojectgroup',
            unique_together={('course', 'term', 'project_title')},
        ),
        migrations.AddIndex(
            model_name='studentcourseeligibility',
            index=models.Index(fields=['student', 'term', 'is_eligible'], name='enrollment__student_6b2f66_idx'),
        ),
        migrations.AddIndex(
            model_name='studentcourseeligibility',
            index=models.Index(fields=['course', 'term', 'is_eligible'], name='enrollment__course__5b6343_idx'),
        ),
        migrations.AddIndex(
            model_name='studentcourseeligibility',
            index=models.Index(fields=['is_retake', 'retry_priority_score'], name='enrollment__is_reta_51ff8b_idx'),
        ),
        migrations.AddIndex(
            model_name='studentcourseeligibility',
            index=models.Index(fields=['last_calculated'], name='enrollment__last_ca_3755c8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentcourseeligibility',
            unique_together={('student', 'course', 'term')},
        ),
        migrations.AddIndex(
            model_name='studentcyclestatus',
            index=models.Index(fields=['student', 'is_active'], name='enrollment__student_f66c8d_idx'),
        ),
        migrations.AddIndex(
            model_name='studentcyclestatus',
            index=models.Index(fields=['cycle_type', 'is_active'], name='enrollment__cycle_t_e32185_idx'),
        ),
        migrations.AddIndex(
            model_name='studentcyclestatus',
            index=models.Index(fields=['detected_date'], name='enrollment__detecte_277cac_idx'),
        ),
        migrations.AddIndex(
            model_name='studentcyclestatus',
            index=models.Index(fields=['target_program', 'is_active'], name='enrollment__target__4db3c8_idx'),
        ),
        migrations.AddConstraint(
            model_name='studentcyclestatus',
            constraint=models.UniqueConstraint(fields=('student', 'cycle_type', 'target_program'), name='unique_student_cycle_program'),
        ),
    ]
