# Generated by Django 5.2.6 on 2025-09-26 15:51

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("people", "0003_alter_studentprofile_legacy_ipk_contact_and_more"),
        ("scheduling", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="LeaveType",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for this leave type",
                        max_length=100,
                        unique=True,
                        verbose_name="Leave Type Name",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Short code for reports (e.g., 'SICK', 'VAC')",
                        max_length=20,
                        unique=True,
                        verbose_name="Leave Code",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("SICK", "Sick Leave"),
                            ("PERSONAL", "Personal Leave"),
                            ("VACATION", "Vacation/Holiday"),
                            ("MATERNITY", "Maternity Leave"),
                            ("PATERNITY", "Paternity Leave"),
                            ("BEREAVEMENT", "Bereavement Leave"),
                            ("PROFESSIONAL", "Professional Development"),
                            ("UNPAID", "Unpaid Leave"),
                            ("OTHER", "Other"),
                        ],
                        help_text="Category of leave for policy application",
                        max_length=20,
                        verbose_name="Category",
                    ),
                ),
                (
                    "requires_documentation",
                    models.BooleanField(
                        default=False,
                        help_text="Whether supporting documents are required",
                        verbose_name="Requires Documentation",
                    ),
                ),
                (
                    "max_consecutive_days",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum consecutive days allowed (null = unlimited)",
                        null=True,
                        verbose_name="Max Consecutive Days",
                    ),
                ),
                (
                    "advance_notice_days",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Days of advance notice required (0 for emergency leave)",
                        verbose_name="Advance Notice Required (Days)",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this leave type is currently available",
                        verbose_name="Is Active",
                    ),
                ),
            ],
            options={
                "verbose_name": "Leave Type",
                "verbose_name_plural": "Leave Types",
                "ordering": ["category", "name"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="LeaveRequest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                ("start_date", models.DateField(help_text="First day of leave", verbose_name="Start Date")),
                ("end_date", models.DateField(help_text="Last day of leave", verbose_name="End Date")),
                ("reason", models.TextField(help_text="Detailed reason for leave request", verbose_name="Reason")),
                (
                    "priority",
                    models.CharField(
                        choices=[("LOW", "Low"), ("NORMAL", "Normal"), ("HIGH", "High"), ("EMERGENCY", "Emergency")],
                        default="NORMAL",
                        max_length=10,
                        verbose_name="Priority",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("PENDING", "Pending Approval"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                            ("CANCELLED", "Cancelled"),
                            ("SUB_PENDING", "Awaiting Substitute"),
                            ("SUB_ASSIGNED", "Substitute Assigned"),
                            ("COMPLETED", "Completed"),
                        ],
                        default="DRAFT",
                        max_length=15,
                        verbose_name="Status",
                    ),
                ),
                (
                    "supporting_documents",
                    models.TextField(
                        blank=True, help_text="JSON array of document URLs/paths", verbose_name="Supporting Documents"
                    ),
                ),
                (
                    "submitted_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When request was submitted for approval",
                        null=True,
                        verbose_name="Submitted Date",
                    ),
                ),
                ("review_date", models.DateTimeField(blank=True, null=True, verbose_name="Review Date")),
                (
                    "review_notes",
                    models.TextField(
                        blank=True, help_text="Notes from reviewer/approver", verbose_name="Review Notes"
                    ),
                ),
                (
                    "requires_substitute",
                    models.BooleanField(
                        default=True,
                        help_text="Whether a substitute teacher is needed",
                        verbose_name="Requires Substitute",
                    ),
                ),
                (
                    "substitute_notes",
                    models.TextField(
                        blank=True, help_text="Special instructions for substitute", verbose_name="Substitute Notes"
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="reviewed_leave_requests",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Reviewed By",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="leave_mgmt_requests",
                        to="people.teacherprofile",
                        verbose_name="Teacher",
                    ),
                ),
                (
                    "leave_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="requests",
                        to="leave_management.leavetype",
                        verbose_name="Leave Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Leave Request",
                "verbose_name_plural": "Leave Requests",
                "ordering": ["-start_date", "-created_at"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="LeavePolicy",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "contract_type",
                    models.CharField(
                        help_text="Type of teacher contract (e.g., 'FULL_TIME', 'PART_TIME', 'CONTRACT')",
                        max_length=50,
                        verbose_name="Contract Type",
                    ),
                ),
                (
                    "annual_days",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Number of days allowed per year",
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Annual Days Allowed",
                    ),
                ),
                (
                    "accrual_rate",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("0"),
                        help_text="Days accrued per month (0 if granted annually)",
                        max_digits=5,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Monthly Accrual Rate",
                    ),
                ),
                (
                    "carries_forward",
                    models.BooleanField(
                        default=False,
                        help_text="Whether unused leave carries to next year",
                        verbose_name="Carries Forward",
                    ),
                ),
                (
                    "max_carryover",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Maximum days that can carry forward",
                        max_digits=5,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Max Carryover Days",
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(help_text="When this policy becomes effective", verbose_name="Effective Date"),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="When this policy ends (null = current)",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "leave_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="policies",
                        to="leave_management.leavetype",
                        verbose_name="Leave Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Leave Policy",
                "verbose_name_plural": "Leave Policies",
                "ordering": ["contract_type", "leave_type", "-effective_date"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="LeaveBalance",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                ("year", models.PositiveIntegerField(help_text="Calendar year for this balance", verbose_name="Year")),
                (
                    "entitled_days",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Total days entitled for the year",
                        max_digits=5,
                        verbose_name="Entitled Days",
                    ),
                ),
                (
                    "used_days",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Days used so far",
                        max_digits=5,
                        verbose_name="Used Days",
                    ),
                ),
                (
                    "pending_days",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Days in pending requests",
                        max_digits=5,
                        verbose_name="Pending Days",
                    ),
                ),
                (
                    "carried_forward",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0"),
                        help_text="Days carried from previous year",
                        max_digits=5,
                        verbose_name="Carried Forward",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="leave_mgmt_balances",
                        to="people.teacherprofile",
                        verbose_name="Teacher",
                    ),
                ),
                (
                    "leave_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="balances",
                        to="leave_management.leavetype",
                        verbose_name="Leave Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Leave Balance",
                "verbose_name_plural": "Leave Balances",
                "ordering": ["teacher", "year", "leave_type"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SubstituteAssignment",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Confirmation"),
                            ("CONFIRMED", "Confirmed"),
                            ("DECLINED", "Declined by Substitute"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=15,
                        verbose_name="Status",
                    ),
                ),
                (
                    "assignment_date",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Assignment Date"),
                ),
                (
                    "notification_sent",
                    models.BooleanField(
                        default=False,
                        help_text="Whether substitute has been notified",
                        verbose_name="Notification Sent",
                    ),
                ),
                ("notification_date", models.DateTimeField(blank=True, null=True, verbose_name="Notification Date")),
                (
                    "substitute_notes",
                    models.TextField(
                        blank=True,
                        help_text="Instructions and information for substitute",
                        verbose_name="Notes for Substitute",
                    ),
                ),
                (
                    "confirmed_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When substitute confirmed assignment",
                        null=True,
                        verbose_name="Confirmed Date",
                    ),
                ),
                ("declined_date", models.DateTimeField(blank=True, null=True, verbose_name="Declined Date")),
                ("decline_reason", models.TextField(blank=True, verbose_name="Decline Reason")),
                (
                    "permissions_granted",
                    models.BooleanField(
                        default=False,
                        help_text="Whether attendance permissions have been granted",
                        verbose_name="Permissions Granted",
                    ),
                ),
                (
                    "permissions_granted_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Permissions Granted Date"),
                ),
                (
                    "permissions_revoked_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Permissions Revoked Date"),
                ),
                (
                    "assigned_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="assigned_substitutes",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Assigned By",
                    ),
                ),
                (
                    "classes_to_cover",
                    models.ManyToManyField(
                        blank=True,
                        related_name="substitute_assignments",
                        to="scheduling.classpart",
                        verbose_name="Classes to Cover",
                    ),
                ),
                (
                    "leave_request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="substitute_assignments",
                        to="leave_management.leaverequest",
                        verbose_name="Leave Request",
                    ),
                ),
                (
                    "substitute_teacher",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="leave_mgmt_substitute_assignments",
                        to="people.teacherprofile",
                        verbose_name="Substitute Teacher",
                    ),
                ),
            ],
            options={
                "verbose_name": "Substitute Assignment",
                "verbose_name_plural": "Substitute Assignments",
                "ordering": ["-assignment_date"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="LeaveReport",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "report_type",
                    models.CharField(
                        choices=[
                            ("MONTHLY", "Monthly Report"),
                            ("QUARTERLY", "Quarterly Report"),
                            ("ANNUAL", "Annual Report"),
                            ("CUSTOM", "Custom Period"),
                        ],
                        max_length=15,
                        verbose_name="Report Type",
                    ),
                ),
                (
                    "period_start",
                    models.DateField(help_text="Start date of reporting period", verbose_name="Period Start"),
                ),
                ("period_end", models.DateField(help_text="End date of reporting period", verbose_name="Period End")),
                (
                    "summary_data",
                    models.JSONField(
                        default=dict, help_text="Summary statistics for the period", verbose_name="Summary Data"
                    ),
                ),
                (
                    "detail_data",
                    models.JSONField(default=dict, help_text="Detailed leave records", verbose_name="Detail Data"),
                ),
                (
                    "generated_date",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Generated Date"),
                ),
                (
                    "report_file",
                    models.FileField(
                        blank=True,
                        help_text="Generated PDF/Excel report file",
                        null=True,
                        upload_to="leave_reports/%Y/%m/",
                        verbose_name="Report File",
                    ),
                ),
                (
                    "generated_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="generated_leave_reports",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Generated By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Leave Report",
                "verbose_name_plural": "Leave Reports",
                "ordering": ["-period_end", "-generated_date"],
                "indexes": [
                    models.Index(fields=["report_type", "-period_end"], name="leave_manag_report__4d9a7a_idx"),
                    models.Index(fields=["-generated_date"], name="leave_manag_generat_2f1b54_idx"),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddIndex(
            model_name="leaverequest",
            index=models.Index(fields=["teacher", "-start_date"], name="leave_manag_teacher_ee440f_idx"),
        ),
        migrations.AddIndex(
            model_name="leaverequest",
            index=models.Index(fields=["status", "start_date"], name="leave_manag_status_4e9c54_idx"),
        ),
        migrations.AddIndex(
            model_name="leaverequest",
            index=models.Index(fields=["priority", "status"], name="leave_manag_priorit_2dfc66_idx"),
        ),
        migrations.AddIndex(
            model_name="leaverequest",
            index=models.Index(fields=["requires_substitute", "status"], name="leave_manag_require_51af8a_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="leavepolicy",
            unique_together={("contract_type", "leave_type", "effective_date")},
        ),
        migrations.AddIndex(
            model_name="leavebalance",
            index=models.Index(fields=["teacher", "year"], name="leave_manag_teacher_72c217_idx"),
        ),
        migrations.AddIndex(
            model_name="leavebalance",
            index=models.Index(fields=["leave_type", "year"], name="leave_manag_leave_t_0a5b67_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="leavebalance",
            unique_together={("teacher", "leave_type", "year")},
        ),
        migrations.AddIndex(
            model_name="substituteassignment",
            index=models.Index(fields=["leave_request", "status"], name="leave_manag_leave_r_94d55c_idx"),
        ),
        migrations.AddIndex(
            model_name="substituteassignment",
            index=models.Index(fields=["substitute_teacher", "status"], name="leave_manag_substit_86349c_idx"),
        ),
        migrations.AddIndex(
            model_name="substituteassignment",
            index=models.Index(fields=["status", "assignment_date"], name="leave_manag_status_08ca75_idx"),
        ),
    ]
