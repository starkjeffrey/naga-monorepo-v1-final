# Generated by Django 5.2.5 on 2025-08-28 12:49

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PlacementTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('name', models.CharField(help_text='Descriptive name for this placement test', max_length=100, verbose_name='Test Name')),
                ('program', models.CharField(choices=[('GENERAL', 'General English (GESL)'), ('ACADEMIC', 'Academic English (IEAP)'), ('BUSINESS', 'Business English'), ('HIGHSCHOOL', 'English for High School (EHSS)'), ('SATURDAY', 'Weekend Express Saturday'), ('SUNDAY', 'Weekend Express Sunday'), ('BACHELORS', "Bachelor's Degree Program"), ('MASTERS', "Master's Degree Program")], help_text='Program this test is designed for', max_length=20, verbose_name='Target Program')),
                ('test_type', models.CharField(choices=[('ONLINE', 'Online Test'), ('PAPER', 'Paper Test'), ('INTERVIEW', 'Oral Interview'), ('COMBINED', 'Combined Format')], default='ONLINE', help_text='Format of the test administration', max_length=20, verbose_name='Test Type')),
                ('max_score', models.PositiveSmallIntegerField(default=100, help_text='Highest possible score on this test', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)], verbose_name='Maximum Score')),
                ('passing_score', models.PositiveSmallIntegerField(default=60, help_text='Minimum score required to place into program', verbose_name='Minimum Passing Score')),
                ('duration_minutes', models.PositiveSmallIntegerField(default=90, help_text='Time allowed to complete the test', validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(300)], verbose_name='Test Duration (Minutes)')),
                ('instructions', models.TextField(blank=True, help_text='Instructions given to test takers', verbose_name='Test Instructions')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this test is currently in use', verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Placement Test',
                'verbose_name_plural': 'Placement Tests',
                'ordering': ['program', 'name'],
                'indexes': [models.Index(fields=['program', 'is_active'], name='level_testi_program_aa0ec8_idx')],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='PotentialStudent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('application_id', models.UUIDField(default=uuid.uuid4, help_text='Unique identifier for this application', unique=True, verbose_name='Application ID')),
                ('test_number', models.CharField(blank=True, help_text='Generated test number (T0012345 format)', max_length=10, unique=True, verbose_name='Test Number')),
                ('family_name_eng', models.CharField(help_text='Last name in English', max_length=50, verbose_name='Family Name (English)')),
                ('personal_name_eng', models.CharField(help_text='First/given name in English', max_length=50, verbose_name='Personal Name (English)')),
                ('family_name_khm', models.CharField(blank=True, help_text='Last name in Khmer script', max_length=50, verbose_name='Family Name (Khmer)')),
                ('personal_name_khm', models.CharField(blank=True, help_text='First/given name in Khmer script', max_length=50, verbose_name='Personal Name (Khmer)')),
                ('preferred_gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('N', 'Non-Binary/Other'), ('X', 'Prefer not to say')], help_text='Gender identity preference', max_length=1, verbose_name='Preferred Gender')),
                ('date_of_birth', models.DateField(help_text='Birth date for age verification and duplicate checking', verbose_name='Date of Birth')),
                ('birth_province', models.CharField(choices=[('BANTEAY_MEANCHEY', 'Banteay Meanchey'), ('BATTAMBANG', 'Battambang'), ('KAMPONG_CHAM', 'Kampong Cham'), ('KAMPONG_CHHNANG', 'Kampong Chhnang'), ('KAMPONG_SPEU', 'Kampong Speu'), ('KAMPONG_THOM', 'Kampong Thom'), ('KAMPOT', 'Kampot'), ('KANDAL', 'Kandal'), ('KEP', 'Kep'), ('KOH_KONG', 'Koh Kong'), ('KRATIE', 'Kratie'), ('MONDULKIRI', 'Mondulkiri'), ('ODDAR_MEANCHEY', 'Oddar Meanchey'), ('PAILIN', 'Pailin'), ('PHNOM_PENH', 'Phnom Penh'), ('PREAH_SIHANOUK', 'Preah Sihanouk'), ('PREAH_VIHEAR', 'Preah Vihear'), ('PREY_VENG', 'Prey Veng'), ('PURSAT', 'Pursat'), ('RATANAKIRI', 'Ratanakiri'), ('SIEM_REAP', 'Siem Reap'), ('STUNG_TRENG', 'Stung Treng'), ('SVAY_RIENG', 'Svay Rieng'), ('TAKEO', 'Takeo'), ('TBOUNG_KHMUM', 'Tboung Khmum'), ('INTERNATIONAL', 'International/Other'), ('UNKNOWN', 'Unknown')], help_text='Province of birth for duplicate detection', max_length=50, verbose_name='Birth Province')),
                ('phone_number', models.CharField(help_text='Primary contact phone number', max_length=20, verbose_name='Phone Number')),
                ('telegram_number', models.CharField(blank=True, help_text='Telegram contact if different from phone', max_length=20, verbose_name='Telegram Number')),
                ('personal_email', models.EmailField(blank=True, help_text='Personal email address for communications', max_length=254, verbose_name='Email Address')),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Name of emergency contact person', max_length=100, verbose_name='Emergency Contact Name')),
                ('emergency_contact_phone', models.CharField(blank=True, help_text='Phone number of emergency contact', max_length=20, verbose_name='Emergency Contact Phone')),
                ('emergency_contact_relationship', models.CharField(blank=True, choices=[('FATHER', 'Father'), ('MOTHER', 'Mother'), ('SPOUSE', 'Spouse'), ('PARTNER', 'Partner'), ('SIBLING', 'Sibling'), ('GRANDPARENT', 'Grandparent'), ('GUARDIAN', 'Legal Guardian'), ('FRIEND', 'Friend'), ('OTHER', 'Other')], help_text='Relationship to emergency contact', max_length=15, verbose_name='Emergency Contact Relationship')),
                ('current_study_status', models.CharField(blank=True, choices=[('high_school', 'High School'), ('university', 'University'), ('not_studying', 'Not studying')], help_text='Your current educational status', max_length=20, verbose_name='Where are you currently studying?')),
                ('current_high_school', models.CharField(blank=True, choices=[('AHS', 'Angkor High School'), ('JAN10', '10 January High School'), ('SAMPOVEUHS', 'Sampov Eu High School'), ('NORTHBRIDGE', 'Northbridge International School'), ('ISPP', 'International School of Phnom Penh'), ('WESTLINE', 'Westline School'), ('ICAN', 'iCAN British International School'), ('LOGOS', 'Logos International School'), ('PUBLIC_HS', 'Public High School'), ('PRIVATE_HS', 'Private High School'), ('OTHER_HS', 'Other High School')], help_text='High school you are currently attending', max_length=20, verbose_name='Current High School')),
                ('current_university', models.CharField(blank=True, choices=[('BELTEI', 'Beltei International University'), ('NORTON', 'Norton University'), ('ROYAL', 'Royal University of Phnom Penh'), ('ZAMAN', 'Zaman University'), ('PUC', 'Pannasastra University of Cambodia'), ('IFL', 'Institute for Foreign Languages (IFL)'), ('BUILD_BRIGHT', 'Build Bright University'), ('CAMBODIA_MEKONG', 'Cambodia Mekong University'), ('OTHER_UNI', 'Other University')], help_text='University you are currently attending', max_length=20, verbose_name='Current University')),
                ('work_field', models.CharField(blank=True, choices=[('hotel_restaurant', 'Hotel / Restaurant'), ('medical_pharmacy', 'Medical office / Pharmacy'), ('small_company', 'Small Company'), ('not_working', 'Not working')], help_text='Your current work field', max_length=20, verbose_name='Work Field')),
                ('other_school_name', models.CharField(blank=True, help_text="School name if 'Other' is selected", max_length=100, verbose_name='Other School Name')),
                ('current_school', models.CharField(choices=[('NORTHBRIDGE', 'Northbridge International School'), ('ISPP', 'International School of Phnom Penh'), ('WESTLINE', 'Westline School'), ('BELTEI', 'Beltei International University'), ('NORTON', 'Norton University'), ('ROYAL', 'Royal University of Phnom Penh'), ('ZAMAN', 'Zaman University'), ('PUBLIC', 'Public School'), ('PRIVATE', 'Private School'), ('INTERNATIONAL', 'International School'), ('OTHER', 'Other School')], default='OTHER', help_text='Current educational institution', max_length=20, verbose_name='Current School')),
                ('current_grade', models.PositiveSmallIntegerField(blank=True, help_text='Current grade level (6-12) if in high school', null=True, validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(12)], verbose_name='Current Grade')),
                ('is_graduate', models.BooleanField(default=False, help_text='Check if already graduated from high school', verbose_name='High School Graduate')),
                ('last_english_school', models.CharField(blank=True, help_text='Previous English language institution', max_length=100, verbose_name='Last English School')),
                ('last_english_level', models.CharField(blank=True, help_text='Previous English level achieved', max_length=50, verbose_name='Last English Level')),
                ('last_english_textbook', models.CharField(blank=True, help_text='Most recent English textbook series', max_length=100, verbose_name='Last Textbook Used')),
                ('last_english_study_period', models.CharField(blank=True, choices=[('studying_now', 'Studying now in school'), ('never_studied', 'Never studied'), ('3_months', '3 months ago'), ('6_months', '6 months ago'), ('over_1_year', 'Over 1 year ago')], help_text='When you last studied English formally', max_length=20, null=True, verbose_name='When Did You Last Study English')),
                ('last_english_date', models.DateField(blank=True, help_text='DEPRECATED - Use last_english_study_period instead', null=True, verbose_name='Last English Study Date')),
                ('preferred_program', models.CharField(choices=[('GENERAL', 'General English (GESL)'), ('ACADEMIC', 'Academic English (IEAP)'), ('BUSINESS', 'Business English'), ('HIGHSCHOOL', 'English for High School (EHSS)'), ('SATURDAY', 'Weekend Express Saturday'), ('SUNDAY', 'Weekend Express Sunday'), ('BACHELORS', "Bachelor's Degree Program"), ('MASTERS', "Master's Degree Program")], help_text='Desired English program', max_length=20, verbose_name='Preferred Program')),
                ('preferred_time_slot', models.CharField(choices=[('MORNING', 'Morning (7:00 AM - 11:00 AM)'), ('AFTERNOON', 'Afternoon (1:00 PM - 5:00 PM)'), ('EVENING', 'Evening (5:30 PM - 9:30 PM)'), ('WEEKEND', 'Weekend (Saturday/Sunday)'), ('FLEXIBLE', 'Flexible Schedule')], help_text='Preferred study schedule', max_length=20, verbose_name='Preferred Time Slot')),
                ('preferred_start_term', models.CharField(blank=True, help_text='When you would like to begin studies', max_length=50, verbose_name='Preferred Start Term')),
                ('status', models.CharField(choices=[('INITIATED', 'Application Started'), ('REGISTERED', 'Registration Complete'), ('DUPLICATE_CHECK', 'Pending Duplicate Review'), ('PAID', 'Test Fee Paid'), ('SCHEDULED', 'Test Session Scheduled'), ('TESTED', 'Test Completed'), ('GRADED', 'Test Results Available'), ('COMMUNICATED', 'Results Communicated'), ('ENROLLED', 'Converted to Student'), ('DECLINED', 'Application Declined'), ('CANCELLED', 'Application Cancelled')], default='INITIATED', help_text='Current stage in the application process', max_length=20, verbose_name='Application Status')),
                ('status_history', models.JSONField(default=list, help_text='Historical tracking of status changes', verbose_name='Status History')),
                ('first_time_at_puc', models.BooleanField(default=True, help_text='Is this your first time applying to PUC?', verbose_name='First Time at PUC')),
                ('how_did_you_hear', models.CharField(blank=True, choices=[('friend', 'My friend studied/studies here'), ('facebook', 'Facebook'), ('instagram', 'Instagram'), ('at_school', 'At my school'), ('family', 'From family'), ('poster', 'Outside poster/banner'), ('other', 'Other')], help_text='Marketing research: how you learned about our school', max_length=20, verbose_name='How Did You Hear About Us')),
                ('comments', models.TextField(blank=True, help_text='Any additional information or special requests', verbose_name='Additional Comments')),
                ('converted_person_id', models.PositiveIntegerField(blank=True, help_text='Person record ID if converted to student', null=True, verbose_name='Converted Person ID')),
                ('converted_student_number', models.CharField(blank=True, help_text='Official student number if enrolled', max_length=10, verbose_name='Student Number')),
                ('duplicate_check_performed', models.BooleanField(default=False, help_text='Whether duplicate detection has been completed', verbose_name='Duplicate Check Performed')),
                ('duplicate_check_status', models.CharField(choices=[('PENDING', 'Awaiting Review'), ('CONFIRMED_NEW', 'Confirmed New Student'), ('CONFIRMED_DUPLICATE', 'Confirmed Duplicate'), ('DEBT_CONCERN', 'Outstanding Debt Concern'), ('MANUAL_REVIEW', 'Requires Manual Review')], default='PENDING', help_text='Result of duplicate detection process', max_length=20, verbose_name='Duplicate Check Status')),
                ('duplicate_check_notes', models.TextField(blank=True, help_text='Notes from staff review of potential duplicates', verbose_name='Duplicate Check Notes')),
                ('duplicate_check_cleared_at', models.DateTimeField(blank=True, help_text='When duplicate concerns were resolved', null=True, verbose_name='Duplicate Check Cleared At')),
                ('duplicate_check_cleared_by', models.ForeignKey(blank=True, help_text='Staff member who cleared duplicate concerns', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cleared_duplicates', to=settings.AUTH_USER_MODEL, verbose_name='Duplicate Check Cleared By')),
            ],
            options={
                'verbose_name': 'Potential Student',
                'verbose_name_plural': 'Potential Students',
                'ordering': ['-created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TestAccessToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('access_code', models.CharField(db_index=True, help_text='7-digit unique access code with Luhn check digit', max_length=7, unique=True, verbose_name='Access Code')),
                ('payment_amount', models.DecimalField(decimal_places=2, help_text='Amount paid in USD', max_digits=8, verbose_name='Payment Amount')),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CREDIT_CARD', 'Credit Card'), ('BANK_TRANSFER', 'Bank Transfer'), ('CHECK', 'Check'), ('ONLINE', 'Online Payment'), ('SCHOLARSHIP', 'Scholarship'), ('OTHER', 'Other')], default='CASH', max_length=20, verbose_name='Payment Method')),
                ('payment_received_at', models.DateTimeField(help_text='When payment was received', verbose_name='Payment Received At')),
                ('qr_code_url', models.URLField(blank=True, help_text='Full URL encoded in QR code', verbose_name='QR Code URL')),
                ('qr_code_data', models.JSONField(blank=True, default=dict, help_text='Additional QR code metadata', verbose_name='QR Code Data')),
                ('student_name', models.CharField(help_text="Student's full name for receipt", max_length=100, verbose_name='Student Name')),
                ('student_phone', models.CharField(help_text="Student's phone number for contact", max_length=20, verbose_name='Student Phone')),
                ('is_used', models.BooleanField(default=False, help_text='Whether this token has been used to start an application', verbose_name='Is Used')),
                ('used_at', models.DateTimeField(blank=True, help_text='When the token was used to start application', null=True, verbose_name='Used At')),
                ('telegram_id', models.CharField(blank=True, help_text='Telegram user ID after verification', max_length=50, verbose_name='Telegram ID')),
                ('telegram_username', models.CharField(blank=True, help_text='Telegram username', max_length=50, verbose_name='Telegram Username')),
                ('telegram_verified', models.BooleanField(default=False, help_text='Whether Telegram has been verified', verbose_name='Telegram Verified')),
                ('telegram_verification_code', models.CharField(blank=True, help_text='6-digit verification code sent via Telegram', max_length=6, verbose_name='Telegram Verification Code')),
                ('telegram_verified_at', models.DateTimeField(blank=True, help_text='When Telegram was verified', null=True, verbose_name='Telegram Verified At')),
                ('expires_at', models.DateTimeField(help_text='When this token expires (24 hours from creation)', verbose_name='Expires At')),
                ('application', models.OneToOneField(blank=True, help_text='The application created with this token', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='access_token', to='level_testing.potentialstudent', verbose_name='Application')),
                ('cashier', models.ForeignKey(help_text='Staff member who collected payment', on_delete=django.db.models.deletion.PROTECT, related_name='issued_access_tokens', to=settings.AUTH_USER_MODEL, verbose_name='Cashier')),
            ],
            options={
                'verbose_name': 'Test Access Token',
                'verbose_name_plural': 'Test Access Tokens',
                'ordering': ['-created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='potentialstudent',
            name='access_token_link',
            field=models.OneToOneField(blank=True, help_text='Access token used to create this application', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='potential_student_link', to='level_testing.testaccesstoken', verbose_name='Access Token Link'),
        ),
        migrations.CreateModel(
            name='TestAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('scheduled_at', models.DateTimeField(help_text='When the test was scheduled', verbose_name='Scheduled Time')),
                ('started_at', models.DateTimeField(blank=True, help_text='When the student began the test', null=True, verbose_name='Test Started')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the student finished the test', null=True, verbose_name='Test Completed')),
                ('raw_score', models.PositiveSmallIntegerField(blank=True, help_text='Actual score achieved on the test', null=True, verbose_name='Raw Score')),
                ('percentage_score', models.DecimalField(blank=True, decimal_places=2, help_text='Score as percentage of maximum possible', max_digits=5, null=True, verbose_name='Percentage Score')),
                ('recommended_level', models.CharField(blank=True, help_text='Suggested program level based on score', max_length=20, verbose_name='Recommended Level')),
                ('proctor_notes', models.TextField(blank=True, help_text='Observations during test administration', verbose_name='Proctor Notes')),
                ('technical_issues', models.TextField(blank=True, help_text='Any technical problems encountered', verbose_name='Technical Issues')),
                ('is_completed', models.BooleanField(default=False, help_text='Whether the test was finished', verbose_name='Test Completed')),
                ('is_graded', models.BooleanField(default=False, help_text='Whether scores have been entered', verbose_name='Results Recorded')),
                ('placement_test', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='test_attempts', to='level_testing.placementtest', verbose_name='Placement Test')),
                ('potential_student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_attempts', to='level_testing.potentialstudent', verbose_name='Potential Student')),
            ],
            options={
                'verbose_name': 'Test Attempt',
                'verbose_name_plural': 'Test Attempts',
                'ordering': ['-scheduled_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TestCompletion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('internal_code', models.CharField(db_index=True, help_text='7-digit code with Luhn check digit for cross-app linking', max_length=7, unique=True, verbose_name='Internal Code')),
                ('qr_code_data', models.JSONField(default=dict, help_text='Complete QR code payload including URL and metadata', verbose_name='QR Code Data')),
                ('slip_printed_at', models.DateTimeField(blank=True, help_text='When the completion slip was printed', null=True, verbose_name='Slip Printed At')),
                ('is_payment_linked', models.BooleanField(default=False, help_text='Whether this code has been linked to a payment', verbose_name='Payment Linked')),
                ('is_telegram_linked', models.BooleanField(default=False, help_text='Whether student has registered Telegram via this code', verbose_name='Telegram Linked')),
                ('payment_transaction_id', models.PositiveIntegerField(blank=True, help_text='Link to finance app transaction record', null=True, verbose_name='Payment Transaction ID')),
                ('telegram_data', models.JSONField(default=dict, help_text='Telegram username, phone, and registration details', verbose_name='Telegram Data')),
                ('completion_notes', models.TextField(blank=True, help_text='Additional notes about test completion or code usage', verbose_name='Completion Notes')),
                ('test_attempt', models.OneToOneField(help_text='The test attempt this completion record represents', on_delete=django.db.models.deletion.CASCADE, related_name='completion', to='level_testing.testattempt', verbose_name='Test Attempt')),
            ],
            options={
                'verbose_name': 'Test Completion',
                'verbose_name_plural': 'Test Completions',
                'ordering': ['-created_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TestPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('amount', models.DecimalField(decimal_places=2, default=Decimal('5.00'), help_text='Amount charged for the placement test', max_digits=8, verbose_name='Test Fee Amount')),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CREDIT_CARD', 'Credit Card'), ('BANK_TRANSFER', 'Bank Transfer'), ('CHECK', 'Check'), ('ONLINE', 'Online Payment'), ('SCHOLARSHIP', 'Scholarship'), ('OTHER', 'Other')], default='CASH', help_text='How the fee was paid', max_length=20, verbose_name='Payment Method')),
                ('payment_reference', models.CharField(blank=True, help_text='Transaction ID or reference number', max_length=50, verbose_name='Payment Reference')),
                ('paid_at', models.DateTimeField(blank=True, help_text='When the payment was received', null=True, verbose_name='Payment Date')),
                ('is_paid', models.BooleanField(default=False, help_text='Whether payment has been received', verbose_name='Payment Received')),
                ('finance_transaction_id', models.PositiveIntegerField(blank=True, help_text='Link to finance app transaction record', null=True, verbose_name='Finance Transaction ID')),
                ('potential_student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='test_payment', to='level_testing.potentialstudent', verbose_name='Potential Student')),
                ('received_by', models.ForeignKey(blank=True, help_text='Staff member who processed the payment', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='received_test_payments', to=settings.AUTH_USER_MODEL, verbose_name='Received By')),
            ],
            options={
                'verbose_name': 'Test Payment',
                'verbose_name_plural': 'Test Payments',
                'ordering': ['-paid_at'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TestSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('session_date', models.DateTimeField(help_text='When the test session will be conducted', verbose_name='Session Date & Time')),
                ('location', models.CharField(default='Main Computer Lab', help_text='Where the test will be administered', max_length=100, verbose_name='Test Location')),
                ('max_capacity', models.PositiveSmallIntegerField(default=20, help_text='Maximum number of test takers for this session', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)], verbose_name='Maximum Capacity')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this session is available for booking', verbose_name='Is Active')),
                ('session_notes', models.TextField(blank=True, help_text='Special instructions or notes for this session', verbose_name='Session Notes')),
                ('administrator', models.ForeignKey(help_text='Staff member responsible for this test session', on_delete=django.db.models.deletion.PROTECT, related_name='administered_test_sessions', to=settings.AUTH_USER_MODEL, verbose_name='Test Administrator')),
            ],
            options={
                'verbose_name': 'Test Session',
                'verbose_name_plural': 'Test Sessions',
                'ordering': ['session_date'],
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='testattempt',
            name='test_session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_attempts', to='level_testing.testsession', verbose_name='Test Session'),
        ),
        migrations.CreateModel(
            name='DuplicateCandidate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when the record was created', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time when the record was last updated', verbose_name='Updated at')),
                ('is_deleted', models.BooleanField(default=False, help_text='Indicates if this record has been soft deleted', verbose_name='Is deleted')),
                ('deleted_at', models.DateTimeField(blank=True, help_text='Date and time when the record was marked as deleted', null=True, verbose_name='Deleted at')),
                ('existing_person_id', models.PositiveIntegerField(help_text='ID of potentially matching person in people app', verbose_name='Existing Person ID')),
                ('match_type', models.CharField(choices=[('EXACT_NAME', 'Exact Name Match'), ('SIMILAR_NAME', 'Similar Name'), ('PHONE_MATCH', 'Phone Number Match'), ('EMAIL_MATCH', 'Email Match'), ('DOB_MATCH', 'Date of Birth Match'), ('COMBINED', 'Multiple Criteria')], help_text='Type of potential match detected', max_length=20, verbose_name='Match Type')),
                ('confidence_score', models.DecimalField(decimal_places=2, help_text='Algorithm confidence (0.0 - 1.0)', max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)], verbose_name='Confidence Score')),
                ('matched_name', models.CharField(help_text='Name from existing person record', max_length=100, verbose_name='Matched Name')),
                ('matched_birth_date', models.DateField(blank=True, help_text='Birth date from existing person record', null=True, verbose_name='Matched Birth Date')),
                ('matched_phone', models.CharField(blank=True, help_text='Phone number from existing person record', max_length=20, verbose_name='Matched Phone')),
                ('has_outstanding_debt', models.BooleanField(default=False, help_text='Whether existing person has unpaid balances', verbose_name='Has Outstanding Debt')),
                ('debt_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Amount of outstanding debt', max_digits=8, null=True, verbose_name='Outstanding Debt Amount')),
                ('reviewed', models.BooleanField(default=False, help_text='Whether staff has reviewed this potential match', verbose_name='Reviewed')),
                ('is_confirmed_duplicate', models.BooleanField(default=False, help_text='Staff confirmed this is the same person', verbose_name='Confirmed Duplicate')),
                ('review_notes', models.TextField(blank=True, help_text='Staff notes about duplicate review', verbose_name='Review Notes')),
                ('reviewed_at', models.DateTimeField(blank=True, help_text='When the duplicate review was completed', null=True, verbose_name='Reviewed At')),
                ('reviewed_by', models.ForeignKey(blank=True, help_text='Staff member who reviewed this potential duplicate', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='reviewed_duplicates', to=settings.AUTH_USER_MODEL, verbose_name='Reviewed By')),
                ('potential_student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_candidates', to='level_testing.potentialstudent', verbose_name='Potential Student')),
            ],
            options={
                'verbose_name': 'Duplicate Candidate',
                'verbose_name_plural': 'Duplicate Candidates',
                'ordering': ['-confidence_score', '-created_at'],
                'indexes': [models.Index(fields=['potential_student', 'reviewed'], name='level_testi_potenti_9295b4_idx'), models.Index(fields=['confidence_score'], name='level_testi_confide_4fa6de_idx'), models.Index(fields=['has_outstanding_debt'], name='level_testi_has_out_2c92ee_idx')],
                'unique_together': {('potential_student', 'existing_person_id')},
            },
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddIndex(
            model_name='testaccesstoken',
            index=models.Index(fields=['access_code'], name='level_testi_access__5e9075_idx'),
        ),
        migrations.AddIndex(
            model_name='testaccesstoken',
            index=models.Index(fields=['student_phone'], name='level_testi_student_f0f1b7_idx'),
        ),
        migrations.AddIndex(
            model_name='testaccesstoken',
            index=models.Index(fields=['is_used'], name='level_testi_is_used_56ff17_idx'),
        ),
        migrations.AddIndex(
            model_name='testaccesstoken',
            index=models.Index(fields=['telegram_id'], name='level_testi_telegra_b9ff8c_idx'),
        ),
        migrations.AddIndex(
            model_name='potentialstudent',
            index=models.Index(fields=['test_number'], name='level_testi_test_nu_0956ee_idx'),
        ),
        migrations.AddIndex(
            model_name='potentialstudent',
            index=models.Index(fields=['status'], name='level_testi_status_84175c_idx'),
        ),
        migrations.AddIndex(
            model_name='potentialstudent',
            index=models.Index(fields=['family_name_eng', 'personal_name_eng'], name='level_testi_family__590060_idx'),
        ),
        migrations.AddIndex(
            model_name='potentialstudent',
            index=models.Index(fields=['date_of_birth', 'birth_province'], name='level_testi_date_of_8e96d2_idx'),
        ),
        migrations.AddIndex(
            model_name='potentialstudent',
            index=models.Index(fields=['phone_number'], name='level_testi_phone_n_d21500_idx'),
        ),
        migrations.AddIndex(
            model_name='potentialstudent',
            index=models.Index(fields=['personal_email'], name='level_testi_persona_e07b45_idx'),
        ),
        migrations.AddIndex(
            model_name='potentialstudent',
            index=models.Index(fields=['duplicate_check_status'], name='level_testi_duplica_296b27_idx'),
        ),
        migrations.AddIndex(
            model_name='testcompletion',
            index=models.Index(fields=['internal_code'], name='level_testi_interna_59c391_idx'),
        ),
        migrations.AddIndex(
            model_name='testcompletion',
            index=models.Index(fields=['is_payment_linked', 'is_telegram_linked'], name='level_testi_is_paym_d57169_idx'),
        ),
        migrations.AddIndex(
            model_name='testcompletion',
            index=models.Index(fields=['created_at'], name='level_testi_created_23fef4_idx'),
        ),
        migrations.AddIndex(
            model_name='testpayment',
            index=models.Index(fields=['is_paid', 'paid_at'], name='level_testi_is_paid_439ead_idx'),
        ),
        migrations.AddIndex(
            model_name='testpayment',
            index=models.Index(fields=['payment_method'], name='level_testi_payment_a7e643_idx'),
        ),
        migrations.AddIndex(
            model_name='testsession',
            index=models.Index(fields=['session_date', 'is_active'], name='level_testi_session_b842aa_idx'),
        ),
        migrations.AddIndex(
            model_name='testsession',
            index=models.Index(fields=['administrator'], name='level_testi_adminis_68e6b6_idx'),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['test_session', 'is_completed'], name='level_testi_test_se_654e65_idx'),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['placement_test', 'is_graded'], name='level_testi_placeme_61b312_idx'),
        ),
        migrations.AddIndex(
            model_name='testattempt',
            index=models.Index(fields=['scheduled_at'], name='level_testi_schedul_cc35e2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='testattempt',
            unique_together={('potential_student', 'test_session')},
        ),
    ]
