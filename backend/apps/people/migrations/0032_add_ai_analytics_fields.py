# Generated by Django 5.1.4 on 2025-01-01

from django.db import migrations, models
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('people', '0031_auto_20241227_1234'),  # Update this to match the latest migration
    ]

    operations = [
        # Add AI analytics fields to StudentProfile
        migrations.AddField(
            model_name='studentprofile',
            name='risk_score',
            field=models.DecimalField(
                verbose_name="Risk Score",
                max_digits=5,
                decimal_places=2,
                null=True,
                blank=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(100.0),
                ],
                help_text="AI-generated risk score for academic failure (0-100)",
                db_index=True,
            ),
        ),
        migrations.AddField(
            model_name='studentprofile',
            name='success_probability',
            field=models.DecimalField(
                verbose_name="Success Probability",
                max_digits=5,
                decimal_places=2,
                null=True,
                blank=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(100.0),
                ],
                help_text="AI-predicted probability of academic success (%)",
                db_index=True,
            ),
        ),
        migrations.AddField(
            model_name='studentprofile',
            name='last_risk_assessment_date',
            field=models.DateTimeField(
                verbose_name="Last Risk Assessment Date",
                null=True,
                blank=True,
                help_text="When the risk score was last calculated",
                db_index=True,
            ),
        ),
        migrations.AddField(
            model_name='studentprofile',
            name='intervention_history',
            field=models.JSONField(
                verbose_name="Intervention History",
                null=True,
                blank=True,
                help_text="JSON record of academic interventions and outcomes",
            ),
        ),
        migrations.AddField(
            model_name='studentprofile',
            name='ai_insights',
            field=models.JSONField(
                verbose_name="AI Insights",
                null=True,
                blank=True,
                help_text="AI-generated insights and recommendations",
            ),
        ),
        migrations.AddField(
            model_name='studentprofile',
            name='prediction_model_version',
            field=models.CharField(
                verbose_name="Prediction Model Version",
                max_length=50,
                null=True,
                blank=True,
                help_text="Version of AI model used for predictions",
            ),
        ),

        # Add search performance fields
        migrations.AddField(
            model_name='person',
            name='search_vector',
            field=models.TextField(
                verbose_name="Search Vector",
                null=True,
                blank=True,
                help_text="Pre-computed search vector for full-text search performance",
                db_index=True,
            ),
        ),
        migrations.AddField(
            model_name='person',
            name='search_updated_at',
            field=models.DateTimeField(
                verbose_name="Search Vector Updated At",
                null=True,
                blank=True,
                help_text="When the search vector was last updated",
            ),
        ),

        # Add performance indexes
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_person_risk_score ON people_studentprofile(risk_score) WHERE risk_score IS NOT NULL;",
            reverse_sql="DROP INDEX IF EXISTS idx_people_person_risk_score;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_person_success_prob ON people_studentprofile(success_probability) WHERE success_probability IS NOT NULL;",
            reverse_sql="DROP INDEX IF EXISTS idx_people_person_success_prob;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_person_search_combo ON people_person(family_name, personal_name, student_id) WHERE student_profile_id IS NOT NULL;",
            reverse_sql="DROP INDEX IF EXISTS idx_people_person_search_combo;",
        ),
    ]