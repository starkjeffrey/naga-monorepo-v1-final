# Generated by Django 5.1.4 on 2025-01-01

from django.db import migrations, models
import django.core.validators


class Migration(migrations.Migration):

    dependencies = [
        ('people', '0032_add_ai_analytics_fields'),
    ]

    operations = [
        # Add enhanced photo metadata fields
        migrations.AddField(
            model_name='studentphoto',
            name='ai_extracted_metadata',
            field=models.JSONField(
                verbose_name="AI Extracted Metadata",
                null=True,
                blank=True,
                help_text="AI-extracted metadata from photo analysis",
            ),
        ),
        migrations.AddField(
            model_name='studentphoto',
            name='face_detected',
            field=models.BooleanField(
                verbose_name="Face Detected",
                default=False,
                help_text="Whether a face was detected in the photo",
                db_index=True,
            ),
        ),
        migrations.AddField(
            model_name='studentphoto',
            name='face_confidence',
            field=models.DecimalField(
                verbose_name="Face Detection Confidence",
                max_digits=5,
                decimal_places=2,
                null=True,
                blank=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(100.0),
                ],
                help_text="Confidence score for face detection (0-100)",
            ),
        ),
        migrations.AddField(
            model_name='studentphoto',
            name='image_quality_score',
            field=models.DecimalField(
                verbose_name="Image Quality Score",
                max_digits=5,
                decimal_places=2,
                null=True,
                blank=True,
                validators=[
                    django.core.validators.MinValueValidator(0.0),
                    django.core.validators.MaxValueValidator(100.0),
                ],
                help_text="AI-assessed image quality score (0-100)",
            ),
        ),
        migrations.AddField(
            model_name='studentphoto',
            name='compression_level',
            field=models.CharField(
                verbose_name="Compression Level",
                max_length=20,
                choices=[
                    ('original', 'Original'),
                    ('high', 'High Quality'),
                    ('medium', 'Medium Quality'),
                    ('low', 'Low Quality'),
                    ('thumbnail', 'Thumbnail'),
                ],
                default='original',
                help_text="Compression level applied to photo",
            ),
        ),
        migrations.AddField(
            model_name='studentphoto',
            name='processing_status',
            field=models.CharField(
                verbose_name="Processing Status",
                max_length=20,
                choices=[
                    ('pending', 'Pending Processing'),
                    ('processing', 'Currently Processing'),
                    ('completed', 'Processing Complete'),
                    ('failed', 'Processing Failed'),
                    ('skipped', 'Processing Skipped'),
                ],
                default='pending',
                help_text="Status of photo AI processing",
                db_index=True,
            ),
        ),
        migrations.AddField(
            model_name='studentphoto',
            name='processing_error',
            field=models.TextField(
                verbose_name="Processing Error",
                null=True,
                blank=True,
                help_text="Error message if photo processing failed",
            ),
        ),
        migrations.AddField(
            model_name='studentphoto',
            name='exif_data',
            field=models.JSONField(
                verbose_name="EXIF Data",
                null=True,
                blank=True,
                help_text="Extracted EXIF metadata from original photo",
            ),
        ),
        migrations.AddField(
            model_name='studentphoto',
            name='privacy_flags',
            field=models.JSONField(
                verbose_name="Privacy Flags",
                null=True,
                blank=True,
                help_text="Privacy-related flags and permissions",
            ),
        ),

        # Add performance indexes for photo queries
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_photo_face_detected ON people_studentphoto(face_detected, face_confidence) WHERE face_detected = true;",
            reverse_sql="DROP INDEX IF EXISTS idx_people_photo_face_detected;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_photo_processing ON people_studentphoto(processing_status, created_at) WHERE processing_status != 'completed';",
            reverse_sql="DROP INDEX IF EXISTS idx_people_photo_processing;",
        ),
        migrations.RunSQL(
            "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_people_photo_quality ON people_studentphoto(image_quality_score) WHERE image_quality_score IS NOT NULL;",
            reverse_sql="DROP INDEX IF EXISTS idx_people_photo_quality;",
        ),
    ]