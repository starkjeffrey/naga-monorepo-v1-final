# Generated by Django 5.2.4 on 2025-07-15 01:23

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("academic", "0002_initial"),
        ("curriculum", "0001_initial"),
        ("people", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="studentcourseoverride",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="course_overrides",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="studentcourseoverride",
            name="substitute_course",
            field=models.ForeignKey(
                help_text="The course being used as a substitute",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="substitutes_for_overrides",
                to="curriculum.course",
                verbose_name="Substitute Course",
            ),
        ),
        migrations.AddField(
            model_name="studentdegreeprogress",
            name="estimated_graduation_term",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="estimated_graduates",
                to="curriculum.term",
                verbose_name="Estimated Graduation Term",
            ),
        ),
        migrations.AddField(
            model_name="studentdegreeprogress",
            name="major",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="student_progress",
                to="curriculum.major",
                verbose_name="Major",
            ),
        ),
        migrations.AddField(
            model_name="studentdegreeprogress",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="degree_progress",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementexception",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="approved_requirement_exceptions",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Approved By",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementexception",
            name="canonical_requirement",
            field=models.ForeignKey(
                help_text="The canonical requirement being modified",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="student_exceptions",
                to="academic.canonicalrequirement",
                verbose_name="Canonical Requirement",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementexception",
            name="effective_term",
            field=models.ForeignKey(
                help_text="Term when this exception becomes effective",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="exceptions_starting",
                to="curriculum.term",
                verbose_name="Effective Term",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementexception",
            name="expiration_term",
            field=models.ForeignKey(
                blank=True,
                help_text="Term when this exception expires (optional)",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="exceptions_expiring",
                to="curriculum.term",
                verbose_name="Expiration Term",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementexception",
            name="fulfilling_course",
            field=models.ForeignKey(
                blank=True,
                help_text="Internal course that fulfills this requirement",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="fulfills_via_exception",
                to="curriculum.course",
                verbose_name="Fulfilling Course",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementexception",
            name="requested_by",
            field=models.ForeignKey(
                help_text="Person who submitted the exception request",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="requested_requirement_exceptions",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Requested By",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementexception",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="requirement_exceptions",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementfulfillment",
            name="fulfilling_course",
            field=models.ForeignKey(
                blank=True,
                help_text="Specific course that fulfills this requirement",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="fulfills_student_requirements",
                to="curriculum.course",
                verbose_name="Fulfilling Course",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementfulfillment",
            name="override_approved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="approved_requirement_overrides",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Override Approved By",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementfulfillment",
            name="requirement",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="student_fulfillments",
                to="academic.requirement",
                verbose_name="Requirement",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementfulfillment",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="requirement_fulfillments",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementfulfillment",
            name="verified_by",
            field=models.ForeignKey(
                blank=True,
                help_text="Staff member who verified this fulfillment",
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="verified_requirement_fulfillments",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Verified By",
            ),
        ),
        migrations.AddField(
            model_name="transfercredit",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="approved_transfer_credits",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Approved By",
            ),
        ),
        migrations.AddField(
            model_name="transfercredit",
            name="internal_equivalent_course",
            field=models.ForeignKey(
                blank=True,
                help_text="Internal course this transfer credit is equivalent to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="transfer_equivalents",
                to="curriculum.course",
                verbose_name="Internal Equivalent Course",
            ),
        ),
        migrations.AddField(
            model_name="transfercredit",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="transfer_credits",
                to="people.studentprofile",
                verbose_name="Student",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementfulfillment",
            name="fulfilling_transfer_credit",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="fulfills_requirements",
                to="academic.transfercredit",
                verbose_name="Fulfilling Transfer Credit",
            ),
        ),
        migrations.AddField(
            model_name="studentrequirementexception",
            name="fulfilling_transfer_credit",
            field=models.ForeignKey(
                blank=True,
                help_text="Transfer credit that fulfills this requirement",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="canonical_requirement_exceptions",
                to="academic.transfercredit",
                verbose_name="Fulfilling Transfer Credit",
            ),
        ),
        migrations.AddIndex(
            model_name="canonicalrequirement",
            index=models.Index(
                fields=["major", "sequence_number"],
                name="academic_ca_major_i_bb961f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="canonicalrequirement",
            index=models.Index(fields=["major", "is_active"], name="academic_ca_major_i_dc89d2_idx"),
        ),
        migrations.AddIndex(
            model_name="canonicalrequirement",
            index=models.Index(
                fields=["effective_term", "end_term"],
                name="academic_ca_effecti_15e96f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="canonicalrequirement",
            index=models.Index(fields=["required_course"], name="academic_ca_require_22f800_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="canonicalrequirement",
            unique_together={
                ("major", "required_course", "effective_term"),
                ("major", "sequence_number", "effective_term"),
            },
        ),
        migrations.AddIndex(
            model_name="courseequivalency",
            index=models.Index(
                fields=["original_course", "is_active"],
                name="academic_co_origina_a8b7cb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="courseequivalency",
            index=models.Index(
                fields=["equivalent_course", "is_active"],
                name="academic_co_equival_d95427_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="courseequivalency",
            index=models.Index(fields=["original_course", "equivalent_course"], name="equivalency_idx"),
        ),
        migrations.AddIndex(
            model_name="courseequivalency",
            index=models.Index(
                fields=["effective_term", "end_term"],
                name="academic_co_effecti_6304d3_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="courseequivalency",
            unique_together={("original_course", "equivalent_course", "effective_term")},
        ),
        migrations.AddIndex(
            model_name="requirementcourse",
            index=models.Index(fields=["requirement", "course"], name="academic_re_require_1380ea_idx"),
        ),
        migrations.AddIndex(
            model_name="requirementcourse",
            index=models.Index(fields=["course"], name="academic_re_course__db3c43_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="requirementcourse",
            unique_together={("requirement", "course")},
        ),
        migrations.AddIndex(
            model_name="requirement",
            index=models.Index(fields=["major", "is_active"], name="academic_re_major_i_eee455_idx"),
        ),
        migrations.AddIndex(
            model_name="requirement",
            index=models.Index(
                fields=["effective_term", "end_term"],
                name="academic_re_effecti_a4e0bb_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="requirement",
            index=models.Index(
                fields=["requirement_type", "is_active"],
                name="academic_re_require_1a2a6c_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="requirement",
            unique_together={("major", "requirement_type", "name", "effective_term")},
        ),
        migrations.AddIndex(
            model_name="studentcourseoverride",
            index=models.Index(
                fields=["student", "approval_status"],
                name="academic_st_student_2758a2_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentcourseoverride",
            index=models.Index(
                fields=["approval_status", "effective_term"],
                name="academic_st_approva_8740ba_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentcourseoverride",
            index=models.Index(
                fields=["original_course", "substitute_course"],
                name="academic_st_origina_165b51_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="studentcourseoverride",
            unique_together={("student", "original_course", "effective_term")},
        ),
        migrations.AddIndex(
            model_name="studentdegreeprogress",
            index=models.Index(
                fields=["student", "completion_status"],
                name="academic_st_student_41778d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentdegreeprogress",
            index=models.Index(
                fields=["major", "completion_status"],
                name="academic_st_major_i_3f6a65_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentdegreeprogress",
            index=models.Index(fields=["completion_percentage"], name="academic_st_complet_83e28d_idx"),
        ),
        migrations.AddIndex(
            model_name="studentdegreeprogress",
            index=models.Index(
                fields=["estimated_graduation_term"],
                name="academic_st_estimat_c0523f_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="studentdegreeprogress",
            unique_together={("student", "major")},
        ),
        migrations.AddIndex(
            model_name="transfercredit",
            index=models.Index(
                fields=["student", "approval_status"],
                name="academic_tr_student_c752e6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="transfercredit",
            index=models.Index(
                fields=["approval_status", "approved_at"],
                name="academic_tr_approva_4ed34c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="transfercredit",
            index=models.Index(
                fields=["internal_equivalent_course"],
                name="academic_tr_interna_c2be59_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="transfercredit",
            unique_together={("student", "external_institution", "external_course_code")},
        ),
        migrations.AddIndex(
            model_name="studentrequirementfulfillment",
            index=models.Index(
                fields=["student", "is_fulfilled"],
                name="academic_st_student_0294d9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentrequirementfulfillment",
            index=models.Index(
                fields=["requirement", "is_fulfilled"],
                name="academic_st_require_a3518e_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentrequirementfulfillment",
            index=models.Index(fields=["student", "requirement"], name="fulfillment_lookup_idx"),
        ),
        migrations.AddIndex(
            model_name="studentrequirementfulfillment",
            index=models.Index(fields=["fulfillment_source"], name="academic_st_fulfill_c73bc0_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="studentrequirementfulfillment",
            unique_together={("student", "fulfilling_course")},
        ),
        migrations.AddIndex(
            model_name="studentrequirementexception",
            index=models.Index(
                fields=["student", "approval_status"],
                name="academic_st_student_eac7c4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentrequirementexception",
            index=models.Index(
                fields=["canonical_requirement", "approval_status"],
                name="academic_st_canonic_53fe41_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentrequirementexception",
            index=models.Index(
                fields=["approval_status", "effective_term"],
                name="academic_st_approva_33c3a5_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="studentrequirementexception",
            index=models.Index(
                fields=["exception_type", "approval_status"],
                name="academic_st_excepti_b41650_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="studentrequirementexception",
            unique_together={("student", "canonical_requirement", "effective_term")},
        ),
    ]
