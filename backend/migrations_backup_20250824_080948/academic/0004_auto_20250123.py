# Generated by Django 5.2.4 on 2025-07-23

from decimal import Decimal

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.utils import timezone


class Migration(migrations.Migration):
    dependencies = [
        ("academic", "0003_initial"),
        ("enrollment", "0001_initial"),
        ("people", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # Add new fields to CourseEquivalency - since there's no data, we can add without defaults
        migrations.AddField(
            model_name="courseequivalency",
            name="approval_date",
            field=models.DateField(
                default=timezone.now,
                help_text="Date when this equivalency was approved",
                verbose_name="Approval Date",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="courseequivalency",
            name="approved_by",
            field=models.ForeignKey(
                default=1,
                help_text="User who approved this equivalency",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="approved_equivalencies",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Approved By",
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="courseequivalency",
            name="reason",
            field=models.TextField(
                default="",
                help_text="Reason for establishing this equivalency",
                verbose_name="Reason",
            ),
            preserve_default=False,
        ),
        # Add request_date to StudentCourseOverride
        migrations.AddField(
            model_name="studentcourseoverride",
            name="request_date",
            field=models.DateTimeField(default=timezone.now, verbose_name="Request Date"),
            preserve_default=False,
        ),
        # Add awarded_credits to TransferCredit
        migrations.AddField(
            model_name="transfercredit",
            name="awarded_credits",
            field=models.DecimalField(
                decimal_places=2,
                default=Decimal("0.0"),
                help_text="Number of credits awarded for this transfer",
                max_digits=5,
                validators=[
                    django.core.validators.MinValueValidator(Decimal("0.0")),
                    django.core.validators.MaxValueValidator(Decimal("12.0")),
                ],
                verbose_name="Awarded Credits",
            ),
            preserve_default=False,
        ),
        # Remove old models first
        migrations.DeleteModel(
            name="StudentRequirementFulfillment",
        ),
        migrations.DeleteModel(
            name="RequirementCourse",
        ),
        migrations.DeleteModel(
            name="Requirement",
        ),
        migrations.DeleteModel(
            name="RequirementType",
        ),
        # Create the new CanonicalRequirementFulfillment model
        migrations.CreateModel(
            name="CanonicalRequirementFulfillment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, help_text="When this record was created"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, help_text="When this record was last updated"),
                ),
                (
                    "fulfillment_method",
                    models.CharField(
                        choices=[
                            ("COURSE", "Course Completion"),
                            ("TRANSFER", "Transfer Credit"),
                            ("SUBSTITUTION", "Course Substitution"),
                            ("WAIVER", "Requirement Waived"),
                            ("EXAM", "Exam Credit"),
                        ],
                        help_text="How this requirement was fulfilled",
                        max_length=20,
                        verbose_name="Fulfillment Method",
                    ),
                ),
                (
                    "fulfillment_date",
                    models.DateField(
                        help_text="Date when requirement was fulfilled",
                        verbose_name="Fulfillment Date",
                    ),
                ),
                (
                    "credits_earned",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Actual credits earned toward this requirement",
                        max_digits=4,
                        verbose_name="Credits Earned",
                    ),
                ),
                (
                    "grade",
                    models.CharField(
                        blank=True,
                        help_text="Grade earned (if applicable)",
                        max_length=10,
                        verbose_name="Grade",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this fulfillment is currently valid",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Administrative notes about this fulfillment",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "canonical_requirement",
                    models.ForeignKey(
                        help_text="The specific requirement being fulfilled",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="student_fulfillments",
                        to="academic.canonicalrequirement",
                        verbose_name="Canonical Requirement",
                    ),
                ),
                (
                    "fulfilling_enrollment",
                    models.ForeignKey(
                        blank=True,
                        help_text="Class enrollment that fulfilled this requirement",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="requirement_fulfillments",
                        to="enrollment.classheaderenrollment",
                        verbose_name="Fulfilling Enrollment",
                    ),
                ),
                (
                    "fulfilling_exception",
                    models.ForeignKey(
                        blank=True,
                        help_text="Exception that allowed fulfillment of this requirement",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="requirement_fulfillments",
                        to="academic.studentrequirementexception",
                        verbose_name="Fulfilling Exception",
                    ),
                ),
                (
                    "fulfilling_transfer",
                    models.ForeignKey(
                        blank=True,
                        help_text="Transfer credit that fulfilled this requirement",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="requirement_fulfillments",
                        to="academic.transfercredit",
                        verbose_name="Fulfilling Transfer Credit",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requirement_fulfillments",
                        to="people.studentprofile",
                        verbose_name="Student",
                    ),
                ),
            ],
            options={
                "verbose_name": "Canonical Requirement Fulfillment",
                "verbose_name_plural": "Canonical Requirement Fulfillments",
                "ordering": ["student", "canonical_requirement__sequence_number"],
            },
        ),
        migrations.AddIndex(
            model_name="canonicalrequirementfulfillment",
            index=models.Index(fields=["student", "is_active"], name="academic_ca_student_caa3f9_idx"),
        ),
        migrations.AddIndex(
            model_name="canonicalrequirementfulfillment",
            index=models.Index(
                fields=["canonical_requirement", "is_active"],
                name="academic_ca_canonic_0c8a09_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="canonicalrequirementfulfillment",
            index=models.Index(fields=["fulfillment_method"], name="academic_ca_fulfill_3b9c7f_idx"),
        ),
        migrations.AddIndex(
            model_name="canonicalrequirementfulfillment",
            index=models.Index(fields=["fulfillment_date"], name="academic_ca_fulfill_8e5d3f_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="canonicalrequirementfulfillment",
            unique_together={("student", "canonical_requirement")},
        ),
    ]
