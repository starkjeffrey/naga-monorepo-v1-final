# Generated by Django 5.2.4 on 2025-07-15 01:23

from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AttendanceRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PRESENT", "Present"),
                            ("ABSENT", "Absent"),
                            ("LATE", "Late"),
                            ("PERMISSION", "Permission (Excused)"),
                        ],
                        default="ABSENT",
                        max_length=15,
                        verbose_name="Attendance Status",
                    ),
                ),
                (
                    "submitted_code",
                    models.CharField(
                        blank=True,
                        help_text="Code entered by student",
                        max_length=5,
                        verbose_name="Submitted Code",
                    ),
                ),
                (
                    "code_correct",
                    models.BooleanField(
                        help_text="Whether submitted code matched session code",
                        null=True,
                        verbose_name="Code Correct",
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When student submitted attendance code",
                        null=True,
                        verbose_name="Submitted At",
                    ),
                ),
                (
                    "submitted_latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Student's latitude when submitting code",
                        max_digits=10,
                        null=True,
                        verbose_name="Submitted Latitude",
                    ),
                ),
                (
                    "submitted_longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Student's longitude when submitting code",
                        max_digits=10,
                        null=True,
                        verbose_name="Submitted Longitude",
                    ),
                ),
                (
                    "within_geofence",
                    models.BooleanField(
                        help_text="Whether student was within valid location",
                        null=True,
                        verbose_name="Within Geofence",
                    ),
                ),
                (
                    "distance_from_class",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Student's distance from class location",
                        null=True,
                        verbose_name="Distance from Class (Meters)",
                    ),
                ),
                (
                    "data_source",
                    models.CharField(
                        choices=[
                            ("MOBILE_CODE", "Mobile App Code Entry"),
                            ("MOBILE_MANUAL", "Teacher Manual Entry"),
                            ("DJANGO_MANUAL", "Django Admin Entry"),
                            ("AUTO_ABSENT", "Automatically Marked Absent"),
                            ("PERMISSION_REQUEST", "Permission Request System"),
                        ],
                        default="AUTO_ABSENT",
                        max_length=20,
                        verbose_name="Data Source",
                    ),
                ),
                (
                    "permission_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for excused absence",
                        verbose_name="Permission Reason",
                    ),
                ),
                (
                    "permission_approved",
                    models.BooleanField(
                        help_text="Whether permission request was approved",
                        null=True,
                        verbose_name="Permission Approved",
                    ),
                ),
                (
                    "permission_notes",
                    models.TextField(
                        blank=True,
                        help_text="Admin notes about permission request",
                        verbose_name="Permission Notes",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this attendance record",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attendance Record",
                "verbose_name_plural": "Attendance Records",
                "ordering": ["attendance_session", "student__student_id"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="AttendanceSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "session_date",
                    models.DateField(
                        help_text="Date when class session occurred",
                        verbose_name="Session Date",
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        help_text="When teacher actually started class",
                        verbose_name="Actual Start Time",
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        blank=True,
                        help_text="When teacher ended class (optional)",
                        null=True,
                        verbose_name="Actual End Time",
                    ),
                ),
                (
                    "attendance_code",
                    models.CharField(
                        help_text="5-digit code generated by teacher's mobile app",
                        max_length=5,
                        verbose_name="Attendance Code",
                    ),
                ),
                (
                    "code_generated_at",
                    models.DateTimeField(
                        help_text="When teacher generated the attendance code",
                        verbose_name="Code Generated At",
                    ),
                ),
                (
                    "code_expires_at",
                    models.DateTimeField(
                        help_text="When attendance code window closes",
                        verbose_name="Code Expires At",
                    ),
                ),
                (
                    "code_window_minutes",
                    models.PositiveIntegerField(
                        default=15,
                        help_text="How long code remains valid for submissions",
                        verbose_name="Code Window (Minutes)",
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Teacher's latitude when starting session",
                        max_digits=10,
                        null=True,
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=7,
                        help_text="Teacher's longitude when starting session",
                        max_digits=10,
                        null=True,
                        verbose_name="Longitude",
                    ),
                ),
                (
                    "geofence_radius_meters",
                    models.PositiveIntegerField(
                        default=50,
                        help_text="Radius for location validation",
                        verbose_name="Geofence Radius (Meters)",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether attendance collection is currently active",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "is_makeup_class",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is a makeup session",
                        verbose_name="Is Makeup Class",
                    ),
                ),
                (
                    "makeup_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for makeup class (if applicable)",
                        verbose_name="Makeup Reason",
                    ),
                ),
                (
                    "is_substitute_session",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this session is being taught by a substitute teacher",
                        verbose_name="Is Substitute Session",
                    ),
                ),
                (
                    "substitute_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for substitute teacher (sick leave, emergency, etc.)",
                        verbose_name="Substitute Reason",
                    ),
                ),
                (
                    "substitute_assigned_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the substitute teacher was assigned",
                        null=True,
                        verbose_name="Substitute Assigned At",
                    ),
                ),
                (
                    "manual_fallback_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Allow teacher manual entry if mobile fails",
                        verbose_name="Manual Fallback Enabled",
                    ),
                ),
                (
                    "django_fallback_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Allow Django admin entry if all else fails",
                        verbose_name="Django Fallback Enabled",
                    ),
                ),
                (
                    "total_students",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total students enrolled in this class",
                        verbose_name="Total Students",
                    ),
                ),
                (
                    "present_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of students marked present",
                        verbose_name="Present Count",
                    ),
                ),
                (
                    "absent_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of students marked absent",
                        verbose_name="Absent Count",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attendance Session",
                "verbose_name_plural": "Attendance Sessions",
                "ordering": ["-session_date", "-start_time"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="AttendanceSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "allows_permission_requests",
                    models.BooleanField(
                        default=True,
                        help_text="Whether students can request excused absences (IEAP=False)",
                        verbose_name="Allows Permission Requests",
                    ),
                ),
                (
                    "auto_approve_permissions",
                    models.BooleanField(
                        default=False,
                        help_text="Automatically approve permission requests (High School=True)",
                        verbose_name="Auto-Approve Permissions",
                    ),
                ),
                (
                    "parent_notification_required",
                    models.BooleanField(
                        default=False,
                        help_text="Send permission requests to parents (High School=True)",
                        verbose_name="Parent Notification Required",
                    ),
                ),
                (
                    "attendance_required_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("80.00"),
                        help_text="Minimum attendance percentage required",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Required Attendance Percentage",
                    ),
                ),
                (
                    "late_threshold_minutes",
                    models.PositiveIntegerField(
                        default=15,
                        help_text="Minutes after start time when LATE becomes ABSENT",
                        verbose_name="Late Threshold (Minutes)",
                    ),
                ),
                (
                    "default_code_window_minutes",
                    models.PositiveIntegerField(
                        default=15,
                        help_text="How long attendance codes remain valid",
                        verbose_name="Code Window (Minutes)",
                    ),
                ),
                (
                    "default_geofence_radius",
                    models.PositiveIntegerField(
                        default=50,
                        help_text="Default geofence radius for attendance validation",
                        verbose_name="Geofence Radius (Meters)",
                    ),
                ),
                (
                    "attendance_affects_grade",
                    models.BooleanField(
                        default=True,
                        help_text="Whether attendance impacts final grades",
                        verbose_name="Attendance Affects Grade",
                    ),
                ),
                (
                    "attendance_grade_weight",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("0.100"),
                        help_text="Weight of attendance in final grade calculation",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1),
                        ],
                        verbose_name="Attendance Grade Weight",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attendance Settings",
                "verbose_name_plural": "Attendance Settings",
                "ordering": ["program__name"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="PermissionRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "session_date",
                    models.DateField(
                        help_text="Date of class student wants to miss",
                        verbose_name="Session Date",
                    ),
                ),
                (
                    "reason",
                    models.TextField(
                        help_text="Student's reason for requesting excused absence",
                        verbose_name="Reason",
                    ),
                ),
                (
                    "request_status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Approval"),
                            ("APPROVED", "Approved"),
                            ("DENIED", "Denied"),
                            ("AUTO_APPROVED", "Auto-Approved (High School)"),
                            ("EXPIRED", "Expired (Not Processed)"),
                        ],
                        default="PENDING",
                        max_length=15,
                        verbose_name="Request Status",
                    ),
                ),
                (
                    "program_type",
                    models.CharField(
                        choices=[
                            ("IEAP", "IEAP (No Permissions)"),
                            ("HIGH_SCHOOL", "High School (Auto-Approve)"),
                            ("BA", "Bachelor's (Requires Approval)"),
                            ("MA", "Master's (Requires Approval)"),
                            ("OTHER", "Other Program"),
                        ],
                        help_text="Program type determines approval workflow",
                        max_length=15,
                        verbose_name="Program Type",
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=True,
                        help_text="Whether request needs manual approval",
                        verbose_name="Requires Approval",
                    ),
                ),
                (
                    "approval_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Approval Date"),
                ),
                (
                    "approval_notes",
                    models.TextField(
                        blank=True,
                        help_text="Admin notes about approval decision",
                        verbose_name="Approval Notes",
                    ),
                ),
                (
                    "parent_notified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether parents have been notified",
                        verbose_name="Parent Notified",
                    ),
                ),
                (
                    "parent_notification_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Parent Notification Date"),
                ),
                (
                    "parent_response",
                    models.TextField(
                        blank=True,
                        help_text="Parent's response to notification",
                        verbose_name="Parent Response",
                    ),
                ),
            ],
            options={
                "verbose_name": "Permission Request",
                "verbose_name_plural": "Permission Requests",
                "ordering": ["-session_date", "request_status"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="RosterSync",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "sync_date",
                    models.DateField(
                        help_text="Date this roster sync applies to",
                        verbose_name="Sync Date",
                    ),
                ),
                (
                    "sync_timestamp",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When sync was performed",
                        verbose_name="Sync Timestamp",
                    ),
                ),
                (
                    "sync_type",
                    models.CharField(
                        choices=[
                            ("MIDNIGHT", "Midnight Sync"),
                            ("NOON", "Noon Sync"),
                            ("MANUAL", "Manual Sync"),
                        ],
                        default="MIDNIGHT",
                        max_length=10,
                        verbose_name="Sync Type",
                    ),
                ),
                (
                    "is_successful",
                    models.BooleanField(
                        default=True,
                        help_text="Whether sync completed successfully",
                        verbose_name="Is Successful",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error details if sync failed",
                        verbose_name="Error Message",
                    ),
                ),
                (
                    "student_count",
                    models.PositiveIntegerField(
                        help_text="Number of students in roster",
                        verbose_name="Student Count",
                    ),
                ),
                (
                    "enrollment_snapshot",
                    models.JSONField(
                        default=dict,
                        help_text="Frozen enrollment data for this date",
                        verbose_name="Enrollment Snapshot",
                    ),
                ),
                (
                    "roster_changed",
                    models.BooleanField(
                        default=False,
                        help_text="Whether roster changed since last sync",
                        verbose_name="Roster Changed",
                    ),
                ),
                (
                    "changes_summary",
                    models.TextField(
                        blank=True,
                        help_text="Summary of enrollment changes",
                        verbose_name="Changes Summary",
                    ),
                ),
            ],
            options={
                "verbose_name": "Roster Sync",
                "verbose_name_plural": "Roster Syncs",
                "ordering": ["-sync_date", "-sync_timestamp"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="AttendanceArchive",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "total_sessions",
                    models.PositiveIntegerField(
                        help_text="Total number of class sessions",
                        verbose_name="Total Sessions",
                    ),
                ),
                (
                    "present_sessions",
                    models.PositiveIntegerField(
                        help_text="Number of sessions student was present",
                        verbose_name="Present Sessions",
                    ),
                ),
                (
                    "absent_sessions",
                    models.PositiveIntegerField(
                        help_text="Number of sessions student was absent",
                        verbose_name="Absent Sessions",
                    ),
                ),
                (
                    "late_sessions",
                    models.PositiveIntegerField(
                        help_text="Number of sessions student was late",
                        verbose_name="Late Sessions",
                    ),
                ),
                (
                    "excused_sessions",
                    models.PositiveIntegerField(
                        help_text="Number of sessions with approved permissions",
                        verbose_name="Excused Sessions",
                    ),
                ),
                (
                    "attendance_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Overall attendance percentage",
                        max_digits=5,
                        verbose_name="Attendance Percentage",
                    ),
                ),
                (
                    "punctuality_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Percentage of on-time arrivals",
                        max_digits=5,
                        verbose_name="Punctuality Percentage",
                    ),
                ),
                (
                    "archived_on",
                    models.DateTimeField(auto_now_add=True, verbose_name="Archived On"),
                ),
                (
                    "session_details",
                    models.JSONField(
                        default=dict,
                        help_text="Compressed attendance details for all sessions",
                        verbose_name="Session Details",
                    ),
                ),
                (
                    "archived_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="archived_attendance",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Archived By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Attendance Archive",
                "verbose_name_plural": "Attendance Archives",
                "ordering": ["-archived_on"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
    ]
