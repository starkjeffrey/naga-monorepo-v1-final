# Generated by Django 5.2.4 on 2025-07-15 01:23

import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Holiday",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "eng_name",
                    models.CharField(
                        help_text="Holiday name in English",
                        max_length=200,
                        verbose_name="English Name",
                    ),
                ),
                (
                    "khmer_name",
                    models.CharField(
                        blank=True,
                        help_text="Holiday name in Khmer",
                        max_length=200,
                        verbose_name="Khmer Name",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Date when the holiday begins",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(help_text="Date when the holiday ends", verbose_name="End Date"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this holiday is currently observed",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional information about this holiday",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Holiday",
                "verbose_name_plural": "Holidays",
                "ordering": ["start_date"],
                "unique_together": {("eng_name", "start_date")},
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "building",
                    models.CharField(
                        choices=[
                            ("MAIN", "Main Building"),
                            ("WEST", "West Building"),
                            ("BACK", "Back Building"),
                        ],
                        help_text="Building where this room is located",
                        max_length=10,
                        verbose_name="Building",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name or identifier for the room",
                        max_length=100,
                        verbose_name="Room Name",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        editable=False,
                        help_text="Auto-generated internal identifier for the room",
                        max_length=20,
                        unique=True,
                        verbose_name="Room Code",
                    ),
                ),
                (
                    "capacity",
                    models.PositiveIntegerField(
                        help_text="Maximum number of people this room can accommodate",
                        verbose_name="Capacity",
                    ),
                ),
                (
                    "room_type",
                    models.CharField(
                        choices=[
                            ("CLASSROOM", "Classroom"),
                            ("COMP", "Computer Lab"),
                            ("LANG", "Language Lab"),
                            ("CONFERENCE", "Conference Room"),
                            ("MEETING", "Meeting Room"),
                            ("OFFICE", "Office"),
                            ("OTHER", "Other"),
                        ],
                        default="CLASSROOM",
                        help_text="Type of room for scheduling purposes",
                        max_length=20,
                        verbose_name="Room Type",
                    ),
                ),
                (
                    "has_projector",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this room has an overhead projector",
                        verbose_name="Has Projector",
                    ),
                ),
                (
                    "has_whiteboard",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this room has a whiteboard",
                        verbose_name="Has Whiteboard",
                    ),
                ),
                (
                    "has_computers",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this room has computers available",
                        verbose_name="Has Computers",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this room is currently available for use",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this room",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Room",
                "verbose_name_plural": "Rooms",
                "ordering": ["building", "name"],
                "unique_together": {("building", "code")},
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StudentActivityLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "student_number",
                    models.CharField(
                        db_index=True,
                        help_text="Student number for easy searching",
                        max_length=20,
                        verbose_name="Student Number",
                    ),
                ),
                (
                    "student_name",
                    models.CharField(
                        help_text="Student name at time of action (for historical reference)",
                        max_length=200,
                        verbose_name="Student Name",
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("CLASS_ENROLLMENT", "Class Enrollment"),
                            ("CLASS_WITHDRAWAL", "Class Withdrawal"),
                            ("CLASS_COMPLETION", "Class Completion"),
                            ("LANGUAGE_PROMOTION", "Language Level Promotion"),
                            ("LANGUAGE_LEVEL_SKIP", "Language Level Skip"),
                            ("LANGUAGE_PROGRAM_TRANSFER", "Language Program Transfer"),
                            ("GRADE_ASSIGNMENT", "Grade Assignment"),
                            ("GRADE_CHANGE", "Grade Change"),
                            ("PROGRAM_ENROLLMENT", "Program Enrollment"),
                            ("PROGRAM_WITHDRAWAL", "Program Withdrawal"),
                            ("STUDENT_STATUS_CHANGE", "Student Status Change"),
                            ("MANAGEMENT_OVERRIDE", "Management Override Applied"),
                            (
                                "REPEAT_PREVENTION_OVERRIDE",
                                "Repeat Prevention Override",
                            ),
                            ("ATTENDANCE_RECORD", "Attendance Record"),
                            ("DOCUMENT_REQUEST", "Document Request"),
                        ],
                        db_index=True,
                        help_text="Type of activity performed",
                        max_length=40,
                        verbose_name="Activity Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the activity",
                        verbose_name="Description",
                    ),
                ),
                (
                    "term_name",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Term when activity occurred (if applicable)",
                        max_length=100,
                        verbose_name="Term Name",
                    ),
                ),
                (
                    "class_code",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Course/class code (if applicable)",
                        max_length=20,
                        verbose_name="Class Code",
                    ),
                ),
                (
                    "class_section",
                    models.CharField(
                        blank=True,
                        help_text="Class section (if applicable)",
                        max_length=10,
                        verbose_name="Class Section",
                    ),
                ),
                (
                    "program_name",
                    models.CharField(
                        blank=True,
                        help_text="Academic or language program (if applicable)",
                        max_length=100,
                        verbose_name="Program Name",
                    ),
                ),
                (
                    "activity_details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional structured details about the activity",
                        verbose_name="Activity Details",
                    ),
                ),
                (
                    "is_system_generated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this log entry was automatically generated",
                        verbose_name="System Generated",
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        help_text="Staff member who performed or initiated the action",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="student_activities_performed",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Performed By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Audit Log",
                "verbose_name_plural": "Student Audit Logs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["student_number", "-created_at"],
                        name="common_stud_student_5d6b7c_idx",
                    ),
                    models.Index(
                        fields=["activity_type", "-created_at"],
                        name="common_stud_activit_2778db_idx",
                    ),
                    models.Index(
                        fields=["term_name", "-created_at"],
                        name="common_stud_term_na_757486_idx",
                    ),
                    models.Index(
                        fields=["class_code", "-created_at"],
                        name="common_stud_class_c_6bb3bd_idx",
                    ),
                    models.Index(
                        fields=["student_number", "term_name", "-created_at"],
                        name="common_stud_student_517ede_idx",
                    ),
                    models.Index(
                        fields=["student_number", "class_code", "-created_at"],
                        name="common_stud_student_b898ff_idx",
                    ),
                    models.Index(
                        fields=["student_number", "activity_type", "-created_at"],
                        name="common_stud_student_46d954_idx",
                    ),
                    models.Index(fields=["created_at"], name="common_stud_created_d5d9ee_idx"),
                    models.Index(fields=["-created_at"], name="common_stud_created_1e7a98_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="SystemAuditLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "action_type",
                    models.CharField(
                        choices=[
                            ("ENROLLMENT_OVERRIDE", "Enrollment Override"),
                            (
                                "REPEAT_PREVENTION_OVERRIDE",
                                "Repeat Prevention Override",
                            ),
                            ("PREREQUISITE_OVERRIDE", "Prerequisite Override"),
                            ("CAPACITY_OVERRIDE", "Capacity Override"),
                            ("ACADEMIC_POLICY_OVERRIDE", "Academic Policy Override"),
                            (
                                "REGISTRATION_POLICY_OVERRIDE",
                                "Registration Policy Override",
                            ),
                            ("LANGUAGE_LEVEL_SKIP", "Language Level Skip"),
                            (
                                "LANGUAGE_PROMOTION_OVERRIDE",
                                "Language Promotion Override",
                            ),
                        ],
                        help_text="Type of override action performed",
                        max_length=50,
                        verbose_name="Action Type",
                    ),
                ),
                (
                    "target_app",
                    models.CharField(
                        help_text="Django app where the override occurred",
                        max_length=50,
                        verbose_name="Target App",
                    ),
                ),
                (
                    "target_model",
                    models.CharField(
                        help_text="Model type that was affected by the override",
                        max_length=50,
                        verbose_name="Target Model",
                    ),
                ),
                (
                    "target_object_id",
                    models.CharField(
                        help_text="ID of the specific object that was affected",
                        max_length=100,
                        verbose_name="Target Object ID",
                    ),
                ),
                (
                    "override_reason",
                    models.TextField(
                        help_text="Detailed reason for the override action",
                        verbose_name="Override Reason",
                    ),
                ),
                (
                    "original_restriction",
                    models.TextField(
                        help_text="Description of the rule/restriction that was overridden",
                        verbose_name="Original Restriction",
                    ),
                ),
                (
                    "override_details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional details about the override in JSON format",
                        verbose_name="Override Details",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of the user who performed the override",
                        null=True,
                        verbose_name="IP Address",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="Browser/client information for the override action",
                        verbose_name="User Agent",
                    ),
                ),
                (
                    "performed_by",
                    models.ForeignKey(
                        help_text="User who performed the override action",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="performed_overrides",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Performed By",
                    ),
                ),
            ],
            options={
                "verbose_name": "System Audit Log",
                "verbose_name_plural": "System Audit Logs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["action_type", "created_at"],
                        name="common_syst_action__c6d502_idx",
                    ),
                    models.Index(
                        fields=["performed_by", "created_at"],
                        name="common_syst_perform_09d551_idx",
                    ),
                    models.Index(
                        fields=["target_app", "target_model"],
                        name="common_syst_target__05c677_idx",
                    ),
                    models.Index(fields=["created_at"], name="common_syst_created_f4790a_idx"),
                ],
            },
        ),
    ]
