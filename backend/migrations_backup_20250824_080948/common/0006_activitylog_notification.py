# Generated by Django 5.2.5 on 2025-08-18 10:33

import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("common", "0005_alter_room_managers_and_more"),
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ActivityLog",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("LOGIN", "User Login"),
                            ("LOGOUT", "User Logout"),
                            ("CREATE", "Create Record"),
                            ("UPDATE", "Update Record"),
                            ("DELETE", "Delete Record"),
                            ("VIEW", "View Record"),
                            ("EXPORT", "Export Data"),
                            ("IMPORT", "Import Data"),
                            ("PAYMENT", "Payment Processed"),
                            ("ENROLLMENT", "Student Enrollment"),
                            ("GRADE_ENTRY", "Grade Entry"),
                            ("SYSTEM", "System Event"),
                            ("ERROR", "System Error"),
                        ],
                        max_length=20,
                        verbose_name="Activity Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Human-readable description of the activity", verbose_name="Description"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="User's IP address when action was performed",
                        null=True,
                        verbose_name="IP Address",
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="User's browser/client information", verbose_name="User Agent"
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        blank=True, help_text="User's session identifier", max_length=40, verbose_name="Session Key"
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True, verbose_name="Object ID")),
                (
                    "changes",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Details of what changed (for updates)",
                        verbose_name="Changes",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional activity context", verbose_name="Metadata"
                    ),
                ),
                (
                    "success",
                    models.BooleanField(
                        default=True, help_text="Whether the activity completed successfully", verbose_name="Success"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error details if activity failed", verbose_name="Error Message"
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                        verbose_name="Content Type",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated by",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="activity_logs",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Activity Log",
                "verbose_name_plural": "Activity Logs",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["user", "-created_at"], name="common_acti_user_id_b871d5_idx"),
                    models.Index(fields=["activity_type", "-created_at"], name="common_acti_activit_69f87f_idx"),
                    models.Index(fields=["content_type", "object_id"], name="common_acti_content_dba591_idx"),
                    models.Index(fields=["-created_at"], name="common_acti_created_ea2eaa_idx"),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "title",
                    models.CharField(help_text="Brief notification title", max_length=255, verbose_name="Title"),
                ),
                ("message", models.TextField(help_text="Detailed notification message", verbose_name="Message")),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("INFO", "Information"),
                            ("SUCCESS", "Success"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("FINANCE", "Finance"),
                            ("ACADEMIC", "Academic"),
                            ("ENROLLMENT", "Enrollment"),
                            ("GRADING", "Grading"),
                            ("SYSTEM", "System"),
                        ],
                        default="INFO",
                        max_length=20,
                        verbose_name="Type",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[("LOW", "Low"), ("NORMAL", "Normal"), ("HIGH", "High"), ("URGENT", "Urgent")],
                        default="NORMAL",
                        max_length=10,
                        verbose_name="Priority",
                    ),
                ),
                (
                    "is_read",
                    models.BooleanField(
                        default=False, help_text="Whether the user has read this notification", verbose_name="Is Read"
                    ),
                ),
                (
                    "read_at",
                    models.DateTimeField(
                        blank=True, help_text="When the notification was read", null=True, verbose_name="Read At"
                    ),
                ),
                (
                    "action_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional URL for notification action",
                        max_length=500,
                        verbose_name="Action URL",
                    ),
                ),
                (
                    "action_text",
                    models.CharField(
                        blank=True, help_text="Text for action button", max_length=100, verbose_name="Action Text"
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When this notification expires", null=True, verbose_name="Expires At"
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional notification data", verbose_name="Metadata"
                    ),
                ),
                ("object_id", models.PositiveIntegerField(blank=True, null=True, verbose_name="Object ID")),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                        verbose_name="Content Type",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated by",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification",
                "verbose_name_plural": "Notifications",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(fields=["user", "-created_at"], name="common_noti_user_id_053883_idx"),
                    models.Index(fields=["user", "is_read"], name="common_noti_user_id_aae5b0_idx"),
                    models.Index(fields=["notification_type", "-created_at"], name="common_noti_notific_0dd534_idx"),
                    models.Index(fields=["priority", "-created_at"], name="common_noti_priorit_d15cc9_idx"),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
    ]
