# Generated by Django 5.2.4 on 2025-07-15 01:23

import datetime
from decimal import Decimal

import django.core.validators
import django.db.models.manager
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ClassHeaderEnrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ENROLLED", "Enrolled"),
                            ("ACTIVE", "Active"),
                            ("DROPPED", "Dropped"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("INCOMPLETE", "Incomplete"),
                            ("WITHDRAWN", "Withdrawn"),
                            ("AUDIT", "Audit"),
                            ("NO_SHOW_ACADEMIC", "No Show (Academic)"),
                            ("NO_SHOW_LANGUAGE", "No Show (Language)"),
                        ],
                        db_index=True,
                        default="ENROLLED",
                        help_text="Current enrollment status",
                        max_length=20,
                        verbose_name="Enrollment Status",
                    ),
                ),
                (
                    "final_grade",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Final grade awarded for the class",
                        max_length=10,
                        verbose_name="Final Grade",
                    ),
                ),
                (
                    "grade_points",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Grade points for GPA calculation",
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("4.00")),
                        ],
                        verbose_name="Grade Points",
                    ),
                ),
                (
                    "enrollment_date",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        help_text="When the student was enrolled",
                        verbose_name="Enrollment Date",
                    ),
                ),
                (
                    "completion_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the student completed or withdrew from the class",
                        null=True,
                        verbose_name="Completion Date",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Administrative notes about this enrollment",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "has_override",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this enrollment was created with management override",
                        verbose_name="Has Override",
                    ),
                ),
                (
                    "override_type",
                    models.CharField(
                        blank=True,
                        help_text="Type of override applied (if any)",
                        max_length=50,
                        verbose_name="Override Type",
                    ),
                ),
                (
                    "override_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for management override (if any)",
                        verbose_name="Override Reason",
                    ),
                ),
                (
                    "is_audit",
                    models.BooleanField(
                        default=False,
                        help_text="Whether student is auditing (not for credit)",
                        verbose_name="Audit Only",
                    ),
                ),
                (
                    "late_enrollment",
                    models.BooleanField(
                        default=False,
                        help_text="Whether student enrolled after normal deadline",
                        verbose_name="Late Enrollment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Header Enrollment",
                "verbose_name_plural": "Class Header Enrollments",
                "ordering": ["student", "-enrollment_date"],
                "permissions": [
                    ("can_manage_enrollments", "Can manage student enrollments"),
                    ("can_override_capacity", "Can override class capacity limits"),
                    (
                        "can_override_prerequisites",
                        "Can override prerequisite requirements",
                    ),
                    ("can_override_credit_limits", "Can override credit/course limits"),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ClassPartEnrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "enrollment_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the student was enrolled in this class part",
                        verbose_name="Enrollment Date",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this enrollment is currently active",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this class part enrollment",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Part Enrollment",
                "verbose_name_plural": "Class Part Enrollments",
                "ordering": ["student", "class_part"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ClassSessionExemption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "exemption_reason",
                    models.CharField(
                        help_text="Reason for session exemption (e.g., 'Already passed Session 1')",
                        max_length=100,
                        verbose_name="Exemption Reason",
                    ),
                ),
                (
                    "exemption_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When the exemption was granted",
                        verbose_name="Exemption Date",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this session exemption",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Session Exemption",
                "verbose_name_plural": "Class Session Exemptions",
                "ordering": ["class_header_enrollment", "class_session"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="MajorDeclaration",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(
                        db_index=True,
                        default=datetime.date.today,
                        help_text="Date when this major declaration becomes effective",
                        verbose_name="Effective Date",
                    ),
                ),
                (
                    "declared_date",
                    models.DateTimeField(
                        db_index=True,
                        default=django.utils.timezone.now,
                        help_text="When the student made this declaration",
                        verbose_name="Declaration Date",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this declaration is currently active",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "is_self_declared",
                    models.BooleanField(
                        default=True,
                        help_text="Whether student declared this themselves via mobile app",
                        verbose_name="Self Declared",
                    ),
                ),
                (
                    "change_reason",
                    models.TextField(
                        blank=True,
                        help_text="Reason for major change (required for major changes)",
                        verbose_name="Change Reason",
                    ),
                ),
                (
                    "supporting_documents",
                    models.TextField(
                        blank=True,
                        help_text="Reference to paperwork or documents supporting this declaration",
                        verbose_name="Supporting Documents",
                    ),
                ),
                (
                    "requires_approval",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this declaration requires administrative approval",
                        verbose_name="Requires Approval",
                    ),
                ),
                (
                    "approved_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the declaration was approved",
                        null=True,
                        verbose_name="Approval Date",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this major declaration",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Major Declaration",
                "verbose_name_plural": "Major Declarations",
                "ordering": ["student", "-effective_date", "-declared_date"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ProgramEnrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "enrollment_type",
                    models.CharField(
                        choices=[
                            ("LANG", "Language Program"),
                            ("ACAD", "Academic Program"),
                            ("JOINT", "Joint Program"),
                        ],
                        db_index=True,
                        default="ACAD",
                        help_text="Type of program enrollment",
                        max_length=10,
                        verbose_name="Enrollment Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("COMPLETED", "Completed"),
                            ("WITHDRAWN", "Withdrawn"),
                            ("SUSPENDED", "Suspended"),
                            ("TRANSFERRED", "Transferred"),
                            ("DROPPED", "Dropped"),
                            ("FAILED", "Failed"),
                            ("NO_SHOW_ACADEMIC", "No Show (Academic)"),
                            ("NO_SHOW_LANGUAGE", "No Show (Language)"),
                        ],
                        db_index=True,
                        default="ACTIVE",
                        help_text="Current enrollment status",
                        max_length=20,
                        verbose_name="Enrollment Status",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        db_index=True,
                        help_text="Date when program enrollment began",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="Date when program enrollment ended (if applicable)",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "entry_level",
                    models.CharField(
                        blank=True,
                        help_text="Student's level when entering the program",
                        max_length=50,
                        verbose_name="Entry Level",
                    ),
                ),
                (
                    "finishing_level",
                    models.CharField(
                        blank=True,
                        help_text="Student's expected or actual finishing level",
                        max_length=50,
                        verbose_name="Finishing Level",
                    ),
                ),
                (
                    "terms_active",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of terms the student has been active in this program",
                        verbose_name="Terms Active",
                    ),
                ),
                (
                    "is_joint",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is part of a joint program enrollment",
                        verbose_name="Joint Program",
                    ),
                ),
                (
                    "is_system_generated",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this enrollment was automatically created/updated by system",
                        verbose_name="System Generated",
                    ),
                ),
                (
                    "last_status_update",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When the status was last updated (for tracking automated updates)",
                        verbose_name="Last Status Update",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this program enrollment",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Program Enrollment",
                "verbose_name_plural": "Program Enrollments",
                "ordering": ["student", "-start_date"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="StudentCourseEligibility",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "is_eligible",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether the student is eligible for this course in this term",
                        verbose_name="Is Eligible",
                    ),
                ),
                (
                    "is_retake",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this would be a retake of the course",
                        verbose_name="Is Retake",
                    ),
                ),
                (
                    "previous_attempts",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Number of previous attempts at this course",
                        verbose_name="Previous Attempts",
                    ),
                ),
                (
                    "retry_priority_score",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Priority score for retake scheduling (higher = more priority)",
                        verbose_name="Retry Priority Score",
                    ),
                ),
                (
                    "last_calculated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="When eligibility was last calculated",
                        verbose_name="Last Calculated",
                    ),
                ),
                (
                    "calculation_notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes about how eligibility was determined",
                        verbose_name="Calculation Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Course Eligibility",
                "verbose_name_plural": "Student Course Eligibilities",
                "ordering": ["student", "term", "course"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
    ]
