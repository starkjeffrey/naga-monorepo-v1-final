# Generated by Django 5.2.4 on 2025-07-30 03:46

from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("curriculum", "0005_alter_major_program_type"),
        ("enrollment", "0005_alter_programenrollment_cycle_and_more"),
        ("people", "0009_alter_studentphoto_managers_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AcademicJourney",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "current_program_type",
                    models.CharField(
                        choices=[
                            ("LANGUAGE", "Language Program"),
                            ("BA", "Bachelor's Degree"),
                            ("MA", "Master's Degree"),
                            ("PHD", "Doctoral Degree"),
                            ("CERT", "Certificate Program"),
                            ("NONE", "Not Currently Enrolled"),
                        ],
                        db_index=True,
                        default="NONE",
                        help_text="Type of program currently enrolled in",
                        max_length=20,
                        verbose_name="Current Program Type",
                    ),
                ),
                (
                    "current_level",
                    models.CharField(
                        blank=True,
                        help_text="Current level for language programs (e.g., IEAP-3)",
                        max_length=10,
                        verbose_name="Current Level",
                    ),
                ),
                (
                    "journey_status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Currently Active"),
                            ("GRADUATED", "Graduated"),
                            ("DROPPED", "Dropped Out"),
                            ("SUSPENDED", "Suspended"),
                            ("TRANSFERRED", "Transferred Out"),
                            ("DECEASED", "Deceased"),
                            ("UNKNOWN", "Unknown Status"),
                        ],
                        db_index=True,
                        default="ACTIVE",
                        help_text="Overall status of academic journey",
                        max_length=20,
                        verbose_name="Journey Status",
                    ),
                ),
                (
                    "first_enrollment_date",
                    models.DateField(
                        db_index=True,
                        help_text="Date of first enrollment at the institution",
                        verbose_name="First Enrollment Date",
                    ),
                ),
                (
                    "last_activity_date",
                    models.DateField(
                        help_text="Date of most recent academic activity", verbose_name="Last Activity Date"
                    ),
                ),
                (
                    "expected_completion_date",
                    models.DateField(
                        blank=True,
                        help_text="Projected completion date for current program",
                        null=True,
                        verbose_name="Expected Completion Date",
                    ),
                ),
                (
                    "total_terms_enrolled",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total number of terms with enrollment",
                        verbose_name="Total Terms Enrolled",
                    ),
                ),
                (
                    "total_credits_earned",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Total credits earned across all programs",
                        max_digits=6,
                        verbose_name="Total Credits Earned",
                    ),
                ),
                (
                    "language_programs_completed",
                    models.JSONField(
                        default=list,
                        help_text="List of completed language programs (e.g., ['IEAP-4', 'GESL-12'])",
                        verbose_name="Language Programs Completed",
                    ),
                ),
                (
                    "degrees_earned",
                    models.JSONField(
                        default=list,
                        help_text="List of earned degrees (e.g., ['BA-IR-2018', 'MA-TESOL-2020'])",
                        verbose_name="Degrees Earned",
                    ),
                ),
                (
                    "data_source",
                    models.CharField(
                        choices=[
                            ("LEGACY", "Imported from Legacy System"),
                            ("MANUAL", "Manually Entered"),
                            ("SYSTEM", "System Generated"),
                            ("MIXED", "Multiple Sources"),
                        ],
                        default="SYSTEM",
                        help_text="Primary source of journey data",
                        max_length=20,
                        verbose_name="Data Source",
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1.00"),
                        help_text="Overall confidence in journey data (0.0-1.0)",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("1.00")),
                        ],
                        verbose_name="Confidence Score",
                    ),
                ),
                (
                    "data_issues",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of identified data quality issues",
                        verbose_name="Data Issues",
                    ),
                ),
                (
                    "requires_review",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether this journey needs manual review",
                        verbose_name="Requires Review",
                    ),
                ),
                (
                    "last_manual_review",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this journey was last manually reviewed",
                        null=True,
                        verbose_name="Last Manual Review",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Administrative notes about this journey", verbose_name="Notes"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "current_program",
                    models.ForeignKey(
                        blank=True,
                        help_text="Current academic program or major",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="current_students",
                        to="curriculum.major",
                        verbose_name="Current Program",
                    ),
                ),
                (
                    "student",
                    models.OneToOneField(
                        help_text="Student whose journey is being tracked",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="academic_journey",
                        to="people.studentprofile",
                        verbose_name="Student",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Academic Journey",
                "verbose_name_plural": "Academic Journeys",
                "ordering": ["-last_activity_date", "student"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="AcademicProgression",
            fields=[
                (
                    "student",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="progression_summary",
                        serialize=False,
                        to="people.studentprofile",
                        verbose_name="Student",
                    ),
                ),
                (
                    "student_name",
                    models.CharField(
                        help_text="Denormalized student full name", max_length=200, verbose_name="Student Name"
                    ),
                ),
                (
                    "student_id_number",
                    models.CharField(
                        db_index=True,
                        help_text="Denormalized student ID number",
                        max_length=20,
                        verbose_name="Student ID",
                    ),
                ),
                (
                    "entry_program",
                    models.CharField(
                        help_text="First program enrolled in", max_length=50, verbose_name="Entry Program"
                    ),
                ),
                (
                    "entry_date",
                    models.DateField(db_index=True, help_text="Date of first enrollment", verbose_name="Entry Date"),
                ),
                (
                    "entry_term",
                    models.CharField(
                        help_text="Term code of first enrollment", max_length=20, verbose_name="Entry Term"
                    ),
                ),
                (
                    "language_start_date",
                    models.DateField(
                        blank=True,
                        help_text="Start date of language program",
                        null=True,
                        verbose_name="Language Start Date",
                    ),
                ),
                (
                    "language_end_date",
                    models.DateField(
                        blank=True,
                        help_text="End date of language program",
                        null=True,
                        verbose_name="Language End Date",
                    ),
                ),
                (
                    "language_terms",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of terms in language programs", verbose_name="Language Terms"
                    ),
                ),
                (
                    "language_final_level",
                    models.CharField(
                        blank=True,
                        help_text="Final level achieved in language program",
                        max_length=20,
                        verbose_name="Language Final Level",
                    ),
                ),
                (
                    "language_completion_status",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="COMPLETED, BYPASSED, DROPPED, etc.",
                        max_length=20,
                        verbose_name="Language Completion Status",
                    ),
                ),
                (
                    "ba_start_date",
                    models.DateField(
                        blank=True, help_text="Start date of BA program", null=True, verbose_name="BA Start Date"
                    ),
                ),
                (
                    "ba_major",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Bachelor's degree major",
                        max_length=100,
                        verbose_name="BA Major",
                    ),
                ),
                (
                    "ba_major_changes",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of major changes during BA", verbose_name="BA Major Changes"
                    ),
                ),
                (
                    "ba_terms",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of terms enrolled in BA", verbose_name="BA Terms"
                    ),
                ),
                (
                    "ba_credits",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Total credits earned in BA",
                        max_digits=6,
                        verbose_name="BA Credits",
                    ),
                ),
                (
                    "ba_gpa",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Final BA GPA",
                        max_digits=3,
                        null=True,
                        verbose_name="BA GPA",
                    ),
                ),
                (
                    "ba_completion_date",
                    models.DateField(
                        blank=True, help_text="BA graduation date", null=True, verbose_name="BA Completion Date"
                    ),
                ),
                (
                    "ba_completion_status",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="GRADUATED, DROPPED, ACTIVE, etc.",
                        max_length=20,
                        verbose_name="BA Completion Status",
                    ),
                ),
                (
                    "ma_start_date",
                    models.DateField(
                        blank=True, help_text="Start date of MA program", null=True, verbose_name="MA Start Date"
                    ),
                ),
                (
                    "ma_program",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Master's degree program",
                        max_length=100,
                        verbose_name="MA Program",
                    ),
                ),
                (
                    "ma_terms",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of terms enrolled in MA", verbose_name="MA Terms"
                    ),
                ),
                (
                    "ma_credits",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        help_text="Total credits earned in MA",
                        max_digits=6,
                        verbose_name="MA Credits",
                    ),
                ),
                (
                    "ma_gpa",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Final MA GPA",
                        max_digits=3,
                        null=True,
                        verbose_name="MA GPA",
                    ),
                ),
                (
                    "ma_completion_date",
                    models.DateField(
                        blank=True, help_text="MA graduation date", null=True, verbose_name="MA Completion Date"
                    ),
                ),
                (
                    "ma_completion_status",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="GRADUATED, DROPPED, ACTIVE, etc.",
                        max_length=20,
                        verbose_name="MA Completion Status",
                    ),
                ),
                (
                    "total_terms",
                    models.PositiveIntegerField(
                        default=0, help_text="Total terms enrolled across all programs", verbose_name="Total Terms"
                    ),
                ),
                (
                    "total_gap_terms",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of terms with no enrollment", verbose_name="Total Gap Terms"
                    ),
                ),
                (
                    "time_to_ba_days",
                    models.PositiveIntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Days from first enrollment to BA graduation",
                        null=True,
                        verbose_name="Time to BA (Days)",
                    ),
                ),
                (
                    "time_to_ma_days",
                    models.PositiveIntegerField(
                        blank=True,
                        db_index=True,
                        help_text="Days from BA graduation to MA graduation",
                        null=True,
                        verbose_name="Time to MA (Days)",
                    ),
                ),
                (
                    "current_status",
                    models.CharField(
                        db_index=True,
                        help_text="Current enrollment status",
                        max_length=50,
                        verbose_name="Current Status",
                    ),
                ),
                (
                    "last_enrollment_term",
                    models.CharField(
                        help_text="Most recent term with enrollment",
                        max_length=20,
                        verbose_name="Last Enrollment Term",
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="When this summary was last updated", verbose_name="Last Updated"
                    ),
                ),
            ],
            options={
                "verbose_name": "Academic Progression",
                "verbose_name_plural": "Academic Progressions",
                "ordering": ["-last_updated"],
                "indexes": [
                    models.Index(fields=["current_status", "entry_program"], name="enrollment__current_be75f0_idx"),
                    models.Index(fields=["ba_major", "ba_completion_status"], name="enrollment__ba_majo_ae69e2_idx"),
                    models.Index(fields=["ma_program", "ma_completion_status"], name="enrollment__ma_prog_e67077_idx"),
                    models.Index(fields=["time_to_ba_days"], name="enrollment__time_to_3e3d5a_idx"),
                    models.Index(fields=["time_to_ma_days"], name="enrollment__time_to_00426c_idx"),
                    models.Index(
                        fields=["language_completion_status", "language_final_level"],
                        name="enrollment__languag_e08425_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CertificateIssuance",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "certificate_type",
                    models.CharField(
                        choices=[
                            ("IEAP", "IEAP Completion Certificate"),
                            ("GESL", "GESL Completion Certificate"),
                            ("EHSS", "EHSS Completion Certificate"),
                            ("BA", "Bachelor of Arts"),
                            ("MA", "Master of Arts"),
                            ("PHD", "Doctor of Philosophy"),
                            ("TRANS", "Official Transcript"),
                            ("LETTER", "Completion Letter"),
                            ("CERT", "General Certificate"),
                        ],
                        db_index=True,
                        help_text="Type of certificate issued",
                        max_length=20,
                        verbose_name="Certificate Type",
                    ),
                ),
                (
                    "issue_date",
                    models.DateField(
                        db_index=True, help_text="Date certificate was issued", verbose_name="Issue Date"
                    ),
                ),
                (
                    "completion_level",
                    models.CharField(
                        blank=True,
                        help_text="Level completed (for language programs)",
                        max_length=20,
                        verbose_name="Completion Level",
                    ),
                ),
                (
                    "gpa",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="GPA at time of graduation",
                        max_digits=3,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("4.00")),
                        ],
                        verbose_name="GPA",
                    ),
                ),
                (
                    "honors",
                    models.CharField(
                        blank=True,
                        help_text="Academic honors (e.g., Magna Cum Laude)",
                        max_length=50,
                        verbose_name="Honors",
                    ),
                ),
                (
                    "certificate_number",
                    models.CharField(
                        help_text="Unique certificate identifier",
                        max_length=50,
                        unique=True,
                        verbose_name="Certificate Number",
                    ),
                ),
                (
                    "printed_date",
                    models.DateField(
                        blank=True, help_text="Date certificate was printed", null=True, verbose_name="Printed Date"
                    ),
                ),
                (
                    "collected_date",
                    models.DateField(
                        blank=True,
                        help_text="Date certificate was collected by student",
                        null=True,
                        verbose_name="Collected Date",
                    ),
                ),
                (
                    "collected_by",
                    models.CharField(
                        blank=True,
                        help_text="Person who collected certificate",
                        max_length=100,
                        verbose_name="Collected By",
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Additional notes about issuance", verbose_name="Notes"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "issued_by",
                    models.ForeignKey(
                        help_text="Staff member who issued certificate",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="certificates_issued_by",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Issued By",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        blank=True,
                        help_text="Academic program for degree/certificate",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="certificates",
                        to="curriculum.major",
                        verbose_name="Program",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        help_text="Student receiving certificate",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="certificates_issued",
                        to="people.studentprofile",
                        verbose_name="Student",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Certificate Issuance",
                "verbose_name_plural": "Certificate Issuances",
                "ordering": ["-issue_date", "student"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ProgramMilestone",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "milestone_type",
                    models.CharField(
                        choices=[
                            ("PROG_START", "Program Start"),
                            ("LEVEL_ADV", "Level Advancement"),
                            ("MAJOR_DEC", "Major Declaration"),
                            ("MAJOR_CHG", "Major Change"),
                            ("LEVEL_COMP", "Level Completion"),
                            ("PROG_COMP", "Program Completion"),
                            ("DEGREE", "Degree Earned"),
                            ("CERT", "Certificate Earned"),
                            ("WITHDRAW", "Withdrawal"),
                            ("DISMISS", "Academic Dismissal"),
                            ("LOA", "Leave of Absence"),
                            ("TRANSFER", "Transfer"),
                            ("READMIT", "Readmission"),
                            ("STATUS", "Status Change"),
                        ],
                        db_index=True,
                        help_text="Type of academic milestone",
                        max_length=20,
                        verbose_name="Milestone Type",
                    ),
                ),
                (
                    "milestone_date",
                    models.DateField(
                        db_index=True, help_text="Date when milestone occurred", verbose_name="Milestone Date"
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        blank=True, help_text="Level for language programs", max_length=10, verbose_name="Level"
                    ),
                ),
                (
                    "is_inferred",
                    models.BooleanField(
                        default=False,
                        help_text="Whether milestone was deduced from enrollment data",
                        verbose_name="Is Inferred",
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1.00"),
                        help_text="Confidence in milestone accuracy (0.0-1.0)",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("1.00")),
                        ],
                        verbose_name="Confidence Score",
                    ),
                ),
                (
                    "inference_method",
                    models.CharField(
                        blank=True,
                        help_text="Method used to infer milestone",
                        max_length=50,
                        verbose_name="Inference Method",
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, help_text="Additional notes about milestone", verbose_name="Notes"),
                ),
                (
                    "academic_term",
                    models.ForeignKey(
                        blank=True,
                        help_text="Term when milestone occurred",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="program_milestones",
                        to="curriculum.term",
                        verbose_name="Academic Term",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who created this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created by",
                    ),
                ),
                (
                    "from_program",
                    models.ForeignKey(
                        blank=True,
                        help_text="Previous program (for changes/transitions)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="transitions_from_milestones",
                        to="curriculum.major",
                        verbose_name="From Program",
                    ),
                ),
                (
                    "journey",
                    models.ForeignKey(
                        help_text="Parent journey record",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="milestones",
                        to="enrollment.academicjourney",
                        verbose_name="Academic Journey",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        blank=True,
                        help_text="Program associated with milestone",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="milestones",
                        to="curriculum.major",
                        verbose_name="Program",
                    ),
                ),
                (
                    "recorded_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who recorded milestone",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="recorded_milestones",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Recorded By",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who last updated this record",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(app_label)s_%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Updated by",
                    ),
                ),
            ],
            options={
                "verbose_name": "Program Milestone",
                "verbose_name_plural": "Program Milestones",
                "ordering": ["journey", "milestone_date"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddIndex(
            model_name="academicjourney",
            index=models.Index(
                fields=["journey_status", "current_program_type"], name="enrollment__journey_636400_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="academicjourney",
            index=models.Index(fields=["current_program", "journey_status"], name="enrollment__current_d9c1f7_idx"),
        ),
        migrations.AddIndex(
            model_name="academicjourney",
            index=models.Index(fields=["requires_review", "confidence_score"], name="enrollment__require_9cba94_idx"),
        ),
        migrations.AddIndex(
            model_name="academicjourney",
            index=models.Index(fields=["data_source", "confidence_score"], name="enrollment__data_so_868b2e_idx"),
        ),
        migrations.AddIndex(
            model_name="certificateissuance",
            index=models.Index(fields=["student", "certificate_type"], name="enrollment__student_f36791_idx"),
        ),
        migrations.AddIndex(
            model_name="certificateissuance",
            index=models.Index(fields=["issue_date", "certificate_type"], name="enrollment__issue_d_f5975c_idx"),
        ),
        migrations.AddIndex(
            model_name="certificateissuance",
            index=models.Index(fields=["certificate_number"], name="enrollment__certifi_7d659d_idx"),
        ),
        migrations.AddIndex(
            model_name="certificateissuance",
            index=models.Index(fields=["program", "certificate_type"], name="enrollment__program_67cf0e_idx"),
        ),
        migrations.AddIndex(
            model_name="programmilestone",
            index=models.Index(fields=["journey", "milestone_date"], name="enrollment__journey_28adc3_idx"),
        ),
        migrations.AddIndex(
            model_name="programmilestone",
            index=models.Index(fields=["milestone_type", "milestone_date"], name="enrollment__milesto_bb579d_idx"),
        ),
        migrations.AddIndex(
            model_name="programmilestone",
            index=models.Index(fields=["program", "milestone_type"], name="enrollment__program_c1e9c1_idx"),
        ),
        migrations.AddIndex(
            model_name="programmilestone",
            index=models.Index(fields=["is_inferred", "confidence_score"], name="enrollment__is_infe_530298_idx"),
        ),
    ]
