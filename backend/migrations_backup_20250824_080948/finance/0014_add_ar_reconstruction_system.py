# Generated by Django for A/R Reconstruction System

from datetime import date
from decimal import Decimal

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("finance", "0013_auto_20250728_1348"),
        ("people", "0001_initial"),
        ("curriculum", "0001_initial"),
    ]

    operations = [
        # === EXTEND EXISTING MODELS ===
        # Extend Invoice model with legacy data preservation
        migrations.AddField(
            model_name="invoice",
            name="legacy_receipt_number",
            field=models.CharField(
                blank=True,
                help_text="Original receipt number from legacy system",
                max_length=20,
                null=True,
                verbose_name="Legacy Receipt Number",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="legacy_receipt_id",
            field=models.CharField(
                blank=True,
                help_text="Full legacy receipt ID containing clerk info",
                max_length=200,
                null=True,
                verbose_name="Legacy Receipt ID",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="legacy_notes",
            field=models.TextField(
                blank=True,
                help_text="Original notes field for business logic analysis",
                verbose_name="Legacy Notes",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="legacy_processing_clerk",
            field=models.CharField(
                blank=True,
                help_text="Clerk who processed original payment (extracted from ReceiptID)",
                max_length=100,
                verbose_name="Legacy Processing Clerk",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="is_historical",
            field=models.BooleanField(
                default=False,
                help_text="True if reconstructed from legacy data",
                verbose_name="Is Historical",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="original_amount",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text="Original amount from legacy 'Amount' field",
                max_digits=10,
                null=True,
                verbose_name="Original Amount",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="discount_applied",
            field=models.DecimalField(
                decimal_places=2,
                default=Decimal("0.00"),
                help_text="Total discount from legacy 'NetDiscount' field",
                max_digits=10,
                verbose_name="Discount Applied",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="reconstruction_status",
            field=models.CharField(
                blank=True,
                choices=[
                    ("RECONSTRUCTED", "Successfully Reconstructed"),
                    ("PENDING_REVIEW", "Pending Manual Review"),
                    ("VARIANCE_DETECTED", "Variance Requires Investigation"),
                    ("SCHOLARSHIP_NEEDED", "Scholarship Data Required"),
                    ("DISCOUNT_RULE_NEEDED", "Discount Rule Required"),
                ],
                help_text="Status of reconstruction process",
                max_length=20,
                verbose_name="Reconstruction Status",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="needs_reprocessing",
            field=models.BooleanField(
                default=False,
                help_text="True if invoice needs reprocessing due to new data",
                verbose_name="Needs Reprocessing",
            ),
        ),
        migrations.AddField(
            model_name="invoice",
            name="reprocessing_reason",
            field=models.TextField(
                blank=True,
                help_text="Why this invoice needs reprocessing",
                verbose_name="Reprocessing Reason",
            ),
        ),
        # Extend Payment model with legacy data preservation
        migrations.AddField(
            model_name="payment",
            name="legacy_receipt_reference",
            field=models.CharField(
                blank=True,
                help_text="Original ReceiptNo for payment lookup",
                max_length=20,
                null=True,
                verbose_name="Legacy Receipt Reference",
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="legacy_processing_clerk",
            field=models.CharField(
                blank=True,
                help_text="Clerk who processed payment (from ReceiptID)",
                max_length=100,
                verbose_name="Legacy Processing Clerk",
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="legacy_business_notes",
            field=models.TextField(
                blank=True,
                help_text="Full Notes field preservation",
                verbose_name="Legacy Business Notes",
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="legacy_receipt_full_id",
            field=models.CharField(
                blank=True,
                help_text="Complete legacy ReceiptID with clerk/timestamp info",
                max_length=200,
                verbose_name="Legacy Receipt Full ID",
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="is_historical_payment",
            field=models.BooleanField(
                default=False,
                help_text="Payment reconstructed from legacy data",
                verbose_name="Is Historical Payment",
            ),
        ),
        migrations.AddField(
            model_name="payment",
            name="legacy_program_code",
            field=models.CharField(
                blank=True,
                help_text="Original Program field from receipt_headers",
                max_length=10,
                verbose_name="Legacy Program Code",
            ),
        ),
        # Extend InvoiceLineItem model with legacy data preservation
        migrations.AddField(
            model_name="invoicelineitem",
            name="legacy_program_code",
            field=models.CharField(
                blank=True,
                help_text="Program code from legacy receipt",
                max_length=10,
                verbose_name="Legacy Program Code",
            ),
        ),
        migrations.AddField(
            model_name="invoicelineitem",
            name="legacy_course_level",
            field=models.CharField(
                blank=True,
                help_text="CurLevel from legacy data (for reference)",
                max_length=10,
                verbose_name="Legacy Course Level",
            ),
        ),
        migrations.AddField(
            model_name="invoicelineitem",
            name="pricing_method_used",
            field=models.CharField(
                blank=True,
                choices=[
                    ("STANDARD_PRICING", "Standard Course Pricing"),
                    ("EARLY_BIRD_DISCOUNT", "Early Bird Discount Applied"),
                    ("CASH_PAYMENT_PLAN", "Cash Payment Plan"),
                    ("WEEKEND_DISCOUNT", "Weekend Class Discount"),
                    ("MONK_PRICING", "Special Monk Pricing"),
                    ("ADMIN_FEE", "Administrative Fee"),
                    ("SCHOLARSHIP_ADJUSTMENT", "Scholarship Adjustment"),
                    ("MANUAL_OVERRIDE", "Manual Override"),
                    ("UNKNOWN_LEGACY", "Unknown Legacy Logic"),
                ],
                help_text="How pricing was determined for this line",
                max_length=30,
                verbose_name="Pricing Method Used",
            ),
        ),
        migrations.AddField(
            model_name="invoicelineitem",
            name="pricing_confidence",
            field=models.CharField(
                blank=True,
                choices=[
                    ("HIGH", "High Confidence"),
                    ("MEDIUM", "Medium Confidence"),
                    ("LOW", "Low Confidence"),
                    ("MANUAL", "Manual Entry Required"),
                ],
                help_text="Confidence level in pricing calculation",
                max_length=10,
                verbose_name="Pricing Confidence",
            ),
        ),
        migrations.AddField(
            model_name="invoicelineitem",
            name="base_amount",
            field=models.DecimalField(
                blank=True,
                decimal_places=2,
                help_text="Base amount before discounts/adjustments",
                max_digits=10,
                null=True,
                verbose_name="Base Amount",
            ),
        ),
        migrations.AddField(
            model_name="invoicelineitem",
            name="discount_amount",
            field=models.DecimalField(
                decimal_places=2,
                default=Decimal("0.00"),
                help_text="Discount applied to this line item",
                max_digits=10,
                verbose_name="Discount Amount",
            ),
        ),
        migrations.AddField(
            model_name="invoicelineitem",
            name="discount_reason",
            field=models.CharField(
                blank=True,
                help_text="Parsed discount reason from Notes field",
                max_length=200,
                verbose_name="Discount Reason",
            ),
        ),
        # === CREATE NEW MODELS ===
        # ARReconstructionBatch model
        migrations.CreateModel(
            name="ARReconstructionBatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "batch_id",
                    models.CharField(
                        help_text="Unique batch identifier",
                        max_length=50,
                        unique=True,
                        verbose_name="Batch ID",
                    ),
                ),
                (
                    "term_id",
                    models.CharField(
                        help_text="Academic term being processed",
                        max_length=50,
                        verbose_name="Term ID",
                    ),
                ),
                (
                    "processing_mode",
                    models.CharField(
                        choices=[
                            ("SUPERVISED", "Supervised Processing"),
                            ("AUTOMATED", "Automated Processing"),
                            ("REPROCESSING", "Reprocessing Run"),
                        ],
                        default="SUPERVISED",
                        max_length=20,
                        verbose_name="Processing Mode",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("PAUSED", "Paused for Review"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "total_receipts",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Total receipt_headers records to process",
                        verbose_name="Total Receipts",
                    ),
                ),
                (
                    "processed_receipts",
                    models.PositiveIntegerField(default=0, verbose_name="Processed Receipts"),
                ),
                (
                    "successful_reconstructions",
                    models.PositiveIntegerField(default=0, verbose_name="Successful Reconstructions"),
                ),
                (
                    "failed_reconstructions",
                    models.PositiveIntegerField(default=0, verbose_name="Failed Reconstructions"),
                ),
                (
                    "pending_review_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Records requiring manual review",
                        verbose_name="Pending Review Count",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="Started At"),
                ),
                (
                    "completed_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="Completed At"),
                ),
                (
                    "processing_parameters",
                    models.JSONField(
                        default=dict,
                        help_text="Batch configuration and parameters",
                        verbose_name="Processing Parameters",
                    ),
                ),
                (
                    "variance_summary",
                    models.JSONField(
                        default=dict,
                        help_text="Summary of variances found",
                        verbose_name="Variance Summary",
                    ),
                ),
                (
                    "processing_log",
                    models.TextField(
                        blank=True,
                        help_text="Detailed processing log",
                        verbose_name="Processing Log",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_created",
                        to="people.staffprofile",
                        verbose_name="Created By",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_updated",
                        to="people.staffprofile",
                        verbose_name="Updated By",
                    ),
                ),
            ],
            options={
                "verbose_name": "A/R Reconstruction Batch",
                "verbose_name_plural": "A/R Reconstruction Batches",
                "db_table": "finance_ar_reconstruction_batch",
                "ordering": ["-created_at"],
            },
        ),
        # Add reconstruction_batch foreign key to Invoice
        migrations.AddField(
            model_name="invoice",
            name="reconstruction_batch",
            field=models.ForeignKey(
                blank=True,
                help_text="Reconstruction batch that created this invoice",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="invoices_created",
                to="finance.arreconstructionbatch",
                verbose_name="Reconstruction Batch",
            ),
        ),
        # LegacyReceiptMapping model
        migrations.CreateModel(
            name="LegacyReceiptMapping",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "legacy_receipt_number",
                    models.CharField(
                        help_text="Original ReceiptNo from receipt_headers",
                        max_length=20,
                        verbose_name="Legacy Receipt Number",
                    ),
                ),
                (
                    "legacy_receipt_id",
                    models.CharField(
                        help_text="Full ReceiptID with clerk information",
                        max_length=200,
                        verbose_name="Legacy Receipt ID",
                    ),
                ),
                (
                    "legacy_student_id",
                    models.CharField(
                        help_text="ID field from receipt_headers (5-digit student number)",
                        max_length=10,
                        verbose_name="Legacy Student ID",
                    ),
                ),
                (
                    "legacy_term_id",
                    models.CharField(
                        help_text="TermID from receipt_headers",
                        max_length=50,
                        verbose_name="Legacy Term ID",
                    ),
                ),
                (
                    "legacy_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Original Amount from receipt_headers",
                        max_digits=10,
                        verbose_name="Legacy Amount",
                    ),
                ),
                (
                    "legacy_net_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="NetAmount from receipt_headers",
                        max_digits=10,
                        verbose_name="Legacy Net Amount",
                    ),
                ),
                (
                    "legacy_discount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="NetDiscount from receipt_headers",
                        max_digits=10,
                        verbose_name="Legacy Discount",
                    ),
                ),
                (
                    "reconstructed_total",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total amount in reconstructed invoice",
                        max_digits=10,
                        verbose_name="Reconstructed Total",
                    ),
                ),
                (
                    "variance_amount",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Difference between legacy and reconstructed amounts",
                        max_digits=10,
                        verbose_name="Variance Amount",
                    ),
                ),
                (
                    "processing_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="Processing Date"),
                ),
                (
                    "validation_status",
                    models.CharField(
                        choices=[
                            ("VALIDATED", "Validated"),
                            ("PENDING", "Pending Review"),
                            ("APPROVED", "Manually Approved"),
                            ("REJECTED", "Rejected - Needs Reprocessing"),
                        ],
                        default="PENDING",
                        max_length=20,
                        verbose_name="Validation Status",
                    ),
                ),
                (
                    "validation_notes",
                    models.TextField(
                        blank=True,
                        help_text="Manual validation notes",
                        verbose_name="Validation Notes",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_created",
                        to="people.staffprofile",
                        verbose_name="Created By",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_updated",
                        to="people.staffprofile",
                        verbose_name="Updated By",
                    ),
                ),
                (
                    "generated_invoice",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="legacy_mappings",
                        to="finance.invoice",
                    ),
                ),
                (
                    "generated_payment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="legacy_mappings",
                        to="finance.payment",
                    ),
                ),
                (
                    "reconstruction_batch",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mappings",
                        to="finance.arreconstructionbatch",
                    ),
                ),
            ],
            options={
                "verbose_name": "Legacy Receipt Mapping",
                "verbose_name_plural": "Legacy Receipt Mappings",
                "db_table": "finance_legacy_receipt_mapping",
            },
        ),
        # DiscountRule model
        migrations.CreateModel(
            name="DiscountRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "rule_name",
                    models.CharField(max_length=100, unique=True, verbose_name="Rule Name"),
                ),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("EARLY_BIRD", "Early Bird Discount"),
                            ("CASH_PLAN", "Cash Payment Plan"),
                            ("WEEKEND", "Weekend Class Discount"),
                            ("MONK", "Monk Special Pricing"),
                            ("ADMIN_FEE", "Administrative Fee"),
                            ("CUSTOM", "Custom Rule"),
                        ],
                        max_length=20,
                        verbose_name="Rule Type",
                    ),
                ),
                (
                    "pattern_text",
                    models.CharField(
                        help_text="Text pattern that triggers this rule (from Notes field)",
                        max_length=200,
                        verbose_name="Pattern Text",
                    ),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage discount (if applicable)",
                        max_digits=5,
                        null=True,
                        verbose_name="Discount Percentage",
                    ),
                ),
                (
                    "fixed_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Fixed fee/discount amount",
                        max_digits=10,
                        null=True,
                        verbose_name="Fixed Amount",
                    ),
                ),
                (
                    "applies_to_terms",
                    models.JSONField(
                        default=list,
                        help_text="List of terms this rule applies to (empty = all terms)",
                        verbose_name="Applies to Terms",
                    ),
                ),
                (
                    "applies_to_programs",
                    models.JSONField(
                        default=list,
                        help_text="List of program codes this rule applies to (empty = all programs)",
                        verbose_name="Applies to Programs",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "effective_date",
                    models.DateField(default=date.today, verbose_name="Effective Date"),
                ),
                (
                    "times_applied",
                    models.PositiveIntegerField(default=0, verbose_name="Times Applied"),
                ),
                (
                    "last_applied_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Last Applied Date"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_created",
                        to="people.staffprofile",
                        verbose_name="Created By",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_updated",
                        to="people.staffprofile",
                        verbose_name="Updated By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Discount Rule",
                "verbose_name_plural": "Discount Rules",
                "db_table": "finance_discount_rule",
            },
        ),
        # ReconstructionScholarshipEntry model
        migrations.CreateModel(
            name="ReconstructionScholarshipEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "scholarship_type",
                    models.CharField(
                        choices=[
                            ("SCHOOL", "School-Granted Scholarship"),
                            ("STAFF", "Staff Scholarship"),
                            ("NGO", "NGO Scholarship"),
                            ("OTHER", "Other Scholarship"),
                        ],
                        max_length=20,
                        verbose_name="Scholarship Type",
                    ),
                ),
                (
                    "scholarship_amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        verbose_name="Scholarship Amount",
                    ),
                ),
                (
                    "scholarship_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Scholarship Percentage",
                    ),
                ),
                (
                    "discovered_from_receipt",
                    models.CharField(
                        help_text="Receipt number where scholarship was discovered",
                        max_length=20,
                        verbose_name="Discovered from Receipt",
                    ),
                ),
                (
                    "discovery_notes",
                    models.TextField(
                        help_text="How/why this scholarship was identified",
                        verbose_name="Discovery Notes",
                    ),
                ),
                (
                    "requires_reprocessing",
                    models.BooleanField(
                        default=True,
                        help_text="True if student needs reprocessing with this scholarship",
                        verbose_name="Requires Reprocessing",
                    ),
                ),
                (
                    "applied_to_reconstruction",
                    models.BooleanField(
                        default=False,
                        help_text="True if already applied in reconstruction",
                        verbose_name="Applied to Reconstruction",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_created",
                        to="people.staffprofile",
                        verbose_name="Created By",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_updated",
                        to="people.staffprofile",
                        verbose_name="Updated By",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reconstruction_scholarship_entries",
                        to="people.studentprofile",
                    ),
                ),
                (
                    "term",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reconstruction_scholarship_entries",
                        to="curriculum.term",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reconstruction Scholarship Entry",
                "verbose_name_plural": "Reconstruction Scholarship Entries",
                "db_table": "finance_reconstruction_scholarship_entry",
            },
        ),
        # ClerkIdentification model
        migrations.CreateModel(
            name="ClerkIdentification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created At"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated At"),
                ),
                (
                    "clerk_name",
                    models.CharField(
                        help_text="Extracted clerk name/identifier",
                        max_length=100,
                        verbose_name="Clerk Name",
                    ),
                ),
                (
                    "computer_identifier",
                    models.CharField(
                        blank=True,
                        help_text="Computer/terminal identifier from ReceiptID",
                        max_length=100,
                        verbose_name="Computer Identifier",
                    ),
                ),
                (
                    "receipt_id_pattern",
                    models.CharField(
                        help_text="Example ReceiptID pattern for this clerk",
                        max_length=200,
                        verbose_name="Receipt ID Pattern",
                    ),
                ),
                (
                    "extraction_confidence",
                    models.CharField(
                        choices=[
                            ("HIGH", "High Confidence"),
                            ("MEDIUM", "Medium Confidence"),
                            ("LOW", "Low Confidence"),
                            ("MANUAL", "Manual Entry"),
                        ],
                        default="MEDIUM",
                        max_length=10,
                        verbose_name="Extraction Confidence",
                    ),
                ),
                (
                    "first_seen_date",
                    models.DateTimeField(
                        help_text="First receipt date for this clerk",
                        verbose_name="First Seen Date",
                    ),
                ),
                (
                    "last_seen_date",
                    models.DateTimeField(
                        help_text="Most recent receipt date for this clerk",
                        verbose_name="Last Seen Date",
                    ),
                ),
                (
                    "receipt_count",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of receipts processed by this clerk",
                        verbose_name="Receipt Count",
                    ),
                ),
                (
                    "verified_by_user",
                    models.BooleanField(
                        default=False,
                        help_text="True if clerk identification verified manually",
                        verbose_name="Verified by User",
                    ),
                ),
                (
                    "verification_notes",
                    models.TextField(
                        blank=True,
                        help_text="Manual verification notes",
                        verbose_name="Verification Notes",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_created",
                        to="people.staffprofile",
                        verbose_name="Created By",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_updated",
                        to="people.staffprofile",
                        verbose_name="Updated By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Clerk Identification",
                "verbose_name_plural": "Clerk Identifications",
                "db_table": "finance_clerk_identification",
            },
        ),
        # === ADD INDEXES ===
        # Invoice indexes
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(
                fields=["legacy_receipt_number"],
                name="finance_invoice_legacy_receipt_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(
                fields=["is_historical", "reconstruction_status"],
                name="finance_invoice_historical_status_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(fields=["needs_reprocessing"], name="finance_invoice_reprocessing_idx"),
        ),
        migrations.AddIndex(
            model_name="invoice",
            index=models.Index(fields=["reconstruction_batch"], name="finance_invoice_batch_idx"),
        ),
        # Payment indexes
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["legacy_receipt_reference"],
                name="finance_payment_legacy_receipt_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(fields=["legacy_processing_clerk"], name="finance_payment_clerk_idx"),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(fields=["is_historical_payment"], name="finance_payment_historical_idx"),
        ),
        # ARReconstructionBatch indexes
        migrations.AddIndex(
            model_name="arreconstructionbatch",
            index=models.Index(fields=["status", "created_at"], name="finance_ar_batch_status_idx"),
        ),
        migrations.AddIndex(
            model_name="arreconstructionbatch",
            index=models.Index(
                fields=["term_id", "processing_mode"],
                name="finance_ar_batch_term_mode_idx",
            ),
        ),
        # LegacyReceiptMapping indexes
        migrations.AddIndex(
            model_name="legacyreceiptmapping",
            index=models.Index(
                fields=["legacy_receipt_number"],
                name="finance_legacy_mapping_receipt_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="legacyreceiptmapping",
            index=models.Index(
                fields=["legacy_student_id", "legacy_term_id"],
                name="finance_legacy_mapping_student_term_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="legacyreceiptmapping",
            index=models.Index(fields=["validation_status"], name="finance_legacy_mapping_status_idx"),
        ),
        migrations.AddIndex(
            model_name="legacyreceiptmapping",
            index=models.Index(fields=["reconstruction_batch"], name="finance_legacy_mapping_batch_idx"),
        ),
        # DiscountRule indexes
        migrations.AddIndex(
            model_name="discountrule",
            index=models.Index(
                fields=["rule_type", "is_active"],
                name="finance_discount_rule_type_active_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="discountrule",
            index=models.Index(fields=["pattern_text"], name="finance_discount_rule_pattern_idx"),
        ),
        # ReconstructionScholarshipEntry indexes
        migrations.AddIndex(
            model_name="reconstructionscholarshipentry",
            index=models.Index(
                fields=["requires_reprocessing"],
                name="finance_scholarship_reprocessing_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="reconstructionscholarshipentry",
            index=models.Index(
                fields=["discovered_from_receipt"],
                name="finance_scholarship_receipt_idx",
            ),
        ),
        # ClerkIdentification indexes
        migrations.AddIndex(
            model_name="clerkidentification",
            index=models.Index(fields=["clerk_name"], name="finance_clerk_name_idx"),
        ),
        migrations.AddIndex(
            model_name="clerkidentification",
            index=models.Index(fields=["verified_by_user"], name="finance_clerk_verified_idx"),
        ),
        # === ADD UNIQUE CONSTRAINTS ===
        # LegacyReceiptMapping unique constraint
        migrations.AddConstraint(
            model_name="legacyreceiptmapping",
            constraint=models.UniqueConstraint(
                fields=["legacy_receipt_number", "reconstruction_batch"],
                name="unique_receipt_per_batch",
            ),
        ),
        # ReconstructionScholarshipEntry unique constraint
        migrations.AddConstraint(
            model_name="reconstructionscholarshipentry",
            constraint=models.UniqueConstraint(
                fields=["student", "term", "scholarship_type"],
                name="unique_scholarship_per_student_term",
            ),
        ),
        # ClerkIdentification unique constraint
        migrations.AddConstraint(
            model_name="clerkidentification",
            constraint=models.UniqueConstraint(
                fields=["clerk_name", "computer_identifier"],
                name="unique_clerk_computer",
            ),
        ),
    ]
