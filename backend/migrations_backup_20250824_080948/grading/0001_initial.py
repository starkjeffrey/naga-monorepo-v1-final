# Generated by Django 5.2.4 on 2025-07-15 01:23

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ClassSessionGrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "calculated_score",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Weighted average of class part grades",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Calculated Score",
                    ),
                ),
                (
                    "letter_grade",
                    models.CharField(
                        help_text="Converted letter grade",
                        max_length=5,
                        verbose_name="Letter Grade",
                    ),
                ),
                (
                    "gpa_points",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="GPA points for this session grade",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4),
                        ],
                        verbose_name="GPA Points",
                    ),
                ),
                (
                    "calculated_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this grade was calculated",
                        verbose_name="Calculated At",
                    ),
                ),
                (
                    "calculation_details",
                    models.JSONField(
                        default=dict,
                        help_text="Details of how this grade was calculated",
                        verbose_name="Calculation Details",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Session Grade",
                "verbose_name_plural": "Class Session Grades",
                "ordering": ["enrollment", "class_session"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="GPARecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "gpa_type",
                    models.CharField(
                        choices=[
                            ("TERM", "Term GPA"),
                            ("CUMULATIVE", "Cumulative GPA"),
                        ],
                        help_text="Type of GPA calculation",
                        max_length=15,
                        verbose_name="GPA Type",
                    ),
                ),
                (
                    "gpa_value",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Calculated GPA value",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4),
                        ],
                        verbose_name="GPA Value",
                    ),
                ),
                (
                    "quality_points",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total quality points earned",
                        max_digits=8,
                        verbose_name="Quality Points",
                    ),
                ),
                (
                    "credit_hours_attempted",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total credit hours attempted",
                        max_digits=6,
                        verbose_name="Credit Hours Attempted",
                    ),
                ),
                (
                    "credit_hours_earned",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Total credit hours earned (passing grades)",
                        max_digits=6,
                        verbose_name="Credit Hours Earned",
                    ),
                ),
                (
                    "calculated_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Calculated At"),
                ),
                (
                    "calculation_details",
                    models.JSONField(
                        default=dict,
                        help_text="Details of courses included in calculation",
                        verbose_name="Calculation Details",
                    ),
                ),
            ],
            options={
                "verbose_name": "GPA Record",
                "verbose_name_plural": "GPA Records",
                "ordering": ["student", "-term", "gpa_type"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="GradeChangeHistory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "change_type",
                    models.CharField(
                        choices=[
                            ("INITIAL_ENTRY", "Initial Entry"),
                            ("CORRECTION", "Correction"),
                            ("RECALCULATION", "Recalculation"),
                            ("STATUS_CHANGE", "Status Change"),
                            ("BULK_UPDATE", "Bulk Update"),
                            ("MIGRATION", "Migration"),
                        ],
                        help_text="Type of change made",
                        max_length=20,
                        verbose_name="Change Type",
                    ),
                ),
                (
                    "changed_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Changed At"),
                ),
                (
                    "previous_numeric_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Previous Numeric Score",
                    ),
                ),
                (
                    "previous_letter_grade",
                    models.CharField(blank=True, max_length=5, verbose_name="Previous Letter Grade"),
                ),
                (
                    "previous_status",
                    models.CharField(blank=True, max_length=15, verbose_name="Previous Status"),
                ),
                (
                    "new_numeric_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="New Numeric Score",
                    ),
                ),
                (
                    "new_letter_grade",
                    models.CharField(blank=True, max_length=5, verbose_name="New Letter Grade"),
                ),
                (
                    "new_status",
                    models.CharField(blank=True, max_length=15, verbose_name="New Status"),
                ),
                (
                    "reason",
                    models.TextField(help_text="Reason for this grade change", verbose_name="Reason"),
                ),
                (
                    "additional_details",
                    models.JSONField(
                        default=dict,
                        help_text="Additional details about the change",
                        verbose_name="Additional Details",
                    ),
                ),
            ],
            options={
                "verbose_name": "Grade Change History",
                "verbose_name_plural": "Grade Change History",
                "ordering": ["-changed_at"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="GradeConversion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "letter_grade",
                    models.CharField(
                        help_text="Letter grade (A+, A, A-, B+, etc.)",
                        max_length=5,
                        verbose_name="Letter Grade",
                    ),
                ),
                (
                    "min_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Minimum percentage for this grade",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Minimum Percentage",
                    ),
                ),
                (
                    "max_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Maximum percentage for this grade",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Maximum Percentage",
                    ),
                ),
                (
                    "gpa_points",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="GPA points for this grade",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4),
                        ],
                        verbose_name="GPA Points",
                    ),
                ),
                (
                    "display_order",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Order for displaying grades (0 = highest)",
                        verbose_name="Display Order",
                    ),
                ),
            ],
            options={
                "verbose_name": "Grade Conversion",
                "verbose_name_plural": "Grade Conversions",
                "ordering": ["grading_scale", "display_order"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="GradingScale",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this grading scale",
                        max_length=100,
                        verbose_name="Scale Name",
                    ),
                ),
                (
                    "scale_type",
                    models.CharField(
                        choices=[
                            ("LANGUAGE_STANDARD", "Language Standard (A-F, F<50%)"),
                            ("LANGUAGE_IEAP", "Language IEAP (A-F, F<60%)"),
                            ("ACADEMIC", "Academic (A+ to F, F<60%)"),
                        ],
                        help_text="Type of grading scale",
                        max_length=20,
                        unique=True,
                        verbose_name="Scale Type",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of this grading scale",
                        verbose_name="Description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this grading scale is currently in use",
                        verbose_name="Is Active",
                    ),
                ),
            ],
            options={
                "verbose_name": "Grading Scale",
                "verbose_name_plural": "Grading Scales",
                "ordering": ["scale_type"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ClassPartGrade",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "numeric_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Numeric score (0-100)",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Numeric Score",
                    ),
                ),
                (
                    "letter_grade",
                    models.CharField(
                        blank=True,
                        help_text="Letter grade (A+, A, A-, etc.)",
                        max_length=5,
                        verbose_name="Letter Grade",
                    ),
                ),
                (
                    "gpa_points",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="GPA points for this grade",
                        max_digits=4,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(4),
                        ],
                        verbose_name="GPA Points",
                    ),
                ),
                (
                    "grade_source",
                    models.CharField(
                        choices=[
                            ("MANUAL_TEACHER", "Manual Entry (Teacher)"),
                            ("MANUAL_CLERK", "Manual Entry (Clerk)"),
                            ("MOODLE_IMPORT", "Moodle Import"),
                            ("CALCULATED", "Calculated"),
                            ("MIGRATED", "Migrated from Legacy System"),
                        ],
                        default="MANUAL_TEACHER",
                        help_text="How this grade was entered",
                        max_length=20,
                        verbose_name="Grade Source",
                    ),
                ),
                (
                    "grade_status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("SUBMITTED", "Submitted"),
                            ("APPROVED", "Approved"),
                            ("FINALIZED", "Finalized"),
                        ],
                        default="DRAFT",
                        help_text="Current status of this grade",
                        max_length=15,
                        verbose_name="Grade Status",
                    ),
                ),
                (
                    "entered_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="When this grade was entered",
                        verbose_name="Entered At",
                    ),
                ),
                (
                    "approved_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this grade was approved",
                        null=True,
                        verbose_name="Approved At",
                    ),
                ),
                (
                    "student_notified",
                    models.BooleanField(
                        default=False,
                        help_text="Whether student has been notified of this grade",
                        verbose_name="Student Notified",
                    ),
                ),
                (
                    "notification_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="When student was notified",
                        null=True,
                        verbose_name="Notification Date",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this grade",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who approved this grade",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="approved_class_part_grades",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Approved By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Part Grade",
                "verbose_name_plural": "Class Part Grades",
                "ordering": ["enrollment", "class_part"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
    ]
