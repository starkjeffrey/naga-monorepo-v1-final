# Generated by Django 5.2.5 on 2025-08-19 00:00

import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("level_testing", "0007_add_emergency_contact_fields"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name="potentialstudent",
            name="current_high_school",
            field=models.CharField(
                blank=True,
                choices=[
                    ("AHS", "Angkor High School"),
                    ("JAN10", "10 January High School"),
                    ("SAMPOVEUHS", "Sampov Eu High School"),
                    ("NORTHBRIDGE", "Northbridge International School"),
                    ("ISPP", "International School of Phnom Penh"),
                    ("WESTLINE", "Westline School"),
                    ("ICAN", "iCAN British International School"),
                    ("LOGOS", "Logos International School"),
                    ("PUBLIC_HS", "Public High School"),
                    ("PRIVATE_HS", "Private High School"),
                    ("OTHER_HS", "Other High School"),
                ],
                help_text="High school you are currently attending",
                max_length=20,
                verbose_name="Current High School",
            ),
        ),
        migrations.CreateModel(
            name="TestAccessToken",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "access_code",
                    models.CharField(
                        db_index=True,
                        help_text="7-digit unique access code with Luhn check digit",
                        max_length=7,
                        unique=True,
                        verbose_name="Access Code",
                    ),
                ),
                (
                    "payment_amount",
                    models.DecimalField(
                        decimal_places=2, help_text="Amount paid in USD", max_digits=8, verbose_name="Payment Amount"
                    ),
                ),
                (
                    "payment_method",
                    models.CharField(
                        choices=[
                            ("CASH", "Cash"),
                            ("CREDIT_CARD", "Credit Card"),
                            ("BANK_TRANSFER", "Bank Transfer"),
                            ("MOBILE_PAYMENT", "Mobile Payment (Wing/ABA)"),
                            ("WAIVED", "Fee Waived"),
                        ],
                        default="CASH",
                        max_length=20,
                        verbose_name="Payment Method",
                    ),
                ),
                (
                    "payment_received_at",
                    models.DateTimeField(help_text="When payment was received", verbose_name="Payment Received At"),
                ),
                (
                    "qr_code_url",
                    models.URLField(blank=True, help_text="Full URL encoded in QR code", verbose_name="QR Code URL"),
                ),
                (
                    "qr_code_data",
                    models.JSONField(
                        blank=True, default=dict, help_text="Additional QR code metadata", verbose_name="QR Code Data"
                    ),
                ),
                (
                    "student_name",
                    models.CharField(
                        help_text="Student's full name for receipt", max_length=100, verbose_name="Student Name"
                    ),
                ),
                (
                    "student_phone",
                    models.CharField(
                        help_text="Student's phone number for contact", max_length=20, verbose_name="Student Phone"
                    ),
                ),
                (
                    "is_used",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this token has been used to start an application",
                        verbose_name="Is Used",
                    ),
                ),
                (
                    "used_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When the token was used to start application",
                        null=True,
                        verbose_name="Used At",
                    ),
                ),
                (
                    "telegram_id",
                    models.CharField(
                        blank=True,
                        help_text="Telegram user ID after verification",
                        max_length=50,
                        verbose_name="Telegram ID",
                    ),
                ),
                (
                    "telegram_username",
                    models.CharField(
                        blank=True, help_text="Telegram username", max_length=50, verbose_name="Telegram Username"
                    ),
                ),
                (
                    "telegram_verified",
                    models.BooleanField(
                        default=False, help_text="Whether Telegram has been verified", verbose_name="Telegram Verified"
                    ),
                ),
                (
                    "telegram_verification_code",
                    models.CharField(
                        blank=True,
                        help_text="6-digit verification code sent via Telegram",
                        max_length=6,
                        verbose_name="Telegram Verification Code",
                    ),
                ),
                (
                    "telegram_verified_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When Telegram was verified",
                        null=True,
                        verbose_name="Telegram Verified At",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="When this token expires (24 hours from creation)", verbose_name="Expires At"
                    ),
                ),
                (
                    "application",
                    models.OneToOneField(
                        blank=True,
                        help_text="The application created with this token",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="access_token",
                        to="level_testing.potentialstudent",
                        verbose_name="Application",
                    ),
                ),
                (
                    "cashier",
                    models.ForeignKey(
                        help_text="Staff member who collected payment",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="issued_access_tokens",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Cashier",
                    ),
                ),
            ],
            options={
                "verbose_name": "Test Access Token",
                "verbose_name_plural": "Test Access Tokens",
                "ordering": ["-created_at"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="potentialstudent",
            name="access_token_link",
            field=models.OneToOneField(
                blank=True,
                help_text="Access token used to create this application",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="potential_student_link",
                to="level_testing.testaccesstoken",
                verbose_name="Access Token Link",
            ),
        ),
        migrations.AddIndex(
            model_name="testaccesstoken",
            index=models.Index(fields=["access_code"], name="level_testi_access__5e9075_idx"),
        ),
        migrations.AddIndex(
            model_name="testaccesstoken",
            index=models.Index(fields=["student_phone"], name="level_testi_student_f0f1b7_idx"),
        ),
        migrations.AddIndex(
            model_name="testaccesstoken",
            index=models.Index(fields=["is_used"], name="level_testi_is_used_56ff17_idx"),
        ),
        migrations.AddIndex(
            model_name="testaccesstoken",
            index=models.Index(fields=["telegram_id"], name="level_testi_telegra_b9ff8c_idx"),
        ),
    ]
