# Generated by Django 5.2.4 on 2025-07-15 01:23

import uuid
from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("common", "0001_initial"),
        ("curriculum", "0001_initial"),
        ("people", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ClassHeader",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "section_id",
                    models.CharField(
                        help_text="Section identifier (A, B, C, etc.)",
                        max_length=5,
                        validators=[
                            django.core.validators.RegexValidator("^[A-Z]$", "Section ID must be a single letter A-Z")
                        ],
                        verbose_name="Section ID",
                    ),
                ),
                (
                    "time_of_day",
                    models.CharField(
                        choices=[
                            ("MORN", "Morning"),
                            ("AFT", "Afternoon"),
                            ("EVE", "Evening"),
                            ("NIGHT", "Night"),
                            ("ALL", "All Day"),
                        ],
                        default="MORN",
                        help_text="General time period for this class",
                        max_length=10,
                        verbose_name="Time of Day",
                    ),
                ),
                (
                    "class_type",
                    models.CharField(
                        choices=[
                            ("STANDARD", "Standard Class"),
                            ("COMBINED", "Combined Class"),
                            ("READING", "Reading Class"),
                            ("INTENSIVE", "Intensive Class"),
                            ("WORKSHOP", "Workshop"),
                        ],
                        db_index=True,
                        default="STANDARD",
                        help_text="Type of class offering",
                        max_length=15,
                        verbose_name="Class Type",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("SCHEDULED", "Scheduled"),
                            ("ACTIVE", "Active"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                            ("SUSPENDED", "Suspended"),
                        ],
                        db_index=True,
                        default="DRAFT",
                        help_text="Current scheduling status",
                        max_length=15,
                        verbose_name="Status",
                    ),
                ),
                (
                    "is_paired",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this class is paired with another",
                        verbose_name="Is Paired",
                    ),
                ),
                (
                    "max_enrollment",
                    models.PositiveSmallIntegerField(
                        default=30,
                        help_text="Maximum number of students allowed",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="Maximum Enrollment",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this class offering",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "legacy_class_id",
                    models.CharField(
                        blank=True,
                        help_text="Legacy system identifier for migration tracking",
                        max_length=50,
                        verbose_name="Legacy Class ID",
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        help_text="Course being offered",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="class_headers",
                        to="curriculum.course",
                        verbose_name="Course",
                    ),
                ),
                (
                    "paired_with",
                    models.ForeignKey(
                        blank=True,
                        help_text="Class this is paired with (for language programs)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="paired_classes",
                        to="scheduling.classheader",
                        verbose_name="Paired With",
                    ),
                ),
                (
                    "term",
                    models.ForeignKey(
                        help_text="Academic term when class is offered",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="class_headers",
                        to="curriculum.term",
                        verbose_name="Term",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Header",
                "verbose_name_plural": "Class Headers",
                "ordering": ["term", "course", "section_id"],
                "permissions": [
                    (
                        "can_manage_class_scheduling",
                        "Can manage bulk class scheduling operations",
                    )
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ClassSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "internal_session_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Immutable internal identifier for this session",
                        unique=True,
                    ),
                ),
                (
                    "session_number",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="Session number within the class (1 for regular, 1&2 for IEAP)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="Session Number",
                    ),
                ),
                (
                    "session_name",
                    models.CharField(
                        blank=True,
                        help_text="Optional name for this session (e.g., 'Session 1', 'Morning Session')",
                        max_length=50,
                        verbose_name="Session Name",
                    ),
                ),
                (
                    "grade_weight",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("1.000"),
                        help_text="Weight of this session in final grade (1.0 for regular, 0.5 for IEAP)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000")),
                            django.core.validators.MaxValueValidator(Decimal("1.000")),
                        ],
                        verbose_name="Grade Weight",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this session",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "class_header",
                    models.ForeignKey(
                        help_text="Class this session belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_sessions",
                        to="scheduling.classheader",
                        verbose_name="Class Header",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Session",
                "verbose_name_plural": "Class Sessions",
                "ordering": ["class_header", "session_number"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ClassPart",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "internal_part_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Immutable internal identifier for this part",
                        unique=True,
                    ),
                ),
                (
                    "class_part_type",
                    models.CharField(
                        choices=[
                            ("MAIN", "Main Class"),
                            ("LECTURE", "Lecture"),
                            ("DISCUSSION", "Discussion"),
                            ("LAB", "Laboratory"),
                            ("COMPUTER", "Computer Lab"),
                            ("GRAMMAR", "Grammar"),
                            ("CONVERSATION", "Conversation"),
                            ("WRITING", "Writing"),
                            ("READING", "Reading"),
                            ("LISTENING", "Listening"),
                            ("SPEAKING", "Speaking"),
                            ("VENTURES", "Ventures"),
                            ("PROJECT", "Project"),
                        ],
                        db_index=True,
                        default="MAIN",
                        help_text="Type of class component",
                        max_length=15,
                        verbose_name="Class Part Type",
                    ),
                ),
                (
                    "class_part_code",
                    models.CharField(
                        default="A",
                        help_text="Code for this part (A, B, C, etc.)",
                        max_length=10,
                        verbose_name="Class Part Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Optional specific name for this part",
                        max_length=100,
                        verbose_name="Part Name",
                    ),
                ),
                (
                    "meeting_days",
                    models.CharField(
                        help_text="Days of week this part meets (comma-separated: MON,WED,FRI)",
                        max_length=20,
                        verbose_name="Meeting Days",
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        blank=True,
                        help_text="When this part starts (filled by scheduler)",
                        null=True,
                        verbose_name="Start Time",
                    ),
                ),
                (
                    "end_time",
                    models.TimeField(
                        blank=True,
                        help_text="When this part ends (filled by scheduler)",
                        null=True,
                        verbose_name="End Time",
                    ),
                ),
                (
                    "grade_weight",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("1.000"),
                        help_text="Weight of this part in final grade (0.000-1.000)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000")),
                            django.core.validators.MaxValueValidator(Decimal("1.000")),
                        ],
                        verbose_name="Grade Weight",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this class part",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "legacy_class_id",
                    models.CharField(
                        blank=True,
                        help_text="Legacy system identifier for migration tracking",
                        max_length=50,
                        verbose_name="Legacy Class ID",
                    ),
                ),
                (
                    "room",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned room for this part",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="class_parts",
                        to="common.room",
                        verbose_name="Room",
                    ),
                ),
                (
                    "teacher",
                    models.ForeignKey(
                        blank=True,
                        help_text="Assigned teacher for this part",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="class_parts",
                        to="people.teacherprofile",
                        verbose_name="Teacher",
                    ),
                ),
                (
                    "textbooks",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Textbooks used in this part",
                        related_name="class_parts",
                        to="curriculum.textbook",
                        verbose_name="Textbooks",
                    ),
                ),
                (
                    "class_session",
                    models.ForeignKey(
                        help_text="Session this part belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_parts",
                        to="scheduling.classsession",
                        verbose_name="Class Session",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Part",
                "verbose_name_plural": "Class Parts",
                "ordering": ["class_session", "class_part_code"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="CombinedClassGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this class group",
                        max_length=100,
                        verbose_name="Group Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Additional details about this group",
                        verbose_name="Description",
                    ),
                ),
                (
                    "term",
                    models.ForeignKey(
                        help_text="Academic term for this group",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="combined_class_groups",
                        to="curriculum.term",
                        verbose_name="Term",
                    ),
                ),
            ],
            options={
                "verbose_name": "Combined Class Group",
                "verbose_name_plural": "Combined Class Groups",
                "ordering": ["term", "name"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="classheader",
            name="combined_class_group",
            field=models.ForeignKey(
                blank=True,
                help_text="Group this class belongs to (if any)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="member_class_headers",
                to="scheduling.combinedclassgroup",
                verbose_name="Combined Class Group",
            ),
        ),
        migrations.CreateModel(
            name="ReadingClass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "tier",
                    models.CharField(
                        choices=[
                            ("TIER_1", "Tier 1 (1-2 students)"),
                            ("TIER_2", "Tier 2 (3-5 students)"),
                            ("TIER_3", "Tier 3 (6-15 students)"),
                        ],
                        db_index=True,
                        default="TIER_1",
                        help_text="Current enrollment tier",
                        max_length=10,
                        verbose_name="Tier",
                    ),
                ),
                (
                    "target_enrollment",
                    models.PositiveSmallIntegerField(
                        default=3,
                        help_text="Target number of students for this reading class",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(15),
                        ],
                        verbose_name="Target Enrollment",
                    ),
                ),
                (
                    "enrollment_status",
                    models.CharField(
                        choices=[
                            ("PLANNING", "Planning"),
                            ("OPEN", "Open for Enrollment"),
                            ("CLOSED", "Closed"),
                            ("CONVERTED", "Converted to Standard"),
                        ],
                        db_index=True,
                        default="PLANNING",
                        help_text="Current enrollment status",
                        max_length=15,
                        verbose_name="Enrollment Status",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Additional description or notes about this reading class",
                        verbose_name="Description",
                    ),
                ),
                (
                    "class_header",
                    models.OneToOneField(
                        help_text="Class header this reading class is associated with",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reading_class",
                        to="scheduling.classheader",
                        verbose_name="Class Header",
                    ),
                ),
            ],
            options={
                "verbose_name": "Reading Class",
                "verbose_name_plural": "Reading Classes",
                "ordering": ["class_header"],
                "permissions": [
                    (
                        "can_manage_reading_classes",
                        "Can manage reading class operations",
                    )
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="TestPeriodReset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "test_type",
                    models.CharField(
                        choices=[
                            ("IEAP_T1", "IEAP Test 1"),
                            ("IEAP_T2", "IEAP Test 2"),
                            ("IEAP_T3", "IEAP Test 3"),
                            ("MIDTERM", "Midterm"),
                            ("FINAL", "Final"),
                        ],
                        db_index=True,
                        help_text="Type of test period for absence reset",
                        max_length=10,
                        verbose_name="Test Type",
                    ),
                ),
                (
                    "reset_date",
                    models.DateField(
                        db_index=True,
                        help_text="Date when absence counters reset for this test period",
                        verbose_name="Reset Date",
                    ),
                ),
                (
                    "applies_to_all_language_classes",
                    models.BooleanField(
                        default=True,
                        help_text="Apply this reset date to all language classes in the term",
                        verbose_name="Applies to All Language Classes",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this reset period",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "specific_classes",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific classes if not applying to all (language division only)",
                        related_name="test_period_resets",
                        to="scheduling.classheader",
                        verbose_name="Specific Classes",
                    ),
                ),
                (
                    "term",
                    models.ForeignKey(
                        help_text="Academic term for this reset period",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="test_period_resets",
                        to="curriculum.term",
                        verbose_name="Term",
                    ),
                ),
            ],
            options={
                "verbose_name": "Test Period Reset",
                "verbose_name_plural": "Test Period Resets",
                "ordering": ["term", "test_type", "reset_date"],
                "permissions": [
                    (
                        "can_manage_test_resets",
                        "Can manage test period reset operations",
                    )
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddIndex(
            model_name="classsession",
            index=models.Index(
                fields=["class_header", "session_number"],
                name="scheduling__class_h_696980_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="classsession",
            unique_together={("class_header", "session_number")},
        ),
        migrations.AddIndex(
            model_name="classpart",
            index=models.Index(
                fields=["class_session", "class_part_type"],
                name="scheduling__class_s_123493_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="classpart",
            index=models.Index(fields=["teacher"], name="scheduling__teacher_997438_idx"),
        ),
        migrations.AddIndex(
            model_name="classpart",
            index=models.Index(fields=["room"], name="scheduling__room_id_b3e585_idx"),
        ),
        migrations.AddIndex(
            model_name="classpart",
            index=models.Index(fields=["start_time", "end_time"], name="scheduling__start_t_f57c1f_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="classpart",
            unique_together={("class_session", "class_part_code")},
        ),
        migrations.AddIndex(
            model_name="combinedclassgroup",
            index=models.Index(fields=["term", "is_deleted"], name="scheduling__term_id_c8fcbb_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="combinedclassgroup",
            unique_together={("term", "name")},
        ),
        migrations.AddIndex(
            model_name="classheader",
            index=models.Index(fields=["course", "term"], name="scheduling__course__a43b63_idx"),
        ),
        migrations.AddIndex(
            model_name="classheader",
            index=models.Index(fields=["term", "status"], name="scheduling__term_id_9da4e0_idx"),
        ),
        migrations.AddIndex(
            model_name="classheader",
            index=models.Index(fields=["class_type", "status"], name="scheduling__class_t_cedfe9_idx"),
        ),
        migrations.AddIndex(
            model_name="classheader",
            index=models.Index(fields=["is_paired"], name="scheduling__is_pair_e35417_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="classheader",
            unique_together={("course", "term", "section_id")},
        ),
        migrations.AddIndex(
            model_name="testperiodreset",
            index=models.Index(fields=["term", "test_type"], name="scheduling__term_id_1a9e64_idx"),
        ),
        migrations.AddIndex(
            model_name="testperiodreset",
            index=models.Index(
                fields=["reset_date", "applies_to_all_language_classes"],
                name="scheduling__reset_d_f568b8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="testperiodreset",
            index=models.Index(fields=["term", "reset_date"], name="scheduling__term_id_9a6620_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="testperiodreset",
            unique_together={("term", "test_type", "applies_to_all_language_classes")},
        ),
    ]
