# Generated by Django 5.2.4 on 2025-07-19 23:48

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("common", "0005_alter_room_managers_and_more"),
        ("curriculum", "0004_alter_course_code"),
        ("people", "0005_add_combined_course_system"),
        ("scheduling", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name="classheader",
            name="combined_class_group",
        ),
        migrations.CreateModel(
            name="CombinedClassInstance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Draft"),
                            ("ACTIVE", "Active"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        db_index=True,
                        default="DRAFT",
                        help_text="Current status of this combination instance",
                        max_length=15,
                        verbose_name="Status",
                    ),
                ),
                (
                    "section_id",
                    models.CharField(
                        help_text="Section identifier for the combined class (A, B, C, etc.)",
                        max_length=5,
                        validators=[
                            django.core.validators.RegexValidator("^[A-Z]$", "Section ID must be a single letter A-Z")
                        ],
                        verbose_name="Combined Section ID",
                    ),
                ),
                (
                    "max_enrollment",
                    models.PositiveSmallIntegerField(
                        default=30,
                        help_text="Maximum total students across all member courses",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(200),
                        ],
                        verbose_name="Maximum Combined Enrollment",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this combination instance",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "auto_created",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this instance was automatically created",
                        verbose_name="Auto Created",
                    ),
                ),
                (
                    "primary_room",
                    models.ForeignKey(
                        blank=True,
                        help_text="Room where this combined class meets",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="combined_class_instances",
                        to="common.room",
                        verbose_name="Primary Room",
                    ),
                ),
                (
                    "primary_teacher",
                    models.ForeignKey(
                        blank=True,
                        help_text="Teacher assigned to teach this combined class",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="combined_class_instances",
                        to="people.teacherprofile",
                        verbose_name="Primary Teacher",
                    ),
                ),
                (
                    "term",
                    models.ForeignKey(
                        help_text="Academic term for this combination instance",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="combined_class_instances",
                        to="curriculum.term",
                        verbose_name="Term",
                    ),
                ),
            ],
            options={
                "verbose_name": "Combined Class Instance",
                "verbose_name_plural": "Combined Class Instances",
                "ordering": ["term", "template", "section_id"],
                "permissions": [
                    (
                        "can_manage_combined_instances",
                        "Can manage combined class instances",
                    )
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="classheader",
            name="combined_class_instance",
            field=models.ForeignKey(
                blank=True,
                help_text="Combined class instance this class belongs to (if any)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="class_headers",
                to="scheduling.combinedclassinstance",
                verbose_name="Combined Class Instance",
            ),
        ),
        migrations.CreateModel(
            name="CombinedCourseTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this course combination",
                        max_length=100,
                        verbose_name="Template Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Additional details about this combination and its purpose",
                        verbose_name="Description",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("INACTIVE", "Inactive"),
                            ("DEPRECATED", "Deprecated"),
                        ],
                        db_index=True,
                        default="ACTIVE",
                        help_text="Current status of this template",
                        max_length=15,
                        verbose_name="Status",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Internal notes for administrative purposes",
                        verbose_name="Administrative Notes",
                    ),
                ),
                (
                    "courses",
                    models.ManyToManyField(
                        help_text="Courses that should always be scheduled together",
                        related_name="combined_course_templates",
                        to="curriculum.course",
                        verbose_name="Courses",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="User who created this template",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_combined_course_templates",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
            ],
            options={
                "verbose_name": "Combined Course Template",
                "verbose_name_plural": "Combined Course Templates",
                "ordering": ["name"],
                "permissions": [
                    (
                        "can_manage_course_combinations",
                        "Can manage course combination templates",
                    )
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name="combinedclassinstance",
            name="template",
            field=models.ForeignKey(
                help_text="Course combination template this instance implements",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="combined_class_instances",
                to="scheduling.combinedcoursetemplate",
                verbose_name="Template",
            ),
        ),
        migrations.AddIndex(
            model_name="combinedcoursetemplate",
            index=models.Index(fields=["status", "is_deleted"], name="scheduling__status_e319de_idx"),
        ),
        migrations.AddIndex(
            model_name="combinedcoursetemplate",
            index=models.Index(fields=["created_by"], name="scheduling__created_7faaa4_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="combinedcoursetemplate",
            unique_together={("name",)},
        ),
        migrations.AddIndex(
            model_name="combinedclassinstance",
            index=models.Index(fields=["template", "term"], name="scheduling__templat_ae1e71_idx"),
        ),
        migrations.AddIndex(
            model_name="combinedclassinstance",
            index=models.Index(fields=["term", "status"], name="scheduling__term_id_df1611_idx"),
        ),
        migrations.AddIndex(
            model_name="combinedclassinstance",
            index=models.Index(fields=["primary_teacher"], name="scheduling__primary_3ea89c_idx"),
        ),
        migrations.AddIndex(
            model_name="combinedclassinstance",
            index=models.Index(fields=["primary_room"], name="scheduling__primary_6efbe7_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="combinedclassinstance",
            unique_together={("template", "term", "section_id")},
        ),
    ]
