# Generated by Django 5.2.5 on 2025-08-15 10:11

from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("curriculum", "0009_remove_seniorprojectgroup_graduation_date_and_more"),
        ("scheduling", "0005_classpart_template_derived"),
    ]

    operations = [
        migrations.AlterField(
            model_name="classpart",
            name="template_derived",
            field=models.BooleanField(
                default=False,
                help_text="Whether this class part was derived from a ClassPartTemplate",
                verbose_name="Template Derived",
            ),
        ),
        migrations.CreateModel(
            name="ClassPartTemplateSet",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "program_code",
                    models.CharField(
                        db_index=True,
                        help_text="Program code (EHSS, GESL, IEAP, EXPRESS)",
                        max_length=20,
                        verbose_name="Program Code",
                    ),
                ),
                (
                    "level_number",
                    models.IntegerField(
                        db_index=True, help_text="Level number within the program", verbose_name="Level Number"
                    ),
                ),
                (
                    "effective_date",
                    models.DateField(
                        db_index=True, help_text="Date this template set becomes active", verbose_name="Effective Date"
                    ),
                ),
                (
                    "expiry_date",
                    models.DateField(
                        blank=True,
                        help_text="Date this template set expires (null = no expiry)",
                        null=True,
                        verbose_name="Expiry Date",
                    ),
                ),
                (
                    "version",
                    models.IntegerField(
                        default=1, help_text="Version number for this template set", verbose_name="Version"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this template set",
                        max_length=200,
                        verbose_name="Template Set Name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this template structure", verbose_name="Description"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Whether this template set is currently active",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "auto_apply_on_promotion",
                    models.BooleanField(
                        default=True,
                        help_text="Automatically apply this template when students are promoted to this level",
                        verbose_name="Auto Apply on Promotion",
                    ),
                ),
                (
                    "preserve_section_cohort",
                    models.BooleanField(
                        default=True,
                        help_text="Keep students in same section when promoted",
                        verbose_name="Preserve Section Cohort",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Part Template Set",
                "verbose_name_plural": "Class Part Template Sets",
                "ordering": ["-effective_date", "program_code", "level_number"],
                "indexes": [
                    models.Index(
                        fields=["program_code", "level_number", "-effective_date"],
                        name="scheduling__program_0c5ef7_idx",
                    ),
                    models.Index(fields=["effective_date", "is_active"], name="scheduling__effecti_16ca1e_idx"),
                ],
                "unique_together": {("program_code", "level_number", "version")},
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ClassPromotionRule",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "source_program",
                    models.CharField(
                        help_text="Program code students are promoted from",
                        max_length=20,
                        verbose_name="Source Program",
                    ),
                ),
                (
                    "source_level",
                    models.IntegerField(
                        help_text="Level number students are promoted from", verbose_name="Source Level"
                    ),
                ),
                (
                    "destination_program",
                    models.CharField(
                        help_text="Program code students are promoted to",
                        max_length=20,
                        verbose_name="Destination Program",
                    ),
                ),
                (
                    "destination_level",
                    models.IntegerField(
                        help_text="Level number students are promoted to", verbose_name="Destination Level"
                    ),
                ),
                (
                    "preserve_cohort",
                    models.BooleanField(
                        default=True,
                        help_text="Keep students together in same section",
                        verbose_name="Preserve Cohort",
                    ),
                ),
                (
                    "auto_create_classes",
                    models.BooleanField(
                        default=True,
                        help_text="Automatically create new classes for promoted students",
                        verbose_name="Auto Create Classes",
                    ),
                ),
                (
                    "apply_template",
                    models.BooleanField(
                        default=True,
                        help_text="Apply class part templates to new classes",
                        verbose_name="Apply Template",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this rule is active", verbose_name="Is Active"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this promotion rule", verbose_name="Notes"
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Promotion Rule",
                "verbose_name_plural": "Class Promotion Rules",
                "ordering": ["source_program", "source_level"],
                "unique_together": {("source_program", "source_level", "destination_program", "destination_level")},
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ClassPartTemplate",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "class_part_type",
                    models.CharField(
                        choices=[
                            ("MAIN", "Main Class"),
                            ("LECTURE", "Lecture"),
                            ("DISCUSSION", "Discussion"),
                            ("LAB", "Laboratory"),
                            ("COMPUTER", "Computer Lab"),
                            ("GRAMMAR", "Grammar"),
                            ("CONVERSATION", "Conversation"),
                            ("WRITING", "Writing"),
                            ("READING", "Reading"),
                            ("LISTENING", "Listening"),
                            ("SPEAKING", "Speaking"),
                            ("WORKSHOP", "Workshop"),
                            ("TUTORIAL", "Tutorial"),
                            ("PROJECT", "Project"),
                            ("OTHER", "Other"),
                        ],
                        default="MAIN",
                        help_text="Type of class component",
                        max_length=20,
                        verbose_name="Class Part Type",
                    ),
                ),
                (
                    "class_part_code",
                    models.CharField(
                        default="A",
                        help_text="Code for this part (A, B, C, etc.)",
                        max_length=10,
                        verbose_name="Class Part Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name for this part (e.g., 'Ventures Ventures', 'Reading')",
                        max_length=100,
                        verbose_name="Part Name",
                    ),
                ),
                (
                    "meeting_days_pattern",
                    models.CharField(
                        help_text="Days pattern (e.g., 'MON,WED' or 'TUE,THU' or 'FRI')",
                        max_length=50,
                        verbose_name="Meeting Days Pattern",
                    ),
                ),
                (
                    "sequence_order",
                    models.IntegerField(
                        default=0, help_text="Order in which parts should be created", verbose_name="Sequence Order"
                    ),
                ),
                (
                    "grade_weight",
                    models.DecimalField(
                        decimal_places=3,
                        default=Decimal("1.000"),
                        help_text="Weight of this part in final grade (0.000-1.000)",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.000")),
                            django.core.validators.MaxValueValidator(Decimal("1.000")),
                        ],
                        verbose_name="Grade Weight",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this template is active", verbose_name="Is Active"
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes about this template", verbose_name="Notes"
                    ),
                ),
                (
                    "default_textbooks",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Default textbooks for this part",
                        related_name="template_parts",
                        to="curriculum.textbook",
                        verbose_name="Default Textbooks",
                    ),
                ),
                (
                    "template_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="templates",
                        to="scheduling.classparttemplateset",
                        verbose_name="Template Set",
                    ),
                ),
            ],
            options={
                "verbose_name": "Class Part Template",
                "verbose_name_plural": "Class Part Templates",
                "ordering": ["template_set", "sequence_order", "class_part_code"],
                "indexes": [
                    models.Index(fields=["template_set", "sequence_order"], name="scheduling__templat_20c429_idx")
                ],
                "unique_together": {("template_set", "class_part_code")},
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
    ]
