# Generated by Django 5.2.4 on 2025-07-15 01:23

from decimal import Decimal

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("people", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Sponsor",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        help_text="Short code or abbreviation for the sponsor (e.g., CRST, PLF)",
                        max_length=10,
                        unique=True,
                        verbose_name="Sponsor Code",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Full formal name of the sponsoring organization",
                        max_length=100,
                        verbose_name="Sponsor Name",
                    ),
                ),
                (
                    "contact_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the primary contact person at the sponsor organization",
                        max_length=100,
                        verbose_name="Contact Person",
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address of the primary contact person",
                        max_length=254,
                        verbose_name="Contact Email",
                    ),
                ),
                (
                    "contact_phone",
                    models.CharField(
                        blank=True,
                        help_text="Phone number of the primary contact person",
                        max_length=20,
                        verbose_name="Contact Phone",
                    ),
                ),
                (
                    "billing_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address for sending invoices and billing communications",
                        max_length=254,
                        verbose_name="Billing Email",
                    ),
                ),
                (
                    "mou_start_date",
                    models.DateField(
                        help_text="Start date of the Memorandum of Understanding",
                        verbose_name="MOU Start Date",
                    ),
                ),
                (
                    "mou_end_date",
                    models.DateField(
                        blank=True,
                        help_text="End date of the MOU (leave blank for ongoing agreements)",
                        null=True,
                        verbose_name="MOU End Date",
                    ),
                ),
                (
                    "default_discount_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Standard discount percentage for sponsored students (0.00 to 100.00)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Default Discount Percentage",
                    ),
                ),
                (
                    "requests_tax_addition",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to add tax on top of invoices for this sponsor",
                        verbose_name="Add Tax to Invoices",
                    ),
                ),
                (
                    "requests_consolidated_invoicing",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to group all sponsored students into one consolidated invoice",
                        verbose_name="Consolidated Invoicing",
                    ),
                ),
                (
                    "admin_fee_exempt_until",
                    models.DateField(
                        blank=True,
                        help_text="Date until which sponsored students are exempt from administrative fees",
                        null=True,
                        verbose_name="Admin Fee Exemption Until",
                    ),
                ),
                (
                    "requests_attendance_reporting",
                    models.BooleanField(
                        default=False,
                        help_text="Whether sponsor requests attendance reports for their students",
                        verbose_name="Attendance Reporting",
                    ),
                ),
                (
                    "requests_grade_reporting",
                    models.BooleanField(
                        default=False,
                        help_text="Whether sponsor requests grade reports for their students",
                        verbose_name="Grade Reporting",
                    ),
                ),
                (
                    "requests_scheduling_reporting",
                    models.BooleanField(
                        default=False,
                        help_text="Whether sponsor requests class schedule reports for their students",
                        verbose_name="Scheduling Reporting",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this sponsor is currently active",
                        verbose_name="Is Active",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this sponsor",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sponsor",
                "verbose_name_plural": "Sponsors",
                "ordering": ["name"],
                "indexes": [
                    models.Index(fields=["code"], name="scholarship_code_d41791_idx"),
                    models.Index(fields=["is_active"], name="scholarship_is_acti_272bb0_idx"),
                    models.Index(
                        fields=["mou_start_date", "mou_end_date"],
                        name="scholarship_mou_sta_534c7b_idx",
                    ),
                ],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="SponsoredStudent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "sponsorship_type",
                    models.CharField(
                        choices=[
                            ("FULL", "Full Sponsorship"),
                            ("PARTIAL", "Partial Sponsorship"),
                            ("EMERGENCY", "Emergency Support"),
                            ("SCHOLARSHIP", "Scholarship"),
                        ],
                        default="FULL",
                        help_text="Type of sponsorship arrangement",
                        max_length=20,
                        verbose_name="Sponsorship Type",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Date when sponsorship begins",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when sponsorship ends (leave blank for ongoing)",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this sponsorship arrangement",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "sponsor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sponsored_students",
                        to="scholarships.sponsor",
                        verbose_name="Sponsor",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="sponsorships",
                        to="people.studentprofile",
                        verbose_name="Student",
                    ),
                ),
            ],
            options={
                "verbose_name": "Sponsored Student",
                "verbose_name_plural": "Sponsored Students",
                "ordering": ["-start_date", "sponsor", "student"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Scholarship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the record was created",
                        verbose_name="Created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="Updated at",
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if this record has been soft deleted",
                        verbose_name="Is deleted",
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the record was marked as deleted",
                        null=True,
                        verbose_name="Deleted at",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name or title of the scholarship",
                        max_length=200,
                        verbose_name="Scholarship Name",
                    ),
                ),
                (
                    "scholarship_type",
                    models.CharField(
                        choices=[
                            ("MERIT", "Merit-Based"),
                            ("NEED", "Need-Based"),
                            ("SPONSORED", "Sponsor-Funded"),
                            ("EMERGENCY", "Emergency Aid"),
                            ("ATHLETIC", "Athletic Scholarship"),
                            ("ACADEMIC", "Academic Excellence"),
                        ],
                        help_text="Type of scholarship",
                        max_length=20,
                        verbose_name="Scholarship Type",
                    ),
                ),
                (
                    "award_percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Percentage of costs covered (0.00 to 100.00)",
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("100.00")),
                        ],
                        verbose_name="Award Percentage",
                    ),
                ),
                (
                    "award_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Fixed amount of the award (alternative to percentage)",
                        max_digits=10,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                        verbose_name="Fixed Award Amount",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="Date when scholarship becomes effective",
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        blank=True,
                        help_text="Date when scholarship expires (leave blank for ongoing)",
                        null=True,
                        verbose_name="End Date",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending Review"),
                            ("APPROVED", "Approved"),
                            ("ACTIVE", "Active"),
                            ("SUSPENDED", "Suspended"),
                            ("COMPLETED", "Completed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        default="PENDING",
                        help_text="Current status of this scholarship",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of the scholarship",
                        verbose_name="Description",
                    ),
                ),
                (
                    "conditions",
                    models.TextField(
                        blank=True,
                        help_text="Conditions or requirements for maintaining the scholarship",
                        verbose_name="Conditions",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional notes about this scholarship",
                        verbose_name="Notes",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="scholarships",
                        to="people.studentprofile",
                        verbose_name="Student",
                    ),
                ),
                (
                    "sponsored_student",
                    models.OneToOneField(
                        blank=True,
                        help_text="Link to sponsored student record (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="scholarship",
                        to="scholarships.sponsoredstudent",
                        verbose_name="Sponsored Student",
                    ),
                ),
            ],
            options={
                "verbose_name": "Scholarship",
                "verbose_name_plural": "Scholarships",
                "ordering": ["-start_date", "student"],
            },
            managers=[
                ("all_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddIndex(
            model_name="sponsoredstudent",
            index=models.Index(fields=["sponsor", "start_date"], name="scholarship_sponsor_20523d_idx"),
        ),
        migrations.AddIndex(
            model_name="sponsoredstudent",
            index=models.Index(fields=["student", "start_date"], name="scholarship_student_8c18c1_idx"),
        ),
        migrations.AddIndex(
            model_name="sponsoredstudent",
            index=models.Index(fields=["start_date", "end_date"], name="scholarship_start_d_907e0f_idx"),
        ),
        migrations.AddConstraint(
            model_name="sponsoredstudent",
            constraint=models.UniqueConstraint(
                fields=("sponsor", "student", "start_date"),
                name="unique_sponsorship_per_start_date",
            ),
        ),
        migrations.AddIndex(
            model_name="scholarship",
            index=models.Index(fields=["student", "status"], name="scholarship_student_563d16_idx"),
        ),
        migrations.AddIndex(
            model_name="scholarship",
            index=models.Index(
                fields=["scholarship_type", "status"],
                name="scholarship_scholar_1a1673_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="scholarship",
            index=models.Index(fields=["start_date", "end_date"], name="scholarship_start_d_f212c8_idx"),
        ),
        migrations.AddIndex(
            model_name="scholarship",
            index=models.Index(fields=["status", "-start_date"], name="scholarship_status_5be4c8_idx"),
        ),
    ]
