[mypy]
# Only check files that are explicitly imported or specified
follow_imports = silent

# Django-specific settings
explicit_package_bases = true
namespace_packages = true

# Don't check untyped definitions in existing code
check_untyped_defs = false

# Only warn about return types in new code
warn_return_any = false

# Don't require type annotations for existing functions
disallow_untyped_defs = false
disallow_incomplete_defs = false

# But DO check for basic issues in new code
warn_unused_ignores = true
warn_redundant_casts = true
warn_no_return = true

# Show error codes for easier suppression if needed
show_error_codes = true

# Incremental mode for better performance
incremental = true
cache_dir = .mypy_cache

# Less strict settings to avoid overwhelming existing code
strict_optional = false
disallow_any_generics = false

# Only check files that are actually being worked on
ignore_missing_imports = true

# Per-module configuration for stricter checking on new modules
# (You can add specific modules here as you create new code)

# --- Project-specific overrides to reduce noise ---

[mypy-apps.*.tests.*]
ignore_errors = true

[mypy-api.tests.*]
ignore_errors = true

[mypy-apps.web_interface.examples.*]
ignore_errors = true

[mypy-apps.finance.management.commands.transitional.reconstruct_ar_integrated]
ignore_errors = true

# Django model modules: suppress noisy ORM magic errors
[mypy-apps.*.models]
disable_error_code = attr-defined, no-any-return, misc, arg-type, assignment, return-value

[mypy-apps.*.models.*]
disable_error_code = attr-defined, no-any-return, misc, arg-type, assignment, return-value
[mypy-apps.data_pipeline.management.commands.run_pipeline]
ignore_errors = true
