# Comprehensive logging configuration for Naga SIS
version: 1
disable_existing_loggers: false

formatters:
  # Structured JSON formatter for production
  json:
    '()': 'pythonjsonlogger.jsonlogger.JsonFormatter'
    format: '%(asctime)s %(name)s %(levelname)s %(message)s %(pathname)s %(lineno)d %(funcName)s %(process)d %(thread)d'
    datefmt: '%Y-%m-%dT%H:%M:%S'
    
  # Human-readable formatter for development
  verbose:
    format: '{asctime} [{levelname}] {name}: {message} (pid={process}, thread={thread})'
    style: '{'
    datefmt: '%Y-%m-%d %H:%M:%S'
    
  # Simple formatter for console output
  simple:
    format: '{levelname} {name}: {message}'
    style: '{'

filters:
  # Filter to add request information
  request_filter:
    '()': 'django.utils.log.RequireDebugFalse'
    
  # Filter sensitive information
  sensitive_filter:
    '()': 'naga_backend.common.logging.SensitiveDataFilter'

handlers:
  # Console output for development
  console:
    class: 'logging.StreamHandler'
    level: 'INFO'
    formatter: 'simple'
    stream: 'ext://sys.stdout'
    
  # File handler for application logs
  file:
    class: 'logging.handlers.RotatingFileHandler'
    level: 'INFO'
    formatter: 'json'
    filename: '/var/log/naga/app.log'
    maxBytes: 10485760  # 10MB
    backupCount: 5
    encoding: 'utf8'
    filters: ['sensitive_filter']
    
  # Separate file for error logs
  error_file:
    class: 'logging.handlers.RotatingFileHandler'
    level: 'ERROR'
    formatter: 'json'
    filename: '/var/log/naga/error.log'
    maxBytes: 10485760  # 10MB
    backupCount: 10
    encoding: 'utf8'
    
  # Security-specific log handler
  security_file:
    class: 'logging.handlers.RotatingFileHandler'
    level: 'WARNING'
    formatter: 'json'
    filename: '/var/log/naga/security.log'
    maxBytes: 10485760  # 10MB
    backupCount: 20
    encoding: 'utf8'
    
  # Audit log handler (never rotated for compliance)
  audit_file:
    class: 'logging.FileHandler'
    level: 'INFO'
    formatter: 'json'
    filename: '/var/log/naga/audit.log'
    encoding: 'utf8'
    
  # Database query log handler
  db_file:
    class: 'logging.handlers.RotatingFileHandler'
    level: 'DEBUG'
    formatter: 'json'
    filename: '/var/log/naga/database.log'
    maxBytes: 52428800  # 50MB
    backupCount: 3
    encoding: 'utf8'
    
  # Sentry for error reporting
  sentry:
    class: 'sentry_sdk.integrations.logging.SentryHandler'
    level: 'ERROR'
    
  # Slack notifications for critical errors
  slack:
    class: 'slack_logger.SlackHandler'
    level: 'CRITICAL'
    webhook_url: '${SLACK_WEBHOOK_URL}'
    username: 'Naga Error Bot'
    icon_emoji: ':rotating_light:'

loggers:
  # Root logger
  '':
    level: 'INFO'
    handlers: ['console', 'file', 'error_file']
    propagate: false
    
  # Django framework loggers
  django:
    level: 'INFO'
    handlers: ['file']
    propagate: false
    
  django.request:
    level: 'WARNING'
    handlers: ['error_file', 'sentry']
    propagate: false
    
  django.server:
    level: 'INFO'
    handlers: ['file']
    propagate: false
    
  django.security:
    level: 'WARNING'
    handlers: ['security_file', 'sentry']
    propagate: false
    
  django.db.backends:
    level: 'WARNING'  # Set to DEBUG for query logging in development
    handlers: ['db_file']
    propagate: false
    
  # Application-specific loggers
  naga_backend:
    level: 'INFO'
    handlers: ['file', 'error_file']
    propagate: false
    
  naga_backend.apps.enrollment:
    level: 'INFO'
    handlers: ['file', 'audit_file']
    propagate: false
    
  naga_backend.apps.finance:
    level: 'INFO'
    handlers: ['file', 'audit_file', 'security_file']
    propagate: false
    
  naga_backend.apps.grading:
    level: 'INFO'
    handlers: ['file', 'audit_file']
    propagate: false
    
  naga_backend.apps.people:
    level: 'INFO'
    handlers: ['file', 'security_file']
    propagate: false
    
  naga_backend.apps.attendance:
    level: 'INFO'
    handlers: ['file', 'audit_file']
    propagate: false
    
  # Security-related loggers
  naga_backend.security:
    level: 'WARNING'
    handlers: ['security_file', 'sentry', 'slack']
    propagate: false
    
  # Audit trail logger
  naga_backend.audit:
    level: 'INFO'
    handlers: ['audit_file']
    propagate: false
    
  # Performance logger
  naga_backend.performance:
    level: 'WARNING'
    handlers: ['file', 'sentry']
    propagate: false
    
  # Business logic errors
  naga_backend.business:
    level: 'ERROR'
    handlers: ['error_file', 'sentry']
    propagate: false
    
  # Third-party library loggers
  celery:
    level: 'WARNING'
    handlers: ['file']
    propagate: false
    
  dramatiq:
    level: 'WARNING'
    handlers: ['file']
    propagate: false
    
  gunicorn:
    level: 'INFO'
    handlers: ['file']
    propagate: false
    
  uvicorn:
    level: 'INFO'
    handlers: ['file']
    propagate: false
    
  # Suppress noisy loggers
  PIL:
    level: 'WARNING'
    handlers: ['file']
    propagate: false
    
  urllib3:
    level: 'WARNING'
    handlers: ['file']
    propagate: false